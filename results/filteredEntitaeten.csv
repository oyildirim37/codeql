completeCreate(),AmplitudeService.completeCreate() in AmplitudeService/AmplitudeServiceKit/AmplitudeService.swift
completeUpdate(),AmplitudeService.completeUpdate() in AmplitudeService/AmplitudeServiceKit/AmplitudeService.swift
completeDelete(),AmplitudeService.completeDelete() in AmplitudeService/AmplitudeServiceKit/AmplitudeService.swift
createClient(),AmplitudeService.createClient() in AmplitudeService/AmplitudeServiceKit/AmplitudeService.swift
nib(),NibLoadable.nib() in AmplitudeService/AmplitudeServiceKitUI/NibLoadable.swift
viewDidLoad(),AmplitudeServiceTableViewController.viewDidLoad() in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
updateButtonStates(),AmplitudeServiceTableViewController.updateButtonStates() in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
cancel(),AmplitudeServiceTableViewController.cancel() in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
done(),AmplitudeServiceTableViewController.done() in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
confirmDeletion(completion:),AmplitudeServiceTableViewController.confirmDeletion(completion:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
notifyComplete(),AmplitudeServiceTableViewController.notifyComplete() in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
numberOfSections(in:),AmplitudeServiceTableViewController.numberOfSections(in:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
tableView(_:numberOfRowsInSection:),AmplitudeServiceTableViewController.tableView(_:numberOfRowsInSection:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
tableView(_:titleForHeaderInSection:),AmplitudeServiceTableViewController.tableView(_:titleForHeaderInSection:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
tableView(_:cellForRowAt:),AmplitudeServiceTableViewController.tableView(_:cellForRowAt:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
tableView(_:didSelectRowAt:),AmplitudeServiceTableViewController.tableView(_:didSelectRowAt:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
textField(_:shouldChangeCharactersIn:replacementString:),AmplitudeServiceTableViewController.textField(_:shouldChangeCharactersIn:replacementString:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
textFieldShouldReturn(_:),AmplitudeServiceTableViewController.textFieldShouldReturn(_:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
peripheralManager(_:didUpdateValueFor:),PeripheralManagerDelegate.peripheralManager(_:didUpdateValueFor:) in CGMBLEKit/CGMBLEKit/PeripheralManager.swift
peripheralManager(_:didReadRSSI:error:),PeripheralManagerDelegate.peripheralManager(_:didReadRSSI:error:) in CGMBLEKit/CGMBLEKit/PeripheralManager.swift
peripheralManagerDidUpdateName(_:),PeripheralManagerDelegate.peripheralManagerDidUpdateName(_:) in CGMBLEKit/CGMBLEKit/PeripheralManager.swift
completeConfiguration(for:),PeripheralManagerDelegate.completeConfiguration(for:) in CGMBLEKit/CGMBLEKit/PeripheralManager.swift
mutate(_:),Locked.mutate(_:) in CGMBLEKit/Common/Locked.swift
append(_:),GlucoseBackfillFrameBuffer.append(_:) in CGMBLEKit/CGMBLEKit/Messages/GlucoseBackfillMessage.swift
transmitterDidConnect(_:),TransmitterDelegate.transmitterDidConnect(_:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
transmitter(_:didError:),TransmitterDelegate.transmitter(_:didError:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
transmitter(_:didRead:),TransmitterDelegate.transmitter(_:didRead:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
transmitter(_:didReadBackfill:),TransmitterDelegate.transmitter(_:didReadBackfill:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
transmitter(_:didReadUnknownData:),TransmitterDelegate.transmitter(_:didReadUnknownData:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
resumeScanning(),Transmitter.resumeScanning() in CGMBLEKit/CGMBLEKit/Transmitter.swift
stopScanning(),Transmitter.stopScanning() in CGMBLEKit/CGMBLEKit/Transmitter.swift
bluetoothManager(_:peripheralManager:isReadyWithError:),Transmitter.bluetoothManager(_:peripheralManager:isReadyWithError:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
bluetoothManager(_:shouldConnectPeripheral:),Transmitter.bluetoothManager(_:shouldConnectPeripheral:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
bluetoothManager(_:peripheralManager:didReceiveControlResponse:),Transmitter.bluetoothManager(_:peripheralManager:didReceiveControlResponse:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
bluetoothManager(_:didReceiveBackfillResponse:),Transmitter.bluetoothManager(_:didReceiveBackfillResponse:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
bluetoothManager(_:peripheralManager:didReceiveAuthenticationResponse:),Transmitter.bluetoothManager(_:peripheralManager:didReceiveAuthenticationResponse:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
bluetoothManager(_:peripheralManager:isReadyWithError:),BluetoothManagerDelegate.bluetoothManager(_:peripheralManager:isReadyWithError:) in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
bluetoothManager(_:shouldConnectPeripheral:),BluetoothManagerDelegate.bluetoothManager(_:shouldConnectPeripheral:) in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
bluetoothManager(_:peripheralManager:didReceiveControlResponse:),BluetoothManagerDelegate.bluetoothManager(_:peripheralManager:didReceiveControlResponse:) in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
bluetoothManager(_:didReceiveBackfillResponse:),BluetoothManagerDelegate.bluetoothManager(_:didReceiveBackfillResponse:) in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
bluetoothManager(_:peripheralManager:didReceiveAuthenticationResponse:),BluetoothManagerDelegate.bluetoothManager(_:peripheralManager:didReceiveAuthenticationResponse:) in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
scanForPeripheral(),BluetoothManager.scanForPeripheral() in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
disconnect(),BluetoothManager.disconnect() in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
managerQueue_scanForPeripheral(),BluetoothManager.managerQueue_scanForPeripheral() in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
scanAfterDelay(),BluetoothManager.scanAfterDelay() in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
dequeuePendingCommand(for:),TransmitterCommandSource.dequeuePendingCommand(for:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
transmitter(_:didFail:with:),TransmitterCommandSource.transmitter(_:didFail:with:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
transmitter(_:didComplete:),TransmitterCommandSource.transmitter(_:didComplete:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
computeHash(of:),TransmitterID.computeHash(of:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
transmitterManagerDidUpdateLatestReading(_:),TransmitterManagerObserver.transmitterManagerDidUpdateLatestReading(_:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
setState(_:),TransmitterManager.setState(_:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
mutateState(_:),TransmitterManager.mutateState(_:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
setStateWithResult(_:),TransmitterManager.setStateWithResult(_:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
stateDidUpdate(),TransmitterManager.stateDidUpdate() in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
setupSimulatedSampleGenerator(),TransmitterManager.setupSimulatedSampleGenerator() in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
generateSimulatedSample(),TransmitterManager.generateSimulatedSample() in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
logDeviceCommunication(_:type:),TransmitterManager.logDeviceCommunication(_:type:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
fetchNewDataIfNeeded(_:),TransmitterManager.fetchNewDataIfNeeded(_:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
updateDelegate(with:),TransmitterManager.updateDelegate(with:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
notifyDelegateOfStateChange(),TransmitterManager.notifyDelegateOfStateChange() in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
transmitterDidConnect(_:),TransmitterManager.transmitterDidConnect(_:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
transmitter(_:didError:),TransmitterManager.transmitter(_:didError:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
transmitter(_:didRead:),TransmitterManager.transmitter(_:didRead:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
transmitter(_:didReadBackfill:),TransmitterManager.transmitter(_:didReadBackfill:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
transmitter(_:didReadUnknownData:),TransmitterManager.transmitter(_:didReadUnknownData:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
logDeviceCommunication(_:type:),G5CGMManager.logDeviceCommunication(_:type:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
stateDidUpdate(),G5CGMManager.stateDidUpdate() in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
logDeviceCommunication(_:type:),G6CGMManager.logDeviceCommunication(_:type:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
stateDidUpdate(),G6CGMManager.stateDidUpdate() in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
viewDidLoad(),TransmitterSettingsViewController.viewDidLoad() in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
doneTapped(_:),TransmitterSettingsViewController.doneTapped(_:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
complete(),TransmitterSettingsViewController.complete() in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
viewWillAppear(_:),TransmitterSettingsViewController.viewWillAppear(_:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
numberOfSections(in:),TransmitterSettingsViewController.numberOfSections(in:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
tableView(_:numberOfRowsInSection:),TransmitterSettingsViewController.tableView(_:numberOfRowsInSection:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
tableView(_:cellForRowAt:),TransmitterSettingsViewController.tableView(_:cellForRowAt:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
tableView(_:titleForHeaderInSection:),TransmitterSettingsViewController.tableView(_:titleForHeaderInSection:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
tableView(_:shouldHighlightRowAt:),TransmitterSettingsViewController.tableView(_:shouldHighlightRowAt:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
tableView(_:willSelectRowAt:),TransmitterSettingsViewController.tableView(_:willSelectRowAt:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
tableView(_:didSelectRowAt:),TransmitterSettingsViewController.tableView(_:didSelectRowAt:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
tableView(_:willDeselectRowAt:),TransmitterSettingsViewController.tableView(_:willDeselectRowAt:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
uploadEnabledChanged(_:),TransmitterSettingsViewController.uploadEnabledChanged(_:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
updateShareUsername(),TransmitterIDSetupViewController.updateShareUsername() in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
updateStateForSettings(),TransmitterIDSetupViewController.updateStateForSettings() in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
continueButtonPressed(_:),TransmitterIDSetupViewController.continueButtonPressed(_:) in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
cancelButtonPressed(_:),TransmitterIDSetupViewController.cancelButtonPressed(_:) in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
shouldPerformSegue(withIdentifier:sender:),TransmitterIDSetupViewController.shouldPerformSegue(withIdentifier:sender:) in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
viewDidLoad(),TransmitterIDSetupViewController.viewDidLoad() in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
tableView(_:didSelectRowAt:),TransmitterIDSetupViewController.tableView(_:didSelectRowAt:) in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
instantiateFromStoryboard(),TransmitterSetupViewController.instantiateFromStoryboard() in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
viewDidLoad(),TransmitterSetupViewController.viewDidLoad() in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
completeSetup(state:),TransmitterSetupViewController.completeSetup(state:) in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
navigationController(_:willShow:animated:),TransmitterSetupViewController.navigationController(_:willShow:animated:) in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
navigationController(_:didShow:animated:),TransmitterSetupViewController.navigationController(_:didShow:animated:) in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
g7StateDidUpdate(_:),G7StateObserver.g7StateDidUpdate(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
g7ConnectionStatusDidChange(),G7StateObserver.g7ConnectionStatusDidChange() in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
setState(_:),G7CGMManager.setState(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
mutateState(_:),G7CGMManager.mutateState(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
setStateWithResult(_:),G7CGMManager.setStateWithResult(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
fetchNewDataIfNeeded(_:),G7CGMManager.fetchNewDataIfNeeded(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
acknowledgeAlert(alertIdentifier:completion:),G7CGMManager.acknowledgeAlert(alertIdentifier:completion:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
getSoundBaseURL(),G7CGMManager.getSoundBaseURL() in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
getSounds(),G7CGMManager.getSounds() in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
scanForNewSensor(),G7CGMManager.scanForNewSensor() in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
logDeviceCommunication(_:type:),G7CGMManager.logDeviceCommunication(_:type:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
updateDelegate(with:),G7CGMManager.updateDelegate(with:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
setSensorId(_:),G7Sensor.setSensorId(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
scanForNewSensor(),G7Sensor.scanForNewSensor() in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
resumeScanning(),G7Sensor.resumeScanning() in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
stopScanning(),G7Sensor.stopScanning() in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
handleGlucoseMessage(message:peripheralManager:),G7Sensor.handleGlucoseMessage(message:peripheralManager:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
bluetoothManager(_:readied:),G7Sensor.bluetoothManager(_:readied:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
bluetoothManager(_:readyingFailed:with:),G7Sensor.bluetoothManager(_:readyingFailed:with:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
peripheralDidDisconnect(_:peripheralManager:wasRemoteDisconnect:),G7Sensor.peripheralDidDisconnect(_:peripheralManager:wasRemoteDisconnect:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
bluetoothManager(_:shouldConnectPeripheral:),G7Sensor.bluetoothManager(_:shouldConnectPeripheral:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
bluetoothManager(_:peripheralManager:didReceiveControlResponse:),G7Sensor.bluetoothManager(_:peripheralManager:didReceiveControlResponse:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
bluetoothManager(_:didReceiveBackfillResponse:),G7Sensor.bluetoothManager(_:didReceiveBackfillResponse:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
bluetoothManager(_:peripheralManager:didReceiveAuthenticationResponse:),G7Sensor.bluetoothManager(_:peripheralManager:didReceiveAuthenticationResponse:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
bluetoothManagerScanningStatusDidChange(_:),G7Sensor.bluetoothManagerScanningStatusDidChange(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
bluetoothManager(_:readied:),G7BluetoothManagerDelegate.bluetoothManager(_:readied:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
bluetoothManager(_:readyingFailed:with:),G7BluetoothManagerDelegate.bluetoothManager(_:readyingFailed:with:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
bluetoothManager(_:shouldConnectPeripheral:),G7BluetoothManagerDelegate.bluetoothManager(_:shouldConnectPeripheral:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
bluetoothManager(_:peripheralManager:didReceiveControlResponse:),G7BluetoothManagerDelegate.bluetoothManager(_:peripheralManager:didReceiveControlResponse:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
bluetoothManager(_:didReceiveBackfillResponse:),G7BluetoothManagerDelegate.bluetoothManager(_:didReceiveBackfillResponse:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
bluetoothManager(_:peripheralManager:didReceiveAuthenticationResponse:),G7BluetoothManagerDelegate.bluetoothManager(_:peripheralManager:didReceiveAuthenticationResponse:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
bluetoothManagerScanningStatusDidChange(_:),G7BluetoothManagerDelegate.bluetoothManagerScanningStatusDidChange(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
peripheralDidDisconnect(_:peripheralManager:wasRemoteDisconnect:),G7BluetoothManagerDelegate.peripheralDidDisconnect(_:peripheralManager:wasRemoteDisconnect:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
peripheralManager(_:didUpdateValueFor:),G7PeripheralManagerDelegate.peripheralManager(_:didUpdateValueFor:) in G7SensorKit/G7SensorKit/G7CGMManager/G7PeripheralManager.swift
peripheralManager(_:didReadRSSI:error:),G7PeripheralManagerDelegate.peripheralManager(_:didReadRSSI:error:) in G7SensorKit/G7SensorKit/G7CGMManager/G7PeripheralManager.swift
peripheralManagerDidUpdateName(_:),G7PeripheralManagerDelegate.peripheralManagerDidUpdateName(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7PeripheralManager.swift
completeConfiguration(for:),G7PeripheralManagerDelegate.completeConfiguration(for:) in G7SensorKit/G7SensorKit/G7CGMManager/G7PeripheralManager.swift
scanForPeripheral(),G7BluetoothManager.scanForPeripheral() in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
forgetPeripheral(),G7BluetoothManager.forgetPeripheral() in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
stopScanning(),G7BluetoothManager.stopScanning() in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
managerQueue_stopScanning(),G7BluetoothManager.managerQueue_stopScanning() in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
disconnect(),G7BluetoothManager.disconnect() in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
managerQueue_scanForPeripheral(),G7BluetoothManager.managerQueue_scanForPeripheral() in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
scanAfterDelay(),G7BluetoothManager.scanAfterDelay() in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
handleDiscoveredPeripheral(_:),G7BluetoothManager.handleDiscoveredPeripheral(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
sensorDidConnect(_:name:),G7SensorDelegate.sensorDidConnect(_:name:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
sensorDisconnected(_:suspectedEndOfSession:),G7SensorDelegate.sensorDisconnected(_:suspectedEndOfSession:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
sensor(_:didError:),G7SensorDelegate.sensor(_:didError:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
sensor(_:didRead:),G7SensorDelegate.sensor(_:didRead:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
sensor(_:didReadBackfill:),G7SensorDelegate.sensor(_:didReadBackfill:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
sensor(_:didDiscoverNewSensor:activatedAt:),G7SensorDelegate.sensor(_:didDiscoverNewSensor:activatedAt:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
sensorConnectionStatusDidUpdate(_:),G7SensorDelegate.sensorConnectionStatusDidUpdate(_:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
mutate(_:),Locked.mutate(_:) in G7SensorKit/Common/Locked.swift
color(for:),G7SettingsView.color(for:) in G7SensorKit/G7SensorKitUI/Views/G7SettingsView.swift
updateValues(),G7SettingsViewModel.updateValues() in G7SensorKit/G7SensorKitUI/Views/G7SettingsViewModel.swift
scanForNewSensor(),G7SettingsViewModel.scanForNewSensor() in G7SensorKit/G7SensorKitUI/Views/G7SettingsViewModel.swift
viewDidLoad(),G7UICoordinator.viewDidLoad() in G7SensorKit/G7SensorKitUI/G7CGMManager/G7UICoordinator.swift
initialView(),G7UICoordinator.initialView() in G7SensorKit/G7SensorKitUI/G7CGMManager/G7UICoordinator.swift
completeSetup(),G7UICoordinator.completeSetup() in G7SensorKit/G7SensorKitUI/G7CGMManager/G7UICoordinator.swift
timeDifference(oldGlucose:newGlucose:),LibreGlucose.timeDifference(oldGlucose:newGlucose:) in LibreTransmitter/LibreTransmitter/LibreGlucose.swift
GetGlucoseTrend(last:),LibreGlucose.GetGlucoseTrend(last:) in LibreTransmitter/LibreTransmitter/LibreGlucose.swift
encode(to:),CalibrationInfo.encode(to:) in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
decrypt(patchInfo:uid:),SensorData.decrypt(patchInfo:uid:) in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
trendMeasurements(_:slope:),SensorData.trendMeasurements(_:slope:) in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
dateOfMostRecentHistoryValue(),SensorData.dateOfMostRecentHistoryValue() in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
dateOfMostRecentHistoryValue(),SensorData.dateOfMostRecentHistoryValue() in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
historyMeasurements(_:slope:),SensorData.historyMeasurements(_:slope:) in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
oopWebInterfaceInput(),SensorData.oopWebInterfaceInput() in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
bytesWithCorrectCRC(),SensorData.bytesWithCorrectCRC() in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
extractErrorBitField(_:),Measurement.extractErrorBitField(_:) in LibreTransmitter/LibreSensor/SensorContents/Measurement.swift
sendUpdate(_:),MockSensorPairingService.sendUpdate(_:) in LibreTransmitter/LibreTransmitter/Mocks/MockSensorPairingService.swift
pairSensor(),MockSensorPairingService.pairSensor() in LibreTransmitter/LibreTransmitter/Mocks/MockSensorPairingService.swift
pairSensor(),SensorPairingProtocol.pairSensor() in LibreTransmitter/LibreSensor/SensorPairing/SensorPairing.swift
encode(to:),SensorPairingInfo.encode(to:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairing.swift
reset(),Libre2DirectTransmitter.reset() in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
canSupportPeripheral(_:),Libre2DirectTransmitter.canSupportPeripheral(_:) in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
getDeviceDetailsFromAdvertisement(advertisementData:),Libre2DirectTransmitter.getDeviceDetailsFromAdvertisement(advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
requestData(writeCharacteristics:peripheral:),Libre2DirectTransmitter.requestData(writeCharacteristics:peripheral:) in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
updateValueForNotifyCharacteristics(_:peripheral:writeCharacteristic:),Libre2DirectTransmitter.updateValueForNotifyCharacteristics(_:peripheral:writeCharacteristic:) in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
didDiscoverWriteCharacteristics(_:writeCharacteristics:),Libre2DirectTransmitter.didDiscoverWriteCharacteristics(_:writeCharacteristics:) in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
didDiscoverNotificationCharacteristic(_:notifyCharacteristic:),Libre2DirectTransmitter.didDiscoverNotificationCharacteristic(_:notifyCharacteristic:) in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
unlock(),Libre2DirectTransmitter.unlock() in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
handleCompleteMessage(),Libre2DirectTransmitter.handleCompleteMessage() in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
canSupportPeripheral(_:),LibreTransmitterProxyProtocol.canSupportPeripheral(_:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
requestData(writeCharacteristics:peripheral:),LibreTransmitterProxyProtocol.requestData(writeCharacteristics:peripheral:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
updateValueForNotifyCharacteristics(_:peripheral:writeCharacteristic:),LibreTransmitterProxyProtocol.updateValueForNotifyCharacteristics(_:peripheral:writeCharacteristic:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
didDiscoverWriteCharacteristics(_:writeCharacteristics:),LibreTransmitterProxyProtocol.didDiscoverWriteCharacteristics(_:writeCharacteristics:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
didDiscoverNotificationCharacteristic(_:notifyCharacteristic:),LibreTransmitterProxyProtocol.didDiscoverNotificationCharacteristic(_:notifyCharacteristic:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
didWrite(_:characteristics:),LibreTransmitterProxyProtocol.didWrite(_:characteristics:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
reset(),LibreTransmitterProxyProtocol.reset() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
getDeviceDetailsFromAdvertisement(advertisementData:),LibreTransmitterProxyProtocol.getDeviceDetailsFromAdvertisement(advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
enqueue(_:),LimitedQueue.enqueue(_:) in LibreTransmitter/LibreSensor/LimitedQueue.swift
removeAll(),LimitedQueue.removeAll() in LibreTransmitter/LibreSensor/LimitedQueue.swift
dequeue(),LimitedQueue.dequeue() in LibreTransmitter/LibreSensor/LimitedQueue.swift
sensorType(),LibreTransmitterMetadata.sensorType() in LibreTransmitter/Bluetooth/LibreTransmitterMetadata.swift
libreDeviceStateChanged(_:),LibreTransmitterDelegate.libreDeviceStateChanged(_:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreDeviceReceivedMessage(_:payloadData:),LibreTransmitterDelegate.libreDeviceReceivedMessage(_:payloadData:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreDeviceLogMessage(payload:type:),LibreTransmitterDelegate.libreDeviceLogMessage(payload:type:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreTransmitterDidUpdate(with:and:),LibreTransmitterDelegate.libreTransmitterDidUpdate(with:and:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreSensorDidUpdate(with:and:),LibreTransmitterDelegate.libreSensorDidUpdate(with:and:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreSensorDidUpdate(with:),LibreTransmitterDelegate.libreSensorDidUpdate(with:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
noLibreTransmitterSelected(),LibreTransmitterDelegate.noLibreTransmitterSelected() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreManagerDidRestoreState(found:connected:),LibreTransmitterDelegate.libreManagerDidRestoreState(found:connected:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
decryptFRAM(type:id:info:data:),Libre2.decryptFRAM(type:id:info:data:) in LibreTransmitter/LibreSensor/SensorContents/PreLibre2.swift
decryptBLE(id:data:),Libre2.decryptBLE(id:data:) in LibreTransmitter/LibreSensor/SensorContents/PreLibre2.swift
activateParameters(id:),Libre2.activateParameters(id:) in LibreTransmitter/LibreSensor/SensorContents/PreLibre2.swift
acknowledgeAlert(alertIdentifier:),LibreTransmitterManagerV3.acknowledgeAlert(alertIdentifier:) in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
getSoundBaseURL(),LibreTransmitterManagerV3.getSoundBaseURL() in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
getSounds(),LibreTransmitterManagerV3.getSounds() in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
acknowledgeAlert(alertIdentifier:completion:),LibreTransmitterManagerV3.acknowledgeAlert(alertIdentifier:completion:) in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
logDeviceCommunication(_:type:),LibreTransmitterManagerV3.logDeviceCommunication(_:type:) in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
libreManagerDidRestoreState(found:connected:),LibreTransmitterManagerV3.libreManagerDidRestoreState(found:connected:) in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
getPersistedSensorDataForDebug(),LibreTransmitterManagerV3.getPersistedSensorDataForDebug() in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
verifySensorChange(for:activatedAt:),LibreTransmitterManagerV3.verifySensorChange(for:activatedAt:) in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
fetchNewDataIfNeeded(_:),LibreTransmitterManagerV3.fetchNewDataIfNeeded(_:) in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
resetManager(),LibreTransmitterManagerV3.resetManager() in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
disconnect(),LibreTransmitterManagerV3.disconnect() in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
establishProxy(),LibreTransmitterManagerV3.establishProxy() in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
disconnectManually(),BluetoothSearcher.disconnectManually() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
scanForCompatibleDevices(),BluetoothSearcher.scanForCompatibleDevices() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
stopTimer(),BluetoothSearcher.stopTimer() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
startTimer(),GenericThrottler.startTimer() in LibreTransmitter/Bluetooth/GenericThrottler.swift
stopTimer(),GenericThrottler.stopTimer() in LibreTransmitter/Bluetooth/GenericThrottler.swift
setupDebugListener(),GenericThrottler.setupDebugListener() in LibreTransmitter/Bluetooth/GenericThrottler.swift
setupIncoming(),GenericThrottler.setupIncoming() in LibreTransmitter/Bluetooth/GenericThrottler.swift
==(_:_:),GlucoseInfo.==(_:_:) in LibreTransmitter/LibreTransmitter/Observables/GlucoseInfo.swift
calculateProgress(),SensorInfo.calculateProgress() in LibreTransmitter/LibreTransmitter/Observables/SensorInfo.swift
==(_:_:),SensorInfo.==(_:_:) in LibreTransmitter/LibreTransmitter/Observables/SensorInfo.swift
==(_:_:),TransmitterInfo.==(_:_:) in LibreTransmitter/LibreTransmitter/Observables/TransmitterInfo.swift
libreSensorDidUpdate(with:and:),LibreTransmitterProxyManager.libreSensorDidUpdate(with:and:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreSensorDidUpdate(with:),LibreTransmitterProxyManager.libreSensorDidUpdate(with:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreManagerDidRestoreState(found:connected:),LibreTransmitterProxyManager.libreManagerDidRestoreState(found:connected:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
noLibreTransmitterSelected(),LibreTransmitterProxyManager.noLibreTransmitterSelected() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreDeviceStateChanged(_:),LibreTransmitterProxyManager.libreDeviceStateChanged(_:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreDeviceLogMessage(payload:type:),LibreTransmitterProxyManager.libreDeviceLogMessage(payload:type:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreDeviceReceivedMessage(_:payloadData:),LibreTransmitterProxyManager.libreDeviceReceivedMessage(_:payloadData:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
libreTransmitterDidUpdate(with:and:),LibreTransmitterProxyManager.libreTransmitterDidUpdate(with:and:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
dispatchToDelegate(_:),LibreTransmitterProxyManager.dispatchToDelegate(_:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
scanForDevices(),LibreTransmitterProxyManager.scanForDevices() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
reset(),LibreTransmitterProxyManager.reset() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
connect(force:advertisementData:),LibreTransmitterProxyManager.connect(force:advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
disconnectManually(),LibreTransmitterProxyManager.disconnectManually() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
centralManagerDidUpdateState(_:),LibreTransmitterProxyManager.centralManagerDidUpdateState(_:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
centralManager(_:willRestoreState:),LibreTransmitterProxyManager.centralManager(_:willRestoreState:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
verifyLibre2ManufacturerData(peripheral:selectedUid:advertisementData:),LibreTransmitterProxyManager.verifyLibre2ManufacturerData(peripheral:selectedUid:advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
centralManager(_:didDiscover:advertisementData:rssi:),LibreTransmitterProxyManager.centralManager(_:didDiscover:advertisementData:rssi:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
centralManager(_:didConnect:),LibreTransmitterProxyManager.centralManager(_:didConnect:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
centralManager(_:didFailToConnect:error:),LibreTransmitterProxyManager.centralManager(_:didFailToConnect:error:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
reconnect(),LibreTransmitterProxyManager.reconnect() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
reconnectImmediately(),LibreTransmitterProxyManager.reconnectImmediately() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
delayedReconnect(_:),LibreTransmitterProxyManager.delayedReconnect(_:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
centralManager(_:didDisconnectPeripheral:error:),LibreTransmitterProxyManager.centralManager(_:didDisconnectPeripheral:error:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
peripheral(_:didDiscoverServices:),LibreTransmitterProxyManager.peripheral(_:didDiscoverServices:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
didDiscoverNotificationCharacteristic(_:notifyCharacteristic:),LibreTransmitterProxyManager.didDiscoverNotificationCharacteristic(_:notifyCharacteristic:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
didDiscoverWriteCharacteristic(_:writeCharacteristic:),LibreTransmitterProxyManager.didDiscoverWriteCharacteristic(_:writeCharacteristic:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
peripheral(_:didDiscoverCharacteristicsFor:error:),LibreTransmitterProxyManager.peripheral(_:didDiscoverCharacteristicsFor:error:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
peripheral(_:didUpdateNotificationStateFor:error:),LibreTransmitterProxyManager.peripheral(_:didUpdateNotificationStateFor:error:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
peripheral(_:didUpdateValueFor:error:),LibreTransmitterProxyManager.peripheral(_:didUpdateValueFor:error:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
peripheral(_:didWriteValueFor:error:),LibreTransmitterProxyManager.peripheral(_:didWriteValueFor:error:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
requestData(),LibreTransmitterProxyManager.requestData() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
==(_:_:),AlarmStatus.==(_:_:) in LibreTransmitter/LibreTransmitter/Observables/AlarmStatus.swift
createNew(),AlarmStatus.createNew() in LibreTransmitter/LibreTransmitter/Observables/AlarmStatus.swift
isAlarming(),GlucoseScheduleAlarmResult.isAlarming() in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
validateGlucoseThresholds(),GlucoseScheduleList.validateGlucoseThresholds() in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
validateGlucoseSchedules(),GlucoseScheduleList.validateGlucoseSchedules() in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
isSnoozed(),GlucoseScheduleList.isSnoozed() in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
getActiveAlarms(_:),GlucoseScheduleList.getActiveAlarms(_:) in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
getScheduleActiveToFrom(),GlucoseSchedule.getScheduleActiveToFrom() in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
storeLowAlarm(forUnit:lowAlarm:),GlucoseSchedule.storeLowAlarm(forUnit:lowAlarm:) in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
retrieveLowAlarm(forUnit:),GlucoseSchedule.retrieveLowAlarm(forUnit:) in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
storeHighAlarm(forUnit:highAlarm:),GlucoseSchedule.storeHighAlarm(forUnit:highAlarm:) in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
retrieveHighAlarm(forUnit:),GlucoseSchedule.retrieveHighAlarm(forUnit:) in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
addDiscoveredDevice(_:with:rssi:),BluetoothSearchManager.addDiscoveredDevice(_:with:rssi:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
startTimer(),BluetoothSearchManager.startTimer() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
stopTimer(),BluetoothSearchManager.stopTimer() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
rescan(),BluetoothSearchManager.rescan() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
scanForCompatibleDevices(),BluetoothSearchManager.scanForCompatibleDevices() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
disconnectManually(),BluetoothSearchManager.disconnectManually() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
centralManagerDidUpdateState(_:),BluetoothSearchManager.centralManagerDidUpdateState(_:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
centralManager(_:didDiscover:advertisementData:rssi:),BluetoothSearchManager.centralManager(_:didDiscover:advertisementData:rssi:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
centralManager(_:didConnect:),BluetoothSearchManager.centralManager(_:didConnect:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
centralManager(_:didFailToConnect:error:),BluetoothSearchManager.centralManager(_:didFailToConnect:error:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
centralManager(_:didDisconnectPeripheral:error:),BluetoothSearchManager.centralManager(_:didDisconnectPeripheral:error:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
peripheral(_:didDiscoverServices:),BluetoothSearchManager.peripheral(_:didDiscoverServices:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
peripheral(_:didDiscoverCharacteristicsFor:error:),BluetoothSearchManager.peripheral(_:didDiscoverCharacteristicsFor:error:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
peripheral(_:didReadRSSI:error:),BluetoothSearchManager.peripheral(_:didReadRSSI:error:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
peripheral(_:didUpdateNotificationStateFor:error:),BluetoothSearchManager.peripheral(_:didUpdateNotificationStateFor:error:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
peripheral(_:didUpdateValueFor:error:),BluetoothSearchManager.peripheral(_:didUpdateValueFor:error:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
peripheral(_:didWriteValueFor:error:),BluetoothSearchManager.peripheral(_:didWriteValueFor:error:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
reset(),MiaoMiaoTransmitter.reset() in LibreTransmitter/Bluetooth/Transmitter/MiaomiaoTransmitter.swift
canSupportPeripheral(_:),MiaoMiaoTransmitter.canSupportPeripheral(_:) in LibreTransmitter/Bluetooth/Transmitter/MiaomiaoTransmitter.swift
getDeviceDetailsFromAdvertisement(advertisementData:),MiaoMiaoTransmitter.getDeviceDetailsFromAdvertisement(advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/MiaomiaoTransmitter.swift
requestData(writeCharacteristics:peripheral:),MiaoMiaoTransmitter.requestData(writeCharacteristics:peripheral:) in LibreTransmitter/Bluetooth/Transmitter/MiaomiaoTransmitter.swift
updateValueForNotifyCharacteristics(_:peripheral:writeCharacteristic:),MiaoMiaoTransmitter.updateValueForNotifyCharacteristics(_:peripheral:writeCharacteristic:) in LibreTransmitter/Bluetooth/Transmitter/MiaomiaoTransmitter.swift
handleCompleteMessage(),MiaoMiaoTransmitter.handleCompleteMessage() in LibreTransmitter/Bluetooth/Transmitter/MiaomiaoTransmitter.swift
confirmSensor(peripheral:writeCharacteristics:),MiaoMiaoTransmitter.confirmSensor(peripheral:writeCharacteristics:) in LibreTransmitter/Bluetooth/Transmitter/MiaomiaoTransmitter.swift
canSupportPeripheral(_:),BubbleTransmitter.canSupportPeripheral(_:) in LibreTransmitter/Bluetooth/Transmitter/BubbleTransmitter.swift
reset(),BubbleTransmitter.reset() in LibreTransmitter/Bluetooth/Transmitter/BubbleTransmitter.swift
getDeviceDetailsFromAdvertisement(advertisementData:),BubbleTransmitter.getDeviceDetailsFromAdvertisement(advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/BubbleTransmitter.swift
getDeviceDetailsFromAdvertisementInternal(advertisementData:),BubbleTransmitter.getDeviceDetailsFromAdvertisementInternal(advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/BubbleTransmitter.swift
requestData(writeCharacteristics:peripheral:),BubbleTransmitter.requestData(writeCharacteristics:peripheral:) in LibreTransmitter/Bluetooth/Transmitter/BubbleTransmitter.swift
updateValueForNotifyCharacteristics(_:peripheral:writeCharacteristic:),BubbleTransmitter.updateValueForNotifyCharacteristics(_:peripheral:writeCharacteristic:) in LibreTransmitter/Bluetooth/Transmitter/BubbleTransmitter.swift
handleCompleteMessage(),BubbleTransmitter.handleCompleteMessage() in LibreTransmitter/Bluetooth/Transmitter/BubbleTransmitter.swift
disconnectManually(),MockBluetoothSearcher.disconnectManually() in LibreTransmitter/LibreTransmitter/Mocks/MockBluetoothSearcher.swift
scanForCompatibleDevices(),MockBluetoothSearcher.scanForCompatibleDevices() in LibreTransmitter/LibreTransmitter/Mocks/MockBluetoothSearcher.swift
stopTimer(),MockBluetoothSearcher.stopTimer() in LibreTransmitter/LibreTransmitter/Mocks/MockBluetoothSearcher.swift
isSupported(_:),LibreTransmitters.isSupported(_:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
getSupportedPlugins(_:),LibreTransmitters.getSupportedPlugins(_:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
pairSensor(),SensorPairingService.pairSensor() in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
sendError(_:),SensorPairingService.sendError(_:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
sendUpdate(_:),SensorPairingService.sendUpdate(_:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
tagReaderSessionDidBecomeActive(_:),SensorPairingService.tagReaderSessionDidBecomeActive(_:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
tagReaderSession(_:didInvalidateWithError:),SensorPairingService.tagReaderSession(_:didInvalidateWithError:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
tagReaderSession(_:didDetect:),SensorPairingService.tagReaderSession(_:didDetect:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
readRaw(_:_:buffer:tag:handler:),SensorPairingService.readRaw(_:_:buffer:tag:handler:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
writeRaw(_:_:tag:handler:),SensorPairingService.writeRaw(_:_:tag:handler:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
nfcCommand(_:unlockCode:patchInfo:sensorUID:),SensorPairingService.nfcCommand(_:unlockCode:patchInfo:sensorUID:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
fakeSensorPairingInfo(),FakeSensorPairingData.fakeSensorPairingInfo() in LibreTransmitter/LibreTransmitter/Mocks/FakeSensorPairingData.swift
vibrate(times:),NotificationHelper.vibrate(times:) in LibreTransmitter/LibreTransmitter/NotificationHelper.swift
GlucoseUnitIsSupported(unit:),NotificationHelper.GlucoseUnitIsSupported(unit:) in LibreTransmitter/LibreTransmitter/NotificationHelper.swift
requestCriticalNotificationPermissions(),NotificationHelper.requestCriticalNotificationPermissions() in LibreTransmitter/LibreTransmitter/NotificationHelper.swift
logPermissions(_:caller:),NotificationHelper.logPermissions(_:caller:) in LibreTransmitter/LibreTransmitter/NotificationHelper.swift
requestNotificationPermissionsIfNeeded(),NotificationHelper.requestNotificationPermissionsIfNeeded() in LibreTransmitter/LibreTransmitter/NotificationHelper.swift
ensureCanSendNotification(_:),NotificationHelper.ensureCanSendNotification(_:) in LibreTransmitter/LibreTransmitter/NotificationHelper.swift
addRequest(identifier:content:deleteOld:isCritical:),NotificationHelper.addRequest(identifier:content:deleteOld:isCritical:) in LibreTransmitter/LibreTransmitter/NotificationHelper.swift
crc16(_:seed:),Crc.crc16(_:seed:) in LibreTransmitter/LibreSensor/SensorContents/CRC.swift
hasValidCrc16InFirstTwoBytes(_:),Crc.hasValidCrc16InFirstTwoBytes(_:) in LibreTransmitter/LibreSensor/SensorContents/CRC.swift
hasValidCrc16InLastTwoBytes(_:),Crc.hasValidCrc16InLastTwoBytes(_:) in LibreTransmitter/LibreSensor/SensorContents/CRC.swift
bytesWithCorrectCRC(_:),Crc.bytesWithCorrectCRC(_:) in LibreTransmitter/LibreSensor/SensorContents/CRC.swift
makeIterator(),BytesSequence.makeIterator() in LibreTransmitter/LibreSensor/SensorContents/CRC.swift
pairSensor(),Libre2DirectSetup.pairSensor() in LibreTransmitter/LibreTransmitterUI/Views/Setup/Libre2DirectSetup.swift
receivePairingInfo(_:),Libre2DirectSetup.receivePairingInfo(_:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/Libre2DirectSetup.swift
notify(),GenericObservableObject.notify() in LibreTransmitter/LibreTransmitterUI/Views/Utilities/GenericObservableObject.swift
listenOnce(listener:),GenericObservableObject.listenOnce(listener:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/GenericObservableObject.swift
cancel(),LibreTransmitterSetupViewController.cancel() in LibreTransmitter/LibreTransmitterUI/Controllers/LibreTransmitterSetupViewController.swift
save(),LibreTransmitterSetupViewController.save() in LibreTransmitter/LibreTransmitterUI/Controllers/LibreTransmitterSetupViewController.swift
handleCancel(),AuthView.handleCancel() in LibreTransmitter/LibreTransmitterUI/Views/Setup/AuthView.swift
handleSave(),AuthView.handleSave() in LibreTransmitter/LibreTransmitterUI/Views/Setup/AuthView.swift
formatInterval(_:),SnoozeView.formatInterval(_:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/SnoozeView.swift
pickerTimesArray(),SnoozeView.pickerTimesArray() in LibreTransmitter/LibreTransmitterUI/Views/Settings/SnoozeView.swift
getSnoozeDescription(),SnoozeView.getSnoozeDescription() in LibreTransmitter/LibreTransmitterUI/Views/Settings/SnoozeView.swift
setLowAlarm(forUnit:lowAlarm:),AlarmScheduleState.setLowAlarm(forUnit:lowAlarm:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
getLowAlarm(forUnit:),AlarmScheduleState.getLowAlarm(forUnit:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
setHighAlarm(forUnit:highAlarm:),AlarmScheduleState.setHighAlarm(forUnit:highAlarm:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
getHighAlarm(forUnit:),AlarmScheduleState.getHighAlarm(forUnit:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
setDateComponentState(_:),AlarmSettingsState.setDateComponentState(_:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
loadState(),AlarmSettingsState.loadState() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
trySaveState(),AlarmSettingsState.trySaveState() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
erasedWithKeyboardDismissal(_:),AlarmSettingsView.erasedWithKeyboardDismissal(_:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
saveButtonAction(),AlarmSettingsView.saveButtonAction() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
path(in:),Divided.path(in:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
getDeviceImage(_:),DeviceItem.getDeviceImage(_:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
getRowBackground(device:),DeviceItem.getRowBackground(device:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
getNewDeviceId(),BluetoothSelection.getNewDeviceId() in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
receiveRSSI(_:),BluetoothSelection.receiveRSSI(_:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
pickerDidPickValidRange(),CustomDataPickerDelegate.pickerDidPickValidRange() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
popView(),CustomDataPickerView.popView() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
defaultTimeArray(),CustomDataPickerView.defaultTimeArray() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
callDelegate(),CustomDataPickerView.callDelegate() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
verifyRange(),CustomDataPickerView.verifyRange() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
updateTextualState(_:),CustomDataPickerView.updateTextualState(_:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
copyAlarmExternalState(),CustomDataPickerView.copyAlarmExternalState() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
restoreAlarmExternalState(),CustomDataPickerView.restoreAlarmExternalState() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
localeTextToDouble(_:),NumericTextField.localeTextToDouble(_:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/NumericTextField.swift
doubleToLocateText(_:),NumericTextField.doubleToLocateText(_:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/NumericTextField.swift
localeTextToInt(_:),NumericTextField.localeTextToInt(_:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/NumericTextField.swift
intToLocateText(_:),NumericTextField.intToLocateText(_:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/NumericTextField.swift
completeCreate(),LogglyService.completeCreate() in LogglyService/LogglyServiceKit/LogglyService.swift
completeUpdate(),LogglyService.completeUpdate() in LogglyService/LogglyServiceKit/LogglyService.swift
completeDelete(),LogglyService.completeDelete() in LogglyService/LogglyServiceKit/LogglyService.swift
createClient(),LogglyService.createClient() in LogglyService/LogglyServiceKit/LogglyService.swift
send(_:tags:),LogglyClient.send(_:tags:) in LogglyService/LogglyServiceKit/LogglyService.swift
send(_:tags:),LogglyClient.send(_:tags:) in LogglyService/LogglyServiceKit/LogglyService.swift
nib(),NibLoadable.nib() in LogglyService/LogglyServiceKitUI/NibLoadable.swift
viewDidLoad(),LogglyServiceTableViewController.viewDidLoad() in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
updateButtonStates(),LogglyServiceTableViewController.updateButtonStates() in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
cancel(),LogglyServiceTableViewController.cancel() in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
done(),LogglyServiceTableViewController.done() in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
confirmDeletion(completion:),LogglyServiceTableViewController.confirmDeletion(completion:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
notifyComplete(),LogglyServiceTableViewController.notifyComplete() in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
numberOfSections(in:),LogglyServiceTableViewController.numberOfSections(in:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
tableView(_:numberOfRowsInSection:),LogglyServiceTableViewController.tableView(_:numberOfRowsInSection:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
tableView(_:titleForHeaderInSection:),LogglyServiceTableViewController.tableView(_:titleForHeaderInSection:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
tableView(_:cellForRowAt:),LogglyServiceTableViewController.tableView(_:cellForRowAt:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
tableView(_:didSelectRowAt:),LogglyServiceTableViewController.tableView(_:didSelectRowAt:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
textField(_:shouldChangeCharactersIn:replacementString:),LogglyServiceTableViewController.textField(_:shouldChangeCharactersIn:replacementString:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
textFieldShouldReturn(_:),LogglyServiceTableViewController.textFieldShouldReturn(_:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
cgmEventStoreHasUpdatedData(_:),CgmEventStoreDelegate.cgmEventStoreHasUpdatedData(_:) in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
onReady(_:),CgmEventStore.onReady(_:) in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
onReady(_:),PersistenceController.onReady(_:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
model(),PersistenceController.model() in LoopKit/LoopKit/Persistence/PersistenceController.swift
save(_:),PersistenceController.save(_:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
saveInternal(),PersistenceController.saveInternal() in LoopKit/LoopKit/Persistence/PersistenceController.swift
updateMetadata(key:value:),PersistenceController.updateMetadata(key:value:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
fetchMetadata(key:),PersistenceController.fetchMetadata(key:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
initializeStack(inDirectory:model:),PersistenceController.initializeStack(inDirectory:model:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
persistenceControllerWillSave(_:),PersistenceControllerDelegate.persistenceControllerWillSave(_:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
persistenceControllerDidSave(_:error:),PersistenceControllerDelegate.persistenceControllerDidSave(_:error:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
initializationComplete(for:),Pluggable.initializationComplete(for:) in LoopKit/LoopKit/Pluggable.swift
pluginDidUpdateState(_:),StatefulPluggableDelegate.pluginDidUpdateState(_:) in LoopKit/LoopKit/Service/StatefulPluggable.swift
pluginWantsDeletion(_:),StatefulPluggableDelegate.pluginWantsDeletion(_:) in LoopKit/LoopKit/Service/StatefulPluggable.swift
statefulPlugin(withIdentifier:),StatefulPluggableProvider.statefulPlugin(withIdentifier:) in LoopKit/LoopKit/Service/StatefulPluggable.swift
between(start:end:),DailyQuantitySchedule.between(start:end:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
value(at:),DailyQuantitySchedule.value(at:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
between(start:end:),DailySchedule.between(start:end:) in LoopKit/LoopKit/DailyValueSchedule.swift
value(at:),DailySchedule.value(at:) in LoopKit/LoopKit/DailyValueSchedule.swift
map(_:),RepeatingScheduleValue.map(_:) in LoopKit/LoopKit/DailyValueSchedule.swift
scheduleOffset(for:),DailyValueSchedule.scheduleOffset(for:) in LoopKit/LoopKit/DailyValueSchedule.swift
between(start:end:),DailyValueSchedule.between(start:end:) in LoopKit/LoopKit/DailyValueSchedule.swift
truncatingBetween(start:end:),DailyValueSchedule.truncatingBetween(start:end:) in LoopKit/LoopKit/DailyValueSchedule.swift
map(_:),DailyValueSchedule.map(_:) in LoopKit/LoopKit/DailyValueSchedule.swift
zip(_:_:),DailyValueSchedule.zip(_:_:) in LoopKit/LoopKit/DailyValueSchedule.swift
convertTo(unit:),GlucoseThreshold.convertTo(unit:) in LoopKit/LoopKit/GlucoseThreshold.swift
log(managerIdentifier:deviceIdentifier:type:message:completion:),PersistentDeviceLog.log(managerIdentifier:deviceIdentifier:type:message:completion:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
getLogEntries(startDate:endDate:completion:),PersistentDeviceLog.getLogEntries(startDate:endDate:completion:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
purgeExpiredLogEntries(),PersistentDeviceLog.purgeExpiredLogEntries() in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
purgeLogEntries(before:completion:),PersistentDeviceLog.purgeLogEntries(before:completion:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
updateModificationCounter(),DeviceLogEntry.updateModificationCounter() in LoopKit/LoopKit/DeviceManager/DeviceLog/DeviceLogEntry+CoreDataClass.swift
awakeFromInsert(),DeviceLogEntry.awakeFromInsert() in LoopKit/LoopKit/DeviceManager/DeviceLog/DeviceLogEntry+CoreDataClass.swift
willSave(),DeviceLogEntry.willSave() in LoopKit/LoopKit/DeviceManager/DeviceLog/DeviceLogEntry+CoreDataClass.swift
write(_:),DataOutputStream.write(_:) in LoopKit/LoopKit/DataOutputStream.swift
finish(sync:),DataOutputStream.finish(sync:) in LoopKit/LoopKit/DataOutputStream.swift
exportProgressTotalUnitCount(startDate:endDate:),CriticalEventLog.exportProgressTotalUnitCount(startDate:endDate:) in LoopKit/LoopKit/CriticalEventLog.swift
export(startDate:endDate:to:progress:),CriticalEventLog.export(startDate:endDate:to:progress:) in LoopKit/LoopKit/CriticalEventLog.swift
awakeFromInsert(),CachedCarbObject.awakeFromInsert() in LoopKit/LoopKit/CarbKit/CachedCarbObject+CoreDataClass.swift
stop(_:),HKHealthStoreProtocol.stop(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
execute(_:),HKHealthStoreProtocol.execute(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
enableBackgroundDelivery(for:frequency:),HKHealthStoreProtocol.enableBackgroundDelivery(for:frequency:) in LoopKit/LoopKit/HealthKitSampleStore.swift
authorizationStatus(for:),HKHealthStoreProtocol.authorizationStatus(for:) in LoopKit/LoopKit/HealthKitSampleStore.swift
save(_:withCompletion:),HKHealthStoreProtocol.save(_:withCompletion:) in LoopKit/LoopKit/HealthKitSampleStore.swift
save(_:withCompletion:),HKHealthStoreProtocol.save(_:withCompletion:) in LoopKit/LoopKit/HealthKitSampleStore.swift
deleteObjects(of:predicate:withCompletion:),HKHealthStoreProtocol.deleteObjects(of:predicate:withCompletion:) in LoopKit/LoopKit/HealthKitSampleStore.swift
cachedPreferredUnits(for:),HKHealthStoreProtocol.cachedPreferredUnits(for:) in LoopKit/LoopKit/HealthKitSampleStore.swift
storeQueryAnchor(_:),HealthKitSampleStoreDelegate.storeQueryAnchor(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
processResults(from:added:deleted:anchor:completion:),HealthKitSampleStoreDelegate.processResults(from:added:deleted:anchor:completion:) in LoopKit/LoopKit/HealthKitSampleStore.swift
authorizationIsDetermined(),HealthKitSampleStore.authorizationIsDetermined() in LoopKit/LoopKit/HealthKitSampleStore.swift
mutateQueryState(_:),HealthKitSampleStore.mutateQueryState(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
setQueryStateWithResult(_:),HealthKitSampleStore.setQueryStateWithResult(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
setInitialQueryAnchor(_:),HealthKitSampleStore.setInitialQueryAnchor(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
observerQueryHandler(query:observerQueryCompletionHandler:error:),HealthKitSampleStore.observerQueryHandler(query:observerQueryCompletionHandler:error:) in LoopKit/LoopKit/HealthKitSampleStore.swift
executeAnchorQuery(observerQuery:observerQueryCompletionHandler:),HealthKitSampleStore.executeAnchorQuery(observerQuery:observerQueryCompletionHandler:) in LoopKit/LoopKit/HealthKitSampleStore.swift
mutate(_:),Locked.mutate(_:) in LoopKit/LoopKit/Locked.swift
withLock(_:),UnfairLock.withLock(_:) in LoopKit/LoopKit/UnfairLock.swift
withLockIfAvailable(_:),UnfairLock.withLockIfAvailable(_:) in LoopKit/LoopKit/UnfairLock.swift
assertOwned(),UnfairLock.assertOwned() in LoopKit/LoopKit/UnfairLock.swift
assertNotOwned(),UnfairLock.assertNotOwned() in LoopKit/LoopKit/UnfairLock.swift
executeSampleQuery(for:matching:limit:sortDescriptors:resultsHandler:),HKSampleQueryTestable.executeSampleQuery(for:matching:limit:sortDescriptors:resultsHandler:) in LoopKit/LoopKit/Extensions/HKHealthStore.swift
updateModificationCounter(),CachedInsulinDeliveryObject.updateModificationCounter() in LoopKit/LoopKit/InsulinKit/CachedInsulinDeliveryObject+CoreDataClass.swift
awakeFromInsert(),CachedInsulinDeliveryObject.awakeFromInsert() in LoopKit/LoopKit/InsulinKit/CachedInsulinDeliveryObject+CoreDataClass.swift
willSave(),CachedInsulinDeliveryObject.willSave() in LoopKit/LoopKit/InsulinKit/CachedInsulinDeliveryObject+CoreDataClass.swift
percentAbsorptionAtPercentTime(_:),CarbAbsorptionComputable.percentAbsorptionAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentTimeAtPercentAbsorption(_:),CarbAbsorptionComputable.percentTimeAtPercentAbsorption(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
absorptionTime(forPercentAbsorption:atTime:),CarbAbsorptionComputable.absorptionTime(forPercentAbsorption:atTime:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
absorbedCarbs(of:atTime:absorptionTime:),CarbAbsorptionComputable.absorbedCarbs(of:atTime:absorptionTime:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
unabsorbedCarbs(of:atTime:absorptionTime:),CarbAbsorptionComputable.unabsorbedCarbs(of:atTime:absorptionTime:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentRateAtPercentTime(_:),CarbAbsorptionComputable.percentRateAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentAbsorptionAtPercentTime(_:),ParabolicAbsorption.percentAbsorptionAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentTimeAtPercentAbsorption(_:),ParabolicAbsorption.percentTimeAtPercentAbsorption(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentRateAtPercentTime(_:),ParabolicAbsorption.percentRateAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentAbsorptionAtPercentTime(_:),LinearAbsorption.percentAbsorptionAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentTimeAtPercentAbsorption(_:),LinearAbsorption.percentTimeAtPercentAbsorption(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentRateAtPercentTime(_:),LinearAbsorption.percentRateAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentAbsorptionAtPercentTime(_:),PiecewiseLinearAbsorption.percentAbsorptionAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentTimeAtPercentAbsorption(_:),PiecewiseLinearAbsorption.percentTimeAtPercentAbsorption(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentRateAtPercentTime(_:),PiecewiseLinearAbsorption.percentRateAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
addNextEffect(_:start:end:),CarbStatusBuilder.addNextEffect(_:start:end:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
absorptionRateAtTime(t:),CarbStatusBuilder.absorptionRateAtTime(t:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentEffectRemaining(at:),InsulinModel.percentEffectRemaining(at:) in LoopKit/LoopKit/InsulinKit/InsulinModel.swift
createOverride(enactTrigger:beginningAt:),TemporaryScheduleOverridePreset.createOverride(enactTrigger:beginningAt:) in LoopKit/LoopKit/TemporaryScheduleOverridePreset.swift
<(_:_:),Duration.<(_:_:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
hasFinished(relativeTo:),TemporaryScheduleOverride.hasFinished(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
isActive(at:),TemporaryScheduleOverride.isActive(at:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
encode(to:),End.encode(to:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
between(start:end:),GlucoseRangeSchedule.between(start:end:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
truncatingBetween(start:end:),GlucoseRangeSchedule.truncatingBetween(start:end:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
quantityBetween(start:end:),GlucoseRangeSchedule.quantityBetween(start:end:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
value(at:),GlucoseRangeSchedule.value(at:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
quantityRange(at:),GlucoseRangeSchedule.quantityRange(at:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
minLowerBound(),GlucoseRangeSchedule.minLowerBound() in LoopKit/LoopKit/GlucoseRangeSchedule.swift
scheduleRange(),GlucoseRangeSchedule.scheduleRange() in LoopKit/LoopKit/GlucoseRangeSchedule.swift
convertTo(unit:),GlucoseRangeSchedule.convertTo(unit:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
schedule(for:),GlucoseRangeSchedule.schedule(for:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
isActive(at:),Override.isActive(at:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
addObserver(_:),DoseProgressTimerEstimator.addObserver(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
removeObserver(_:),DoseProgressTimerEstimator.removeObserver(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
notify(),DoseProgressTimerEstimator.notify() in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
start(),DoseProgressTimerEstimator.start() in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
timerParameters(),DoseProgressTimerEstimator.timerParameters() in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
stop(),DoseProgressTimerEstimator.stop() in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
addObserver(_:),DoseProgressReporter.addObserver(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressReporter.swift
removeObserver(_:),DoseProgressReporter.removeObserver(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressReporter.swift
doseProgressReporterDidUpdate(_:),DoseProgressObserver.doseProgressReporterDidUpdate(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressReporter.swift
cleanupDeallocatedElements(),WeakSet.cleanupDeallocatedElements() in LoopKit/LoopKit/WeakSet.swift
dosingDecisionStoreHasUpdatedDosingDecisionData(_:),DosingDecisionStoreDelegate.dosingDecisionStoreHasUpdatedDosingDecisionData(_:) in LoopKit/LoopKit/DosingDecisionStore.swift
storeDosingDecision(_:completion:),DosingDecisionStore.storeDosingDecision(_:completion:) in LoopKit/LoopKit/DosingDecisionStore.swift
purgeExpiredDosingDecisions(),DosingDecisionStore.purgeExpiredDosingDecisions() in LoopKit/LoopKit/DosingDecisionStore.swift
purgeDosingDecisions(before:completion:),DosingDecisionStore.purgeDosingDecisions(before:completion:) in LoopKit/LoopKit/DosingDecisionStore.swift
purgeDosingDecisionObjects(before:completion:),DosingDecisionStore.purgeDosingDecisionObjects(before:completion:) in LoopKit/LoopKit/DosingDecisionStore.swift
fetchLatestDosingDecision(reason:),DosingDecisionStore.fetchLatestDosingDecision(reason:) in LoopKit/LoopKit/DosingDecisionStore.swift
encodeDosingDecision(_:),DosingDecisionStore.encodeDosingDecision(_:) in LoopKit/LoopKit/DosingDecisionStore.swift
decodeDosingDecision(fromData:),DosingDecisionStore.decodeDosingDecision(fromData:) in LoopKit/LoopKit/DosingDecisionStore.swift
createDestinationInstances(forSource:in:manager:),CachedCarbObjectv3EntityMigrationPolicy.createDestinationInstances(forSource:in:manager:) in LoopKit/LoopKit/Persistence/Modelv3EntityMigrationPolicy.swift
createDestinationInstances(forSource:in:manager:),DeletedCarbObjectv3EntityMigrationPolicy.createDestinationInstances(forSource:in:manager:) in LoopKit/LoopKit/Persistence/Modelv3EntityMigrationPolicy.swift
insulinDeliveryStoreHasUpdatedDoseData(_:),InsulinDeliveryStoreDelegate.insulinDeliveryStoreHasUpdatedDoseData(_:) in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
currentDate(timeIntervalSinceNow:),InsulinDeliveryStore.currentDate(timeIntervalSinceNow:) in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
resetPumpData(completion:),DoseStore.resetPumpData(completion:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
currentDate(timeIntervalSinceNow:),DoseStore.currentDate(timeIntervalSinceNow:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
clearReservoirNormalizedDoseCache(),DoseStore.clearReservoirNormalizedDoseCache() in LoopKit/LoopKit/InsulinKit/DoseStore.swift
recordOverride(_:at:),TemporaryScheduleOverrideHistory.recordOverride(_:at:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
deleteEventsStartingOnOrAfter(_:),TemporaryScheduleOverrideHistory.deleteEventsStartingOnOrAfter(_:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
record(_:at:),TemporaryScheduleOverrideHistory.record(_:at:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
cancelActiveOverride(at:),TemporaryScheduleOverrideHistory.cancelActiveOverride(at:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
resolvingRecentBasalSchedule(_:relativeTo:),TemporaryScheduleOverrideHistory.resolvingRecentBasalSchedule(_:relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
resolvingRecentInsulinSensitivitySchedule(_:relativeTo:),TemporaryScheduleOverrideHistory.resolvingRecentInsulinSensitivitySchedule(_:relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
resolvingRecentCarbRatioSchedule(_:relativeTo:),TemporaryScheduleOverrideHistory.resolvingRecentCarbRatioSchedule(_:relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
getEvents(relativeTo:),TemporaryScheduleOverrideHistory.getEvents(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
relevantPeriod(relativeTo:),TemporaryScheduleOverrideHistory.relevantPeriod(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
filterRecentEvents(relativeTo:),TemporaryScheduleOverrideHistory.filterRecentEvents(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
overridesReflectingEnabledDuration(relativeTo:),TemporaryScheduleOverrideHistory.overridesReflectingEnabledDuration(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
validateOverridesReflectingEnabledDuration(_:),TemporaryScheduleOverrideHistory.validateOverridesReflectingEnabledDuration(_:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
wipeHistory(),TemporaryScheduleOverrideHistory.wipeHistory() in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
queryByAnchor(_:),TemporaryScheduleOverrideHistory.queryByAnchor(_:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
temporaryScheduleOverrideHistoryDidUpdate(_:),TemporaryScheduleOverrideHistoryDelegate.temporaryScheduleOverrideHistoryDidUpdate(_:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
model(for:),InsulinModelProvider.model(for:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
doseStoreHasUpdatedPumpEventData(_:),DoseStoreDelegate.doseStoreHasUpdatedPumpEventData(_:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
uploadAlertData(_:completion:),RemoteDataService.uploadAlertData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadCarbData(created:updated:deleted:completion:),RemoteDataService.uploadCarbData(created:updated:deleted:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadTemporaryOverrideData(updated:deleted:completion:),RemoteDataService.uploadTemporaryOverrideData(updated:deleted:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadDoseData(created:deleted:completion:),RemoteDataService.uploadDoseData(created:deleted:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadDosingDecisionData(_:completion:),RemoteDataService.uploadDosingDecisionData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadGlucoseData(_:completion:),RemoteDataService.uploadGlucoseData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadPumpEventData(_:completion:),RemoteDataService.uploadPumpEventData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadSettingsData(_:completion:),RemoteDataService.uploadSettingsData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadCgmEventData(_:completion:),RemoteDataService.uploadCgmEventData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
remoteNotificationWasReceived(_:),RemoteDataService.remoteNotificationWasReceived(_:) in LoopKit/LoopKit/Service/RemoteDataService.swift
enactRemoteOverride(name:durationTime:remoteAddress:),RemoteActionDelegate.enactRemoteOverride(name:durationTime:remoteAddress:) in LoopKit/LoopKit/Service/Remote/RemoteActionDelegate.swift
cancelRemoteOverride(),RemoteActionDelegate.cancelRemoteOverride() in LoopKit/LoopKit/Service/Remote/RemoteActionDelegate.swift
deliverRemoteCarbs(amountInGrams:absorptionTime:foodType:startDate:),RemoteActionDelegate.deliverRemoteCarbs(amountInGrams:absorptionTime:foodType:startDate:) in LoopKit/LoopKit/Service/Remote/RemoteActionDelegate.swift
deliverRemoteBolus(amountInUnits:),RemoteActionDelegate.deliverRemoteBolus(amountInUnits:) in LoopKit/LoopKit/Service/Remote/RemoteActionDelegate.swift
issueAlert(_:),AlertIssuer.issueAlert(_:) in LoopKit/LoopKit/Alert.swift
retractAlert(identifier:),AlertIssuer.retractAlert(identifier:) in LoopKit/LoopKit/Alert.swift
encode(to:),AnyCodableEquatable.encode(to:) in LoopKit/LoopKit/AnyCodableEquatable.swift
==(_:_:),AnyCodableEquatable.==(_:_:) in LoopKit/LoopKit/AnyCodableEquatable.swift
deviceManager(_:logEventForDeviceIdentifier:type:message:completion:),DeviceManagerDelegate.deviceManager(_:logEventForDeviceIdentifier:type:message:completion:) in LoopKit/LoopKit/DeviceManager/DeviceManager.swift
doesIssuedAlertExist(identifier:completion:),PersistedAlertStore.doesIssuedAlertExist(identifier:completion:) in LoopKit/LoopKit/Alert.swift
lookupAllUnretracted(managerIdentifier:completion:),PersistedAlertStore.lookupAllUnretracted(managerIdentifier:completion:) in LoopKit/LoopKit/Alert.swift
lookupAllUnacknowledgedUnretracted(managerIdentifier:completion:),PersistedAlertStore.lookupAllUnacknowledgedUnretracted(managerIdentifier:completion:) in LoopKit/LoopKit/Alert.swift
recordRetractedAlert(_:at:),PersistedAlertStore.recordRetractedAlert(_:at:) in LoopKit/LoopKit/Alert.swift
getSoundBaseURL(),AlertSoundVendor.getSoundBaseURL() in LoopKit/LoopKit/Alert.swift
getSounds(),AlertSoundVendor.getSounds() in LoopKit/LoopKit/Alert.swift
acknowledgeAlert(alertIdentifier:completion:),AlertResponder.acknowledgeAlert(alertIdentifier:completion:) in LoopKit/LoopKit/Alert.swift
classification(for:),Guardrail.classification(for:) in LoopKit/LoopKit/Guardrail.swift
updateModificationCounter(),DosingDecisionObject.updateModificationCounter() in LoopKit/LoopKit/DosingDecisionObject+CoreDataClass.swift
awakeFromInsert(),DosingDecisionObject.awakeFromInsert() in LoopKit/LoopKit/DosingDecisionObject+CoreDataClass.swift
willSave(),DosingDecisionObject.willSave() in LoopKit/LoopKit/DosingDecisionObject+CoreDataClass.swift
query(by:),KeychainManager.query(by:) in LoopKit/LoopKit/KeychainManager.swift
queryForGenericPassword(by:),KeychainManager.queryForGenericPassword(by:) in LoopKit/LoopKit/KeychainManager.swift
queryForInternetPassword(account:url:label:),KeychainManager.queryForInternetPassword(account:url:label:) in LoopKit/LoopKit/KeychainManager.swift
updatedQuery(_:withPassword:),KeychainManager.updatedQuery(_:withPassword:) in LoopKit/LoopKit/KeychainManager.swift
updatedQuery(_:withPassword:),KeychainManager.updatedQuery(_:withPassword:) in LoopKit/LoopKit/KeychainManager.swift
delete(_:),KeychainManager.delete(_:) in LoopKit/LoopKit/KeychainManager.swift
deleteGenericPassword(forService:),KeychainManager.deleteGenericPassword(forService:) in LoopKit/LoopKit/KeychainManager.swift
replaceGenericPassword(_:forService:),KeychainManager.replaceGenericPassword(_:forService:) in LoopKit/LoopKit/KeychainManager.swift
replaceGenericPassword(_:forService:),KeychainManager.replaceGenericPassword(_:forService:) in LoopKit/LoopKit/KeychainManager.swift
getGenericPasswordForServiceAsData(_:),KeychainManager.getGenericPasswordForServiceAsData(_:) in LoopKit/LoopKit/KeychainManager.swift
getGenericPasswordForService(_:),KeychainManager.getGenericPasswordForService(_:) in LoopKit/LoopKit/KeychainManager.swift
setInternetPassword(_:account:atURL:label:),KeychainManager.setInternetPassword(_:account:atURL:label:) in LoopKit/LoopKit/KeychainManager.swift
replaceInternetCredentials(_:forAccount:),KeychainManager.replaceInternetCredentials(_:forAccount:) in LoopKit/LoopKit/KeychainManager.swift
replaceInternetCredentials(_:forLabel:),KeychainManager.replaceInternetCredentials(_:forLabel:) in LoopKit/LoopKit/KeychainManager.swift
replaceInternetCredentials(_:forURL:),KeychainManager.replaceInternetCredentials(_:forURL:) in LoopKit/LoopKit/KeychainManager.swift
getInternetCredentials(account:url:label:),KeychainManager.getInternetCredentials(account:url:label:) in LoopKit/LoopKit/KeychainManager.swift
pumpManager(_:didUpdate:oldStatus:),PumpManagerStatusObserver.pumpManager(_:didUpdate:oldStatus:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
roundToSupportedBasalRate(unitsPerHour:),PumpManager.roundToSupportedBasalRate(unitsPerHour:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
roundToSupportedBolusVolume(units:),PumpManager.roundToSupportedBolusVolume(units:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
addStatusObserver(_:queue:),PumpManager.addStatusObserver(_:queue:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
removeStatusObserver(_:),PumpManager.removeStatusObserver(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
ensureCurrentPumpData(completion:),PumpManager.ensureCurrentPumpData(completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
setMustProvideBLEHeartbeat(_:),PumpManager.setMustProvideBLEHeartbeat(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
createBolusProgressReporter(reportingOn:),PumpManager.createBolusProgressReporter(reportingOn:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
estimatedDuration(toBolus:),PumpManager.estimatedDuration(toBolus:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
enactBolus(units:activationType:completion:),PumpManager.enactBolus(units:activationType:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
cancelBolus(completion:),PumpManager.cancelBolus(completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
enactTempBasal(unitsPerHour:for:completion:),PumpManager.enactTempBasal(unitsPerHour:for:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
suspendDelivery(completion:),PumpManager.suspendDelivery(completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
resumeDelivery(completion:),PumpManager.resumeDelivery(completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
syncBasalRateSchedule(items:completion:),PumpManager.syncBasalRateSchedule(items:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
syncDeliveryLimits(limits:completion:),PumpManager.syncDeliveryLimits(limits:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
prepareForDeactivation(_:),PumpManager.prepareForDeactivation(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
activationTypeFor(recommendedAmount:bolusAmount:),BolusActivationType.activationTypeFor(recommendedAmount:bolusAmount:) in LoopKit/LoopKit/DeviceManager/BolusActivationType.swift
pumpManagerBLEHeartbeatDidFire(_:),PumpManagerDelegate.pumpManagerBLEHeartbeatDidFire(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerMustProvideBLEHeartbeat(_:),PumpManagerDelegate.pumpManagerMustProvideBLEHeartbeat(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerWillDeactivate(_:),PumpManagerDelegate.pumpManagerWillDeactivate(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerPumpWasReplaced(_:),PumpManagerDelegate.pumpManagerPumpWasReplaced(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didUpdatePumpRecordsBasalProfileStartEvents:),PumpManagerDelegate.pumpManager(_:didUpdatePumpRecordsBasalProfileStartEvents:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didError:),PumpManagerDelegate.pumpManager(_:didError:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:hasNewPumpEvents:lastReconciliation:replacePendingEvents:completion:),PumpManagerDelegate.pumpManager(_:hasNewPumpEvents:lastReconciliation:replacePendingEvents:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didReadReservoirValue:at:completion:),PumpManagerDelegate.pumpManager(_:didReadReservoirValue:at:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didAdjustPumpClockBy:),PumpManagerDelegate.pumpManager(_:didAdjustPumpClockBy:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerDidUpdateState(_:),PumpManagerDelegate.pumpManagerDidUpdateState(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didRequestBasalRateScheduleChange:completion:),PumpManagerDelegate.pumpManager(_:didRequestBasalRateScheduleChange:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
startDateToFilterNewPumpEvents(for:),PumpManagerDelegate.startDateToFilterNewPumpEvents(for:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
awakeFromInsert(),Reservoir.awakeFromInsert() in LoopKit/LoopKit/InsulinKit/Reservoir.swift
updateModificationCounter(),PumpEvent.updateModificationCounter() in LoopKit/LoopKit/InsulinKit/PumpEvent+CoreDataClass.swift
awakeFromInsert(),PumpEvent.awakeFromInsert() in LoopKit/LoopKit/InsulinKit/PumpEvent+CoreDataClass.swift
willSave(),PumpEvent.willSave() in LoopKit/LoopKit/InsulinKit/PumpEvent+CoreDataClass.swift
computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:),IntegralRetrospectiveCorrection.computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:) in LoopKit/LoopKit/RetrospectiveCorrection/IntegralRetrospectiveCorrection.swift
computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:),RetrospectiveCorrection.computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:) in LoopKit/LoopKit/RetrospectiveCorrection/RetrospectiveCorrection.swift
recordAnalyticsEvent(_:withProperties:outOfSession:),AnalyticsService.recordAnalyticsEvent(_:withProperties:outOfSession:) in LoopKit/LoopKit/Service/AnalyticsService.swift
recordIdentify(_:value:),AnalyticsService.recordIdentify(_:value:) in LoopKit/LoopKit/Service/AnalyticsService.swift
recordIdentify(_:array:),AnalyticsService.recordIdentify(_:array:) in LoopKit/LoopKit/Service/AnalyticsService.swift
computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:),StandardRetrospectiveCorrection.computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:) in LoopKit/LoopKit/RetrospectiveCorrection/StandardRetrospectiveCorrection.swift
updateUnit(to:),QuantityFormatter.updateUnit(to:) in LoopKit/LoopKit/QuantityFormatter.swift
configureNumberFormatter(),QuantityFormatter.configureNumberFormatter() in LoopKit/LoopKit/QuantityFormatter.swift
string(from:includeUnit:),QuantityFormatter.string(from:includeUnit:) in LoopKit/LoopKit/QuantityFormatter.swift
localizedUnitStringWithPlurality(forQuantity:avoidLineBreaking:),QuantityFormatter.localizedUnitStringWithPlurality(forQuantity:avoidLineBreaking:) in LoopKit/LoopKit/QuantityFormatter.swift
localizedUnitStringWithPlurality(forValue:avoidLineBreaking:),QuantityFormatter.localizedUnitStringWithPlurality(forValue:avoidLineBreaking:) in LoopKit/LoopKit/QuantityFormatter.swift
verify(_:),ServiceAuthentication.verify(_:) in LoopKit/LoopKit/ServiceAuthentication.swift
reset(),ServiceAuthentication.reset() in LoopKit/LoopKit/ServiceAuthentication.swift
bluetoothDidUpdateState(_:),BluetoothObserver.bluetoothDidUpdateState(_:) in LoopKit/LoopKit/BluetoothProvider.swift
authorizeBluetooth(_:),BluetoothProvider.authorizeBluetooth(_:) in LoopKit/LoopKit/BluetoothProvider.swift
addBluetoothObserver(_:queue:),BluetoothProvider.addBluetoothObserver(_:queue:) in LoopKit/LoopKit/BluetoothProvider.swift
removeBluetoothObserver(_:),BluetoothProvider.removeBluetoothObserver(_:) in LoopKit/LoopKit/BluetoothProvider.swift
unitCache(for:),HealthStoreUnitCache.unitCache(for:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
preferredUnit(for:),HealthStoreUnitCache.preferredUnit(for:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
getHealthStoreUnitAndUpdateCache(for:),HealthStoreUnitCache.getHealthStoreUnitAndUpdateCache(for:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
updateCachedUnits(),HealthStoreUnitCache.updateCachedUnits() in LoopKit/LoopKit/HealthStoreUnitCache.swift
updateCache(for:with:),HealthStoreUnitCache.updateCache(for:with:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
updateModificationCounter(),SettingsObject.updateModificationCounter() in LoopKit/LoopKit/SettingsObject+CoreDataClass.swift
awakeFromInsert(),SettingsObject.awakeFromInsert() in LoopKit/LoopKit/SettingsObject+CoreDataClass.swift
willSave(),SettingsObject.willSave() in LoopKit/LoopKit/SettingsObject+CoreDataClass.swift
fetchRequest(),CgmEvent.fetchRequest() in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
updateModificationCounter(),CgmEvent.updateModificationCounter() in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
awakeFromInsert(),CgmEvent.awakeFromInsert() in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
willSave(),CgmEvent.willSave() in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
generatePrediction(input:startDate:),GlucosePredictionAlgorithm.generatePrediction(input:startDate:) in LoopKit/LoopKit/LoopAlgorithm/GlucosePredictionAlgorithm.swift
generatePrediction(input:startDate:),LoopAlgorithm.generatePrediction(input:startDate:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
updateModificationCounter(),CachedGlucoseObject.updateModificationCounter() in LoopKit/LoopKit/GlucoseKit/CachedGlucoseObject+CoreDataClass.swift
awakeFromInsert(),CachedGlucoseObject.awakeFromInsert() in LoopKit/LoopKit/GlucoseKit/CachedGlucoseObject+CoreDataClass.swift
willSave(),CachedGlucoseObject.willSave() in LoopKit/LoopKit/GlucoseKit/CachedGlucoseObject+CoreDataClass.swift
vibrate(),AlertSoundPlayer.vibrate() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
play(url:),AlertSoundPlayer.play(url:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
stopAll(),AlertSoundPlayer.stopAll() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
vibrate(),DeviceAVSoundPlayer.vibrate() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
play(url:),DeviceAVSoundPlayer.play(url:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
stopAll(),DeviceAVSoundPlayer.stopAll() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
audioPlayerDidFinishPlaying(_:successfully:),Delegate.audioPlayerDidFinishPlaying(_:successfully:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
insert(_:queue:),WeakSynchronizedSet.insert(_:queue:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
cleanupDeallocatedElements(),WeakSynchronizedSet.cleanupDeallocatedElements() in LoopKit/LoopKit/WeakSynchronizedSet.swift
contains(_:),WeakSynchronizedSet.contains(_:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
forEach(_:),WeakSynchronizedSet.forEach(_:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
removeElement(_:),WeakSynchronizedSet.removeElement(_:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
call(_:),ElementDispatchContainer.call(_:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
simulationDateRangeForSamples(_:from:to:duration:delay:delta:),LoopMath.simulationDateRangeForSamples(_:from:to:duration:delay:delta:) in LoopKit/LoopKit/LoopMath.swift
simulationDateRange(from:to:delta:),LoopMath.simulationDateRange(from:to:delta:) in LoopKit/LoopKit/LoopMath.swift
predictGlucose(startingAt:momentum:effects:),LoopMath.predictGlucose(startingAt:momentum:effects:) in LoopKit/LoopKit/LoopMath.swift
predictGlucose(startingAt:momentum:effects:),LoopMath.predictGlucose(startingAt:momentum:effects:) in LoopKit/LoopKit/LoopMath.swift
settingsStoreHasUpdatedSettingsData(_:),SettingsStoreDelegate.settingsStoreHasUpdatedSettingsData(_:) in LoopKit/LoopKit/SettingsStore.swift
storeSettings(_:),SettingsStore.storeSettings(_:) in LoopKit/LoopKit/SettingsStore.swift
storeSettings(_:completion:),SettingsStore.storeSettings(_:completion:) in LoopKit/LoopKit/SettingsStore.swift
purgeExpiredSettings(),SettingsStore.purgeExpiredSettings() in LoopKit/LoopKit/SettingsStore.swift
purgeSettings(before:completion:),SettingsStore.purgeSettings(before:completion:) in LoopKit/LoopKit/SettingsStore.swift
purgeSettingsObjects(before:completion:),SettingsStore.purgeSettingsObjects(before:completion:) in LoopKit/LoopKit/SettingsStore.swift
encodeSettings(_:),SettingsStore.encodeSettings(_:) in LoopKit/LoopKit/SettingsStore.swift
decodeSettings(fromData:),SettingsStore.decodeSettings(fromData:) in LoopKit/LoopKit/SettingsStore.swift
currentDate(timeIntervalSinceNow:),CarbStore.currentDate(timeIntervalSinceNow:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
migrateLegacyCarbEntryKeys(),CarbStore.migrateLegacyCarbEntryKeys() in LoopKit/LoopKit/CarbKit/CarbStore.swift
carbStoreHasUpdatedCarbData(_:),CarbStoreDelegate.carbStoreHasUpdatedCarbData(_:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
carbStore(_:didError:),CarbStoreDelegate.carbStore(_:didError:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
close(),JSONStreamEncoder.close() in LoopKit/LoopKit/JSONStreamEncoder.swift
encode(_:),JSONStreamEncoder.encode(_:) in LoopKit/LoopKit/JSONStreamEncoder.swift
log(_:subsystem:category:type:_:),Logging.log(_:subsystem:category:type:_:) in LoopKit/LoopKit/Service/LoggingService.swift
model(for:),PresetInsulinModelProvider.model(for:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
model(for:),StaticInsulinModelProvider.model(for:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
glucoseStoreHasUpdatedGlucoseData(_:),GlucoseStoreDelegate.glucoseStoreHasUpdatedGlucoseData(_:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
currentDate(timeIntervalSinceNow:),GlucoseStore.currentDate(timeIntervalSinceNow:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
onReady(_:),GlucoseStore.onReady(_:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
notify(_:),WeakSynchronizedDelegate.notify(_:) in LoopKit/LoopKit/WeakSynchronizedDelegate.swift
notifyDelayed(by:_:),WeakSynchronizedDelegate.notifyDelayed(by:_:) in LoopKit/LoopKit/WeakSynchronizedDelegate.swift
call(_:),WeakSynchronizedDelegate.call(_:) in LoopKit/LoopKit/WeakSynchronizedDelegate.swift
cgmManager(_:didUpdate:),CGMManagerStatusObserver.cgmManager(_:didUpdate:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
fetchNewDataIfNeeded(_:),CGMManager.fetchNewDataIfNeeded(_:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
addStatusObserver(_:queue:),CGMManager.addStatusObserver(_:queue:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
removeStatusObserver(_:),CGMManager.removeStatusObserver(_:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
delete(completion:),CGMManager.delete(completion:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
startDateToFilterNewData(for:),CGMManagerDelegate.startDateToFilterNewData(for:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
cgmManager(_:hasNew:),CGMManagerDelegate.cgmManager(_:hasNew:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
cgmManager(_:hasNew:),CGMManagerDelegate.cgmManager(_:hasNew:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
cgmManagerWantsDeletion(_:),CGMManagerDelegate.cgmManagerWantsDeletion(_:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
cgmManagerDidUpdateState(_:),CGMManagerDelegate.cgmManagerDidUpdateState(_:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
credentialStoragePrefix(for:),CGMManagerDelegate.credentialStoragePrefix(for:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
drawChartPointModel(_:chartPointModel:view:),ChartPointsScatterDownTrianglesLayer.drawChartPointModel(_:chartPointModel:view:) in LoopKit/LoopKitUI/Views/ChartPointsScatterDownTrianglesLayer.swift
updateTextLabel(),SuspendResumeTableViewCell.updateTextLabel() in LoopKit/LoopKitUI/Views/SuspendResumeTableViewCell.swift
updateLoadingState(),SuspendResumeTableViewCell.updateLoadingState() in LoopKit/LoopKitUI/Views/SuspendResumeTableViewCell.swift
tintColorDidChange(),TextButtonTableViewCell.tintColorDidChange() in LoopKit/LoopKitUI/Views/TextButtonTableViewCell.swift
traitCollectionDidChange(_:),TextButtonTableViewCell.traitCollectionDidChange(_:) in LoopKit/LoopKitUI/Views/TextButtonTableViewCell.swift
prepareForReuse(),TextButtonTableViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/TextButtonTableViewCell.swift
loadingStatusChanged(),LoadingTableViewCell.loadingStatusChanged() in LoopKit/LoopKitUI/Views/LoadingTableViewCell.swift
nib(),NibLoadable.nib() in LoopKit/LoopKitUI/Extensions/NibLoadable.swift
makeTargetRangeText(from:),OverrideSelectionHistory.makeTargetRangeText(from:) in LoopKit/LoopKitUI/Views/OverrideSelectionHistory.swift
createCell(for:),OverrideSelectionHistory.createCell(for:) in LoopKit/LoopKitUI/Views/OverrideSelectionHistory.swift
title(for:),OverrideSelectionHistory.title(for:) in LoopKit/LoopKitUI/Views/OverrideSelectionHistory.swift
instantiate(),BatteryLevelHUDView.instantiate() in LoopKit/LoopKitUI/Views/BatteryLevelHUDView.swift
awakeFromNib(),LevelHUDView.awakeFromNib() in LoopKit/LoopKitUI/Views/LevelHUDView.swift
stateColorsDidUpdate(),LevelHUDView.stateColorsDidUpdate() in LoopKit/LoopKitUI/Views/LevelHUDView.swift
updateColor(),LevelHUDView.updateColor() in LoopKit/LoopKitUI/Views/LevelHUDView.swift
levelDidChange(),LevelHUDView.levelDidChange() in LoopKit/LoopKitUI/Views/LevelHUDView.swift
stateColorsDidUpdate(),BaseHUDView.stateColorsDidUpdate() in LoopKit/LoopKitUI/Views/BaseHUDView.swift
layoutSubviews(),LevelMaskView.layoutSubviews() in LoopKit/LoopKitUI/Views/LevelMaskView.swift
tintColorDidChange(),LevelMaskView.tintColorDidChange() in LoopKit/LoopKitUI/Views/LevelMaskView.swift
animateFill(duration:),LevelMaskView.animateFill(duration:) in LoopKit/LoopKitUI/Views/LevelMaskView.swift
updateFillViewFrame(),LevelMaskView.updateFillViewFrame() in LoopKit/LoopKitUI/Views/LevelMaskView.swift
setDefaultSupportedInferfaceOrientations(),DeviceOrientationController.setDefaultSupportedInferfaceOrientations() in LoopKit/LoopKitUI/Extensions/OrientationLock.swift
setDefaultSupportedInferfaceOrientations(),OrientationLock.setDefaultSupportedInferfaceOrientations() in LoopKit/LoopKitUI/Extensions/OrientationLock.swift
insulinSensitivityScalingTableViewCellDidUpdateScaleFactor(_:),InsulinSensitivityScalingTableViewCellDelegate.insulinSensitivityScalingTableViewCellDidUpdateScaleFactor(_:) in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
updatePickerRow(animated:),InsulinSensitivityScalingTableViewCell.updatePickerRow(animated:) in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
awakeFromNib(),InsulinSensitivityScalingTableViewCell.awakeFromNib() in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
setSelected(_:animated:),InsulinSensitivityScalingTableViewCell.setSelected(_:animated:) in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
setHighlighted(_:animated:),InsulinSensitivityScalingTableViewCell.setHighlighted(_:animated:) in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
updateFooterLabel(),InsulinSensitivityScalingTableViewCell.updateFooterLabel() in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
percentageString(from:),InsulinSensitivityScalingTableViewCell.percentageString(from:) in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
setupPanGestureRecognizer(),SegmentedGaugeBarView.setupPanGestureRecognizer() in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
handlePan(_:),SegmentedGaugeBarView.handlePan(_:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
uglyWorkaroundToForceRedraw(),SegmentedGaugeBarView.uglyWorkaroundToForceRedraw() in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
layoutSubviews(),SegmentedGaugeBarView.layoutSubviews() in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
updateThumbPosition(),SegmentedGaugeBarView.updateThumbPosition() in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
cancelActiveTouches(),SegmentedGaugeBarView.cancelActiveTouches() in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
layoutSubviews(),ThumbView.layoutSubviews() in LoopKit/LoopKitUI/Views/ThumbView.swift
makeRound(),ThumbView.makeRound() in LoopKit/LoopKitUI/Views/ThumbView.swift
configureDropShadow(),ThumbView.configureDropShadow() in LoopKit/LoopKitUI/Views/ThumbView.swift
needsDisplay(forKey:),SegmentedGaugeBarLayer.needsDisplay(forKey:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
action(forKey:),SegmentedGaugeBarLayer.action(forKey:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
display(),SegmentedGaugeBarLayer.display() in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
contentImage(),SegmentedGaugeBarLayer.contentImage() in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
drawGauge(in:),SegmentedGaugeBarLayer.drawGauge(in:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
clearSegmentArea(tracedBy:in:),SegmentedGaugeBarLayer.clearSegmentArea(tracedBy:in:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
drawFilledGradient(over:roundingCorners:in:),SegmentedGaugeBarLayer.drawFilledGradient(over:roundingCorners:in:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
drawOverlapInset(for:in:),SegmentedGaugeBarLayer.drawOverlapInset(for:in:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
drawBorder(_:color:in:),SegmentedGaugeBarLayer.drawBorder(_:color:in:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
gradientColor(atX:),SegmentedGaugeBarLayer.gradientColor(atX:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
segmentedGaugeBarView(_:didUpdateProgressFrom:to:),SegmentedGaugeBarViewDelegate.segmentedGaugeBarView(_:didUpdateProgressFrom:to:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
radioSelectionTableViewControllerDidChangeSelectedIndex(_:),RadioSelectionTableViewControllerDelegate.radioSelectionTableViewControllerDidChangeSelectedIndex(_:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
numberOfSections(in:),RadioSelectionTableViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
tableView(_:numberOfRowsInSection:),RadioSelectionTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
tableView(_:cellForRowAt:),RadioSelectionTableViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
tableView(_:titleForFooterInSection:),RadioSelectionTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
tableView(_:didSelectRowAt:),RadioSelectionTableViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
textFieldTableViewCellDidBeginEditing(_:),TextFieldTableViewCellDelegate.textFieldTableViewCellDidBeginEditing(_:) in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
textFieldTableViewCellDidEndEditing(_:),TextFieldTableViewCellDelegate.textFieldTableViewCellDidEndEditing(_:) in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
textFieldTableViewCellDidChangeEditing(_:),TextFieldTableViewCellDelegate.textFieldTableViewCellDidChangeEditing(_:) in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
prepareForReuse(),TextFieldTableViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
textFieldEditingChanged(),TextFieldTableViewCell.textFieldEditingChanged() in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
textFieldDidBeginEditing(_:),TextFieldTableViewCell.textFieldDidBeginEditing(_:) in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
textFieldDidEndEditing(_:),TextFieldTableViewCell.textFieldDidEndEditing(_:) in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
textField(_:shouldChangeCharactersIn:replacementString:),TextFieldTableViewCell.textField(_:shouldChangeCharactersIn:replacementString:) in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
captionForThreshold(_:),GuardrailWarning.captionForThreshold(_:) in LoopKit/LoopKitUI/Views/GuardrailWarning.swift
captionForThresholds(),GuardrailWarning.captionForThresholds() in LoopKit/LoopKitUI/Views/GuardrailWarning.swift
<(_:_:),WarningSeverity.<(_:_:) in LoopKit/LoopKitUI/Views/WarningView.swift
rowTapped(),EmojiRow.rowTapped() in LoopKit/LoopKitUI/CarbKit/EmojiRow.swift
dataSource(),EmojiDataSourceType.dataSource() in LoopKit/LoopKitUI/Views/EmojiDataSource.swift
glucoseEntryTableViewControllerDidChangeGlucose(_:),GlucoseEntryTableViewControllerDelegate.glucoseEntryTableViewControllerDidChangeGlucose(_:) in LoopKit/LoopKitUI/View Controllers/GlucoseEntryTableViewController.swift
viewDidLoad(),TextFieldTableViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
viewDidAppear(_:),TextFieldTableViewController.viewDidAppear(_:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
tableView(_:numberOfRowsInSection:),TextFieldTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
tableView(_:cellForRowAt:),TextFieldTableViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
tableView(_:titleForFooterInSection:),TextFieldTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
tableView(_:didSelectRowAt:),TextFieldTableViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
textFieldShouldEndEditing(_:),TextFieldTableViewController.textFieldShouldEndEditing(_:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
textFieldShouldReturn(_:),TextFieldTableViewController.textFieldShouldReturn(_:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
textFieldTableViewControllerDidEndEditing(_:),TextFieldTableViewControllerDelegate.textFieldTableViewControllerDidEndEditing(_:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
textFieldTableViewControllerDidReturn(_:),TextFieldTableViewControllerDelegate.textFieldTableViewControllerDidReturn(_:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
viewDidLoad(),AuthenticationViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
numberOfSections(in:),AuthenticationViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
tableView(_:numberOfRowsInSection:),AuthenticationViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
tableView(_:cellForRowAt:),AuthenticationViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
tableView(_:titleForFooterInSection:),AuthenticationViewController.tableView(_:titleForFooterInSection:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
tableView(_:shouldHighlightRowAt:),AuthenticationViewController.tableView(_:shouldHighlightRowAt:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
tableView(_:didSelectRowAt:),AuthenticationViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
validate(),AuthenticationViewController.validate() in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
textFieldDidEndEditing(_:),AuthenticationViewController.textFieldDidEndEditing(_:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
textFieldShouldReturn(_:),AuthenticationViewController.textFieldShouldReturn(_:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
textField(_:shouldChangeCharactersIn:replacementString:),AuthenticationViewController.textField(_:shouldChangeCharactersIn:replacementString:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
matchingFraction(for:from:),FractionalQuantityPicker.matchingFraction(for:from:) in LoopKit/LoopKitUI/Views/FractionalQuantityPicker.swift
colorForWhole(_:),FractionalQuantityPicker.colorForWhole(_:) in LoopKit/LoopKitUI/Views/FractionalQuantityPicker.swift
colorForFraction(_:),FractionalQuantityPicker.colorForFraction(_:) in LoopKit/LoopKitUI/Views/FractionalQuantityPicker.swift
layoutSubviews(),ValidatingIndicatorView.layoutSubviews() in LoopKit/LoopKitUI/Views/ValidatingIndicatorView.swift
makeUIView(context:),WebView.makeUIView(context:) in LoopKit/LoopKitUI/Views/WebView.swift
updateUIView(_:context:),WebView.updateUIView(_:context:) in LoopKit/LoopKitUI/Views/WebView.swift
makeUIView(context:),ActivityIndicator.makeUIView(context:) in LoopKit/LoopKitUI/Views/ActivityIndicator.swift
updateUIView(_:context:),ActivityIndicator.updateUIView(_:context:) in LoopKit/LoopKitUI/Views/ActivityIndicator.swift
syncBasalRateSchedule(items:completion:),TherapySettingsViewModelDelegate.syncBasalRateSchedule(items:completion:) in LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
syncDeliveryLimits(deliveryLimits:completion:),TherapySettingsViewModelDelegate.syncDeliveryLimits(deliveryLimits:completion:) in LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
saveCompletion(therapySettings:),TherapySettingsViewModelDelegate.saveCompletion(therapySettings:) in LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
pumpSupportedIncrements(),TherapySettingsViewModelDelegate.pumpSupportedIncrements() in LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
glucoseTargetRangeSchedule(for:),TherapySettingsViewModel.glucoseTargetRangeSchedule(for:) in LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
insulinSensitivitySchedule(for:),TherapySettingsViewModel.insulinSensitivitySchedule(for:) in LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
reset(),TherapySettingsViewModel.reset() in LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
setSelected(_:animated:),AuthenticationTableViewCell.setSelected(_:animated:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
prepareForReuse(),AuthenticationTableViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
numberOfComponents(in:),CredentialOptionPicker.numberOfComponents(in:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
pickerView(_:numberOfRowsInComponent:),CredentialOptionPicker.pickerView(_:numberOfRowsInComponent:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
pickerView(_:titleForRow:forComponent:),CredentialOptionPicker.pickerView(_:titleForRow:forComponent:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
pickerView(_:didSelectRow:inComponent:),CredentialOptionPicker.pickerView(_:didSelectRow:inComponent:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
credentialOptionDataSourceDidUpdateValue(_:),CredentialOptionPickerDelegate.credentialOptionDataSourceDidUpdateValue(_:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
card(for:),CorrectionRangeOverridesEditor.card(for:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
description(of:),CorrectionRangeOverridesEditor.description(of:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
selectableBounds(for:),CorrectionRangeOverridesEditor.selectableBounds(for:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
initiallySelectedValue(for:),CorrectionRangeOverridesEditor.initiallySelectedValue(for:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
confirmationAlert(),CorrectionRangeOverridesEditor.confirmationAlert() in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
startSaving(),CorrectionRangeOverridesEditor.startSaving() in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
continueSaving(),CorrectionRangeOverridesEditor.continueSaving() in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
accessibilityIdentifier(for:),CorrectionRangeOverridesEditor.accessibilityIdentifier(for:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
format(_:includeUnit:),DisplayGlucosePreference.format(_:includeUnit:) in LoopKit/LoopKitUI/ViewModels/DisplayGlucosePreference.swift
formatMinuteRate(_:includeUnit:),DisplayGlucosePreference.formatMinuteRate(_:includeUnit:) in LoopKit/LoopKitUI/ViewModels/DisplayGlucosePreference.swift
singularWarningTitle(for:),CorrectionRangeOverridesGuardrailWarning.singularWarningTitle(for:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
didReceiveMemoryWarning(),ChartsManager.didReceiveMemoryWarning() in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
updateEndDate(_:),ChartsManager.updateEndDate(_:) in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
chart(atIndex:frame:),ChartsManager.chart(atIndex:frame:) in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
invalidateChart(atIndex:),ChartsManager.invalidateChart(atIndex:) in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
generateXAxisValues(),ChartsManager.generateXAxisValues() in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
prerender(),ChartsManager.prerender() in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
didReceiveMemoryWarning(),ChartProviding.didReceiveMemoryWarning() in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
generate(withFrame:xAxisModel:xAxisValues:axisLabelSettings:guideLinesLayerSettings:colors:chartSettings:labelsWidthY:gestureRecognizer:traitCollection:),ChartProviding.generate(withFrame:xAxisModel:xAxisValues:axisLabelSettings:guideLinesLayerSettings:colors:chartSettings:labelsWidthY:gestureRecognizer:traitCollection:) in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
setup(),SettingsTableViewCell.setup() in LoopKit/LoopKitUI/Views/SettingsTableViewCell.swift
prepareForReuse(),SettingsTableViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/SettingsTableViewCell.swift
singularWarningTitle(for:),CorrectionRangeGuardrailWarning.singularWarningTitle(for:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeScheduleEditor.swift
completionNotifyingDidComplete(_:),CompletionDelegate.completionNotifyingDidComplete(_:) in LoopKit/LoopKitUI/CompletionNotifying.swift
chartInitialized(chart:),ChartPointsFillsLayer.chartInitialized(chart:) in LoopKit/LoopKitUI/Views/ChartPointsContextFillLayer.swift
draw(_:),ChartPointsFillsView.draw(_:) in LoopKit/LoopKitUI/Views/ChartPointsContextFillLayer.swift
buildIf(_:),CardBuilder.buildIf(_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:),CardBuilder.buildBlock(_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:),CardBuilder.buildBlock(_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:_:),CardBuilder.buildBlock(_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:_:_:),CardBuilder.buildBlock(_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:_:_:_:),CardBuilder.buildBlock(_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:_:_:_:_:),CardBuilder.buildBlock(_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:_:_:_:_:_:),CardBuilder.buildBlock(_:_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:_:_:_:_:_:_:),CardBuilder.buildBlock(_:_:_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:_:_:_:_:_:_:_:),CardBuilder.buildBlock(_:_:_:_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
buildBlock(_:_:_:_:_:_:_:_:_:_:),CardBuilder.buildBlock(_:_:_:_:_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
toCard(_:),CardBuilder.toCard(_:) in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
unitDidChange(to:),DisplayGlucoseUnitObserver.unitDidChange(to:) in LoopKit/LoopKitUI/DisplayGlucoseUnitObserver.swift
isTimeSelectable(_:),NewScheduleItemEditor.isTimeSelectable(_:) in LoopKit/LoopKitUI/Views/NewScheduleItemEditor.swift
singularWarningTitle(for:),CarbRatioGuardrailWarning.singularWarningTitle(for:) in LoopKit/LoopKitUI/Views/Settings Editors/CarbRatioScheduleEditor.swift
editingRect(forBounds:),PaddedTextField.editingRect(forBounds:) in LoopKit/LoopKitUI/Views/PaddedTextField.swift
textRect(forBounds:),PaddedTextField.textRect(forBounds:) in LoopKit/LoopKitUI/Views/PaddedTextField.swift
placeholderRect(forBounds:),PaddedTextField.placeholderRect(forBounds:) in LoopKit/LoopKitUI/Views/PaddedTextField.swift
notifyServiceCreated(_:),ServiceNavigationController.notifyServiceCreated(_:) in LoopKit/LoopKitUI/View Controllers/ServiceNavigationController.swift
notifyServiceOnboarded(_:),ServiceNavigationController.notifyServiceOnboarded(_:) in LoopKit/LoopKitUI/View Controllers/ServiceNavigationController.swift
notifyServiceCreatedAndOnboarded(_:),ServiceNavigationController.notifyServiceCreatedAndOnboarded(_:) in LoopKit/LoopKitUI/View Controllers/ServiceNavigationController.swift
notifyComplete(),ServiceNavigationController.notifyComplete() in LoopKit/LoopKitUI/View Controllers/ServiceNavigationController.swift
setupViewController(colorPalette:pluginHost:),ServiceUI.setupViewController(colorPalette:pluginHost:) in LoopKit/LoopKitUI/ServiceUI.swift
settingsViewController(colorPalette:),ServiceUI.settingsViewController(colorPalette:) in LoopKit/LoopKitUI/ServiceUI.swift
serviceOnboarding(didCreateService:),ServiceOnboardingDelegate.serviceOnboarding(didCreateService:) in LoopKit/LoopKitUI/ServiceUI.swift
serviceOnboarding(didOnboardService:),ServiceOnboardingDelegate.serviceOnboarding(didOnboardService:) in LoopKit/LoopKitUI/ServiceUI.swift
makeCoordinator(),ResizeablePicker.makeCoordinator() in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
makeUIView(context:),ResizeablePicker.makeUIView(context:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
updateUIView(_:context:),ResizeablePicker.updateUIView(_:context:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
updateData(newData:),Coordinator.updateData(newData:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
numberOfComponents(in:),Coordinator.numberOfComponents(in:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
pickerView(_:numberOfRowsInComponent:),Coordinator.pickerView(_:numberOfRowsInComponent:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
pickerView(_:viewForRow:forComponent:reusing:),Coordinator.pickerView(_:viewForRow:forComponent:reusing:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
pickerView(_:didSelectRow:inComponent:),Coordinator.pickerView(_:didSelectRow:inComponent:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
awakeFromNib(),SetupButton.awakeFromNib() in LoopKit/LoopKitUI/Views/SetupButton.swift
setup(),SetupButton.setup() in LoopKit/LoopKitUI/Views/SetupButton.swift
tintColorDidChange(),SetupButton.tintColorDidChange() in LoopKit/LoopKitUI/Views/SetupButton.swift
prepareForInterfaceBuilder(),SetupButton.prepareForInterfaceBuilder() in LoopKit/LoopKitUI/Views/SetupButton.swift
viewDidLoad(),LegacyInsulinDeliveryTableViewController.viewDidLoad() in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
viewWillAppear(_:),LegacyInsulinDeliveryTableViewController.viewWillAppear(_:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
viewDidAppear(_:),LegacyInsulinDeliveryTableViewController.viewDidAppear(_:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
viewWillDisappear(_:),LegacyInsulinDeliveryTableViewController.viewWillDisappear(_:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
viewDidDisappear(_:),LegacyInsulinDeliveryTableViewController.viewDidDisappear(_:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
setEditing(_:animated:),LegacyInsulinDeliveryTableViewController.setEditing(_:animated:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
reloadData(),LegacyInsulinDeliveryTableViewController.reloadData() in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
updateTimelyStats(_:),LegacyInsulinDeliveryTableViewController.updateTimelyStats(_:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
updateIOB(),LegacyInsulinDeliveryTableViewController.updateIOB() in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
updateTotal(),LegacyInsulinDeliveryTableViewController.updateTotal() in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
selectedSegmentChanged(_:),LegacyInsulinDeliveryTableViewController.selectedSegmentChanged(_:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
confirmDeletion(_:),LegacyInsulinDeliveryTableViewController.confirmDeletion(_:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
deleteAllObjects(),LegacyInsulinDeliveryTableViewController.deleteAllObjects() in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
numberOfSections(in:),LegacyInsulinDeliveryTableViewController.numberOfSections(in:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
tableView(_:numberOfRowsInSection:),LegacyInsulinDeliveryTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
tableView(_:cellForRowAt:),LegacyInsulinDeliveryTableViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
tableView(_:canEditRowAt:),LegacyInsulinDeliveryTableViewController.tableView(_:canEditRowAt:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
tableView(_:commit:forRowAt:),LegacyInsulinDeliveryTableViewController.tableView(_:commit:forRowAt:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
tableView(_:didSelectRowAt:),LegacyInsulinDeliveryTableViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
setErrorDescriptionLabel(with:),ErrorBackgroundView.setErrorDescriptionLabel(with:) in LoopKit/LoopKitUI/InsulinKit/ErrorBackgroundView.swift
updateEndDate(_:),PredictedGlucoseChart.updateEndDate(_:) in LoopKit/LoopKitUI/Charts/PredictedGlucoseChart.swift
glucosePointsFromValues(_:),GlucoseChart.glucosePointsFromValues(_:) in LoopKit/LoopKitUI/Charts/GlucoseChart.swift
percentageTextFieldTableViewControllerDidChangePercentage(_:),PercentageTextFieldTableViewControllerDelegate.percentageTextFieldTableViewControllerDidChangePercentage(_:) in LoopKit/LoopKitUI/View Controllers/PercentageTextFieldTableViewController.swift
setupTableViewControllerCancelButtonPressed(_:),SetupTableViewControllerDelegate.setupTableViewControllerCancelButtonPressed(_:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
viewDidLoad(),SetupTableViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
viewDidLayoutSubviews(),SetupTableViewController.viewDidLayoutSubviews() in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
cancelButtonPressed(_:),SetupTableViewController.cancelButtonPressed(_:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
continueButtonPressed(_:),SetupTableViewController.continueButtonPressed(_:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
tableView(_:estimatedHeightForRowAt:),SetupTableViewController.tableView(_:estimatedHeightForRowAt:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
tableView(_:heightForRowAt:),SetupTableViewController.tableView(_:heightForRowAt:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
tableView(_:heightForHeaderInSection:),SetupTableViewController.tableView(_:heightForHeaderInSection:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
syncScheduleValues(for:completion:),SingleValueScheduleTableViewControllerSyncSource.syncScheduleValues(for:completion:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
syncButtonTitle(for:),SingleValueScheduleTableViewControllerSyncSource.syncButtonTitle(for:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
syncButtonDetailText(for:),SingleValueScheduleTableViewControllerSyncSource.syncButtonDetailText(for:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
singleValueScheduleTableViewControllerIsReadOnly(_:),SingleValueScheduleTableViewControllerSyncSource.singleValueScheduleTableViewControllerIsReadOnly(_:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
viewDidLoad(),SingleValueScheduleTableViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
viewWillDisappear(_:),SingleValueScheduleTableViewController.viewWillDisappear(_:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
addScheduleItem(_:),SingleValueScheduleTableViewController.addScheduleItem(_:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
insertableIndiciesByRemovingRow(_:withInterval:),SingleValueScheduleTableViewController.insertableIndiciesByRemovingRow(_:withInterval:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
numberOfSections(in:),SingleValueScheduleTableViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
tableView(_:numberOfRowsInSection:),SingleValueScheduleTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
tableView(_:cellForRowAt:),SingleValueScheduleTableViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
tableView(_:titleForFooterInSection:),SingleValueScheduleTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
tableView(_:commit:forRowAt:),SingleValueScheduleTableViewController.tableView(_:commit:forRowAt:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
tableView(_:moveRowAt:to:),SingleValueScheduleTableViewController.tableView(_:moveRowAt:to:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
tableView(_:canEditRowAt:),SingleValueScheduleTableViewController.tableView(_:canEditRowAt:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
tableView(_:didSelectRowAt:),SingleValueScheduleTableViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:),SingleValueScheduleTableViewController.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
datePickerTableViewCellDidUpdateDate(_:),SingleValueScheduleTableViewController.datePickerTableViewCellDidUpdateDate(_:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
repeatingScheduleValueTableViewCellDidUpdateValue(_:),SingleValueScheduleTableViewController.repeatingScheduleValueTableViewCellDidUpdateValue(_:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
repeatingScheduleValueTableViewCellDidUpdateValue(_:),RepeatingScheduleValueTableViewCellDelegate.repeatingScheduleValueTableViewCellDidUpdateValue(_:) in LoopKit/LoopKitUI/Views/RepeatingScheduleValueTableViewCell.swift
datePickerTableViewCellDidUpdateDate(_:),DatePickerTableViewCellDelegate.datePickerTableViewCellDidUpdateDate(_:) in LoopKit/LoopKitUI/Views/DatePickerTableViewCell.swift
viewDidLoad(),DailyValueScheduleTableViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
setEditing(_:animated:),DailyValueScheduleTableViewController.setEditing(_:animated:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
viewWillDisappear(_:),DailyValueScheduleTableViewController.viewWillDisappear(_:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
addScheduleItem(_:),DailyValueScheduleTableViewController.addScheduleItem(_:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
insertableIndiciesByRemovingRow(_:withInterval:),DailyValueScheduleTableViewController.insertableIndiciesByRemovingRow(_:withInterval:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
numberOfSections(in:),DailyValueScheduleTableViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:numberOfRowsInSection:),DailyValueScheduleTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:canEditRowAt:),DailyValueScheduleTableViewController.tableView(_:canEditRowAt:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:canMoveRowAt:),DailyValueScheduleTableViewController.tableView(_:canMoveRowAt:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:cellForRowAt:),DailyValueScheduleTableViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:commit:forRowAt:),DailyValueScheduleTableViewController.tableView(_:commit:forRowAt:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:shouldHighlightRowAt:),DailyValueScheduleTableViewController.tableView(_:shouldHighlightRowAt:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:willSelectRowAt:),DailyValueScheduleTableViewController.tableView(_:willSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:didDeselectRowAt:),DailyValueScheduleTableViewController.tableView(_:didDeselectRowAt:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:didSelectRowAt:),DailyValueScheduleTableViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:),DailyValueScheduleTableViewController.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
datePickerTableViewCellDidUpdateDate(_:),DailyValueScheduleTableViewController.datePickerTableViewCellDidUpdateDate(_:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
dailyValueScheduleTableViewControllerWillFinishUpdating(_:),DailyValueScheduleTableViewControllerDelegate.dailyValueScheduleTableViewControllerWillFinishUpdating(_:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
updateDateLabel(),RepeatingScheduleValueTableViewCell.updateDateLabel() in LoopKit/LoopKitUI/Views/RepeatingScheduleValueTableViewCell.swift
dateChanged(_:),RepeatingScheduleValueTableViewCell.dateChanged(_:) in LoopKit/LoopKitUI/Views/RepeatingScheduleValueTableViewCell.swift
textFieldShouldBeginEditing(_:),RepeatingScheduleValueTableViewCell.textFieldShouldBeginEditing(_:) in LoopKit/LoopKitUI/Views/RepeatingScheduleValueTableViewCell.swift
textFieldDidBeginEditing(_:),RepeatingScheduleValueTableViewCell.textFieldDidBeginEditing(_:) in LoopKit/LoopKitUI/Views/RepeatingScheduleValueTableViewCell.swift
textFieldDidEndEditing(_:),RepeatingScheduleValueTableViewCell.textFieldDidEndEditing(_:) in LoopKit/LoopKitUI/Views/RepeatingScheduleValueTableViewCell.swift
awakeFromNib(),DatePickerTableViewCell.awakeFromNib() in LoopKit/LoopKitUI/Views/DatePickerTableViewCell.swift
setSelected(_:animated:),DatePickerTableViewCell.setSelected(_:animated:) in LoopKit/LoopKitUI/Views/DatePickerTableViewCell.swift
updateDateLabel(),DatePickerTableViewCell.updateDateLabel() in LoopKit/LoopKitUI/Views/DatePickerTableViewCell.swift
dateChanged(_:),DatePickerTableViewCell.dateChanged(_:) in LoopKit/LoopKitUI/Views/DatePickerTableViewCell.swift
setConstrainedScheduleEntryTableViewCellDidUpdate(_:),SetConstrainedScheduleEntryTableViewCellDelegate.setConstrainedScheduleEntryTableViewCellDidUpdate(_:) in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
awakeFromNib(),SetConstrainedScheduleEntryTableViewCell.awakeFromNib() in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
setSelected(_:animated:),SetConstrainedScheduleEntryTableViewCell.setSelected(_:animated:) in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
startTimeForTimeComponent(row:),SetConstrainedScheduleEntryTableViewCell.startTimeForTimeComponent(row:) in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
stringForStartTime(_:),SetConstrainedScheduleEntryTableViewCell.stringForStartTime(_:) in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
updateDateLabel(),SetConstrainedScheduleEntryTableViewCell.updateDateLabel() in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
validate(),SetConstrainedScheduleEntryTableViewCell.validate() in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
updateValueFromPicker(),SetConstrainedScheduleEntryTableViewCell.updateValueFromPicker() in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
updateStartTimeSelection(),SetConstrainedScheduleEntryTableViewCell.updateStartTimeSelection() in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
updateValuePicker(),SetConstrainedScheduleEntryTableViewCell.updateValuePicker() in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
updateValueLabel(),SetConstrainedScheduleEntryTableViewCell.updateValueLabel() in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
formatValue(_:),SetConstrainedScheduleEntryTableViewCell.formatValue(_:) in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
singularWarningTitle(for:),InsulinSensitivityGuardrailWarning.singularWarningTitle(for:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinSensitivityScheduleEditor.swift
instance(withEmojis:),EmojiInputController.instance(withEmojis:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
viewDidLoad(),EmojiInputController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
setupSectionIndex(),EmojiInputController.setupSectionIndex() in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
switchKeyboard(_:),EmojiInputController.switchKeyboard(_:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
deleteBackward(_:),EmojiInputController.deleteBackward(_:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
indexTouched(_:),EmojiInputController.indexTouched(_:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
numberOfSections(in:),EmojiInputController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
collectionView(_:numberOfItemsInSection:),EmojiInputController.collectionView(_:numberOfItemsInSection:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
collectionView(_:viewForSupplementaryElementOfKind:at:),EmojiInputController.collectionView(_:viewForSupplementaryElementOfKind:at:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
collectionView(_:cellForItemAt:),EmojiInputController.collectionView(_:cellForItemAt:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
collectionView(_:didSelectItemAt:),EmojiInputController.collectionView(_:didSelectItemAt:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
emojiInputControllerDidAdvanceToStandardInputMode(_:),EmojiInputControllerDelegate.emojiInputControllerDidAdvanceToStandardInputMode(_:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
emojiInputControllerDidSelectItemInSection(_:),EmojiInputControllerDelegate.emojiInputControllerDidSelectItemInSection(_:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
loadView(),CommandResponseViewController.loadView() in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
viewDidLoad(),CommandResponseViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
shareText(_:),CommandResponseViewController.shareText(_:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
activityViewControllerPlaceholderItem(_:),SharedResponse.activityViewControllerPlaceholderItem(_:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
activityViewController(_:itemForActivityType:),SharedResponse.activityViewController(_:itemForActivityType:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
activityViewController(_:subjectForActivityType:),SharedResponse.activityViewController(_:subjectForActivityType:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
activityViewController(_:dataTypeIdentifierForActivityType:),SharedResponse.activityViewController(_:dataTypeIdentifierForActivityType:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
saveSchedule(_:for:completion:),InsulinSensitivityScheduleStorageDelegate.saveSchedule(_:for:completion:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
viewDidLoad(),InsulinSensitivityScheduleViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
cancel(_:),InsulinSensitivityScheduleViewController.cancel(_:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
isValid(_:),InsulinSensitivityScheduleViewController.isValid(_:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
updateCancelButton(),InsulinSensitivityScheduleViewController.updateCancelButton() in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
updateSaveButton(),InsulinSensitivityScheduleViewController.updateSaveButton() in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
updateEditButton(),InsulinSensitivityScheduleViewController.updateEditButton() in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
updateInsertButton(),InsulinSensitivityScheduleViewController.updateInsertButton() in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
addScheduleItem(_:),InsulinSensitivityScheduleViewController.addScheduleItem(_:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
insertableIndiciesByRemovingRow(_:withInterval:),InsulinSensitivityScheduleViewController.insertableIndiciesByRemovingRow(_:withInterval:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
setEditing(_:animated:),InsulinSensitivityScheduleViewController.setEditing(_:animated:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
updateTimeLimitsFor(itemAt:),InsulinSensitivityScheduleViewController.updateTimeLimitsFor(itemAt:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
updateTimeLimitsForItemsAdjacent(to:),InsulinSensitivityScheduleViewController.updateTimeLimitsForItemsAdjacent(to:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
numberOfSections(in:),InsulinSensitivityScheduleViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:numberOfRowsInSection:),InsulinSensitivityScheduleViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:cellForRowAt:),InsulinSensitivityScheduleViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:titleForFooterInSection:),InsulinSensitivityScheduleViewController.tableView(_:titleForFooterInSection:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:commit:forRowAt:),InsulinSensitivityScheduleViewController.tableView(_:commit:forRowAt:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:moveRowAt:to:),InsulinSensitivityScheduleViewController.tableView(_:moveRowAt:to:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:shouldHighlightRowAt:),InsulinSensitivityScheduleViewController.tableView(_:shouldHighlightRowAt:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:willSelectRowAt:),InsulinSensitivityScheduleViewController.tableView(_:willSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:didSelectRowAt:),InsulinSensitivityScheduleViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:),InsulinSensitivityScheduleViewController.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
doubleRangeTableViewCellDidBeginEditing(_:),DoubleRangeTableViewCellDelegate.doubleRangeTableViewCellDidBeginEditing(_:) in LoopKit/LoopKitUI/Views/DoubleRangeTableViewCell.swift
doubleRangeTableViewCellDidUpdateRange(_:),DoubleRangeTableViewCellDelegate.doubleRangeTableViewCellDidUpdateRange(_:) in LoopKit/LoopKitUI/Views/DoubleRangeTableViewCell.swift
textFieldEditingChanged(),DoubleRangeTableViewCell.textFieldEditingChanged() in LoopKit/LoopKitUI/Views/DoubleRangeTableViewCell.swift
viewDidLoad(),ChartsTableViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
didReceiveMemoryWarning(),ChartsTableViewController.didReceiveMemoryWarning() in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
viewWillAppear(_:),ChartsTableViewController.viewWillAppear(_:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
viewWillDisappear(_:),ChartsTableViewController.viewWillDisappear(_:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
viewWillTransition(to:with:),ChartsTableViewController.viewWillTransition(to:with:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
traitCollectionDidChange(_:),ChartsTableViewController.traitCollectionDidChange(_:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
unitPreferencesDidChange(to:),ChartsTableViewController.unitPreferencesDidChange(to:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
glucoseUnitDidChange(),ChartsTableViewController.glucoseUnitDidChange() in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
createChartsManager(),ChartsTableViewController.createChartsManager() in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
reloadData(animated:),ChartsTableViewController.reloadData(animated:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
gestureRecognizerShouldBegin(_:),ChartsTableViewController.gestureRecognizerShouldBegin(_:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:),ChartsTableViewController.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
handlePan(_:),ChartsTableViewController.handlePan(_:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
saveSchedule(for:completion:),GlucoseRangeScheduleStorageDelegate.saveSchedule(for:completion:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
viewDidLoad(),GlucoseRangeScheduleTableViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
cancel(_:),GlucoseRangeScheduleTableViewController.cancel(_:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
updateInsertButton(),GlucoseRangeScheduleTableViewController.updateInsertButton() in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
setEditing(_:animated:),GlucoseRangeScheduleTableViewController.setEditing(_:animated:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
updateSaveButton(),GlucoseRangeScheduleTableViewController.updateSaveButton() in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
updateEditButton(),GlucoseRangeScheduleTableViewController.updateEditButton() in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
setSchedule(_:withOverrideRanges:),GlucoseRangeScheduleTableViewController.setSchedule(_:withOverrideRanges:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
isValid(_:),GlucoseRangeScheduleTableViewController.isValid(_:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
addScheduleItem(_:),GlucoseRangeScheduleTableViewController.addScheduleItem(_:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
updateTimeLimits(for:),GlucoseRangeScheduleTableViewController.updateTimeLimits(for:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
allowedTimeRange(for:),GlucoseRangeScheduleTableViewController.allowedTimeRange(for:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
insertableIndices(removing:),GlucoseRangeScheduleTableViewController.insertableIndices(removing:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
numberOfSections(in:),GlucoseRangeScheduleTableViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:numberOfRowsInSection:),GlucoseRangeScheduleTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:cellForRowAt:),GlucoseRangeScheduleTableViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:commit:forRowAt:),GlucoseRangeScheduleTableViewController.tableView(_:commit:forRowAt:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:moveRowAt:to:),GlucoseRangeScheduleTableViewController.tableView(_:moveRowAt:to:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:canEditRowAt:),GlucoseRangeScheduleTableViewController.tableView(_:canEditRowAt:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:canMoveRowAt:),GlucoseRangeScheduleTableViewController.tableView(_:canMoveRowAt:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:titleForHeaderInSection:),GlucoseRangeScheduleTableViewController.tableView(_:titleForHeaderInSection:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:titleForFooterInSection:),GlucoseRangeScheduleTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:shouldHighlightRowAt:),GlucoseRangeScheduleTableViewController.tableView(_:shouldHighlightRowAt:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:willSelectRowAt:),GlucoseRangeScheduleTableViewController.tableView(_:willSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:didDeselectRowAt:),GlucoseRangeScheduleTableViewController.tableView(_:didDeselectRowAt:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:didSelectRowAt:),GlucoseRangeScheduleTableViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:),GlucoseRangeScheduleTableViewController.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
updateStartTimeSelection(),GlucoseRangeTableViewCell.updateStartTimeSelection() in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
selectPickerValue(for:with:allowedValues:),GlucoseRangeTableViewCell.selectPickerValue(for:with:allowedValues:) in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
selectPickerValues(),GlucoseRangeTableViewCell.selectPickerValues() in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
updateMinValueFromPicker(),GlucoseRangeTableViewCell.updateMinValueFromPicker() in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
updateMaxValueFromPicker(),GlucoseRangeTableViewCell.updateMaxValueFromPicker() in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
updateDateLabel(),GlucoseRangeTableViewCell.updateDateLabel() in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
startTimeForTimeComponent(row:),GlucoseRangeTableViewCell.startTimeForTimeComponent(row:) in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
stringForStartTime(_:),GlucoseRangeTableViewCell.stringForStartTime(_:) in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
awakeFromNib(),GlucoseRangeTableViewCell.awakeFromNib() in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
setSelected(_:animated:),GlucoseRangeTableViewCell.setSelected(_:animated:) in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
glucoseRangeTableViewCellDidUpdate(_:),GlucoseRangeTableViewCellDelegate.glucoseRangeTableViewCellDidUpdate(_:) in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
guardrail(for:),CorrectionRangeOverridesExpandableSetting.guardrail(for:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesExpandableSetting.swift
viewWillDisappear(_:),DismissibleHostingController.viewWillDisappear(_:) in LoopKit/LoopKitUI/View Controllers/DismissibleHostingController.swift
hasUnsupportedValue(_:),QuantityScheduleEditor.hasUnsupportedValue(_:) in LoopKit/LoopKitUI/Views/QuantityScheduleEditor.swift
pullback(_:),SavingMechanism.pullback(_:) in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
viewUsedInState(_:),SetupIndicatorView.viewUsedInState(_:) in LoopKit/LoopKitUI/Views/SetupIndicatorView.swift
animate(from:to:),SetupIndicatorView.animate(from:to:) in LoopKit/LoopKitUI/Views/SetupIndicatorView.swift
setUp(),SetupIndicatorView.setUp() in LoopKit/LoopKitUI/Views/SetupIndicatorView.swift
dateAndDurationTableViewControllerDidChangeDate(_:),DateAndDurationTableViewControllerDelegate.dateAndDurationTableViewControllerDidChangeDate(_:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
viewDidLoad(),DateAndDurationTableViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
onSave(_:),DateAndDurationTableViewController.onSave(_:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
save(),DateAndDurationTableViewController.save() in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
numberOfSections(in:),DateAndDurationTableViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
tableView(_:numberOfRowsInSection:),DateAndDurationTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
tableView(_:cellForRowAt:),DateAndDurationTableViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
tableView(_:titleForFooterInSection:),DateAndDurationTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
makeUIViewController(context:),HistoricalOverrideDetailView.makeUIViewController(context:) in LoopKit/LoopKitUI/View Controllers/HistoricalOverrideDetailView.swift
updateUIViewController(_:context:),HistoricalOverrideDetailView.updateUIViewController(_:context:) in LoopKit/LoopKitUI/View Controllers/HistoricalOverrideDetailView.swift
configure(with:),AddEditOverrideTableViewController.configure(with:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
viewDidLoad(),AddEditOverrideTableViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
propertyRow(for:),AddEditOverrideTableViewController.propertyRow(for:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
indexPath(for:),AddEditOverrideTableViewController.indexPath(for:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
numberOfSections(in:),AddEditOverrideTableViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
tableView(_:numberOfRowsInSection:),AddEditOverrideTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
tableView(_:cellForRowAt:),AddEditOverrideTableViewController.tableView(_:cellForRowAt:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
durationFinitenessChanged(_:),AddEditOverrideTableViewController.durationFinitenessChanged(_:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
setDurationIndefinite(),AddEditOverrideTableViewController.setDurationIndefinite() in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
setDurationFinite(),AddEditOverrideTableViewController.setDurationFinite() in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
tableView(_:titleForFooterInSection:),AddEditOverrideTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
tableView(_:willSelectRowAt:),AddEditOverrideTableViewController.tableView(_:willSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
tableView(_:didSelectRowAt:),AddEditOverrideTableViewController.tableView(_:didSelectRowAt:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
collapseExpandableCells(excluding:),AddEditOverrideTableViewController.collapseExpandableCells(excluding:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
addEditOverrideTableViewController(_:didSavePreset:),AddEditOverrideTableViewControllerDelegate.addEditOverrideTableViewController(_:didSavePreset:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
addEditOverrideTableViewController(_:didSaveOverride:),AddEditOverrideTableViewControllerDelegate.addEditOverrideTableViewController(_:didSaveOverride:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
addEditOverrideTableViewController(_:didCancelOverride:),AddEditOverrideTableViewControllerDelegate.addEditOverrideTableViewController(_:didCancelOverride:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
defaultValue(for:),SuspendThresholdEditor.defaultValue(for:) in LoopKit/LoopKitUI/Views/Settings Editors/SuspendThresholdEditor.swift
confirmationAlert(),SuspendThresholdEditor.confirmationAlert() in LoopKit/LoopKitUI/Views/Settings Editors/SuspendThresholdEditor.swift
startSaving(),SuspendThresholdEditor.startSaving() in LoopKit/LoopKitUI/Views/Settings Editors/SuspendThresholdEditor.swift
continueSaving(),SuspendThresholdEditor.continueSaving() in LoopKit/LoopKitUI/Views/Settings Editors/SuspendThresholdEditor.swift
generateIssueReport(completion:),SupportInfoProvider.generateIssueReport(completion:) in LoopKit/LoopKitUI/SupportUI.swift
openURL(url:),SupportUIDelegate.openURL(url:) in LoopKit/LoopKitUI/SupportUI.swift
configurationMenuItems(),SupportUI.configurationMenuItems() in LoopKit/LoopKitUI/SupportUI.swift
checkVersion(bundleIdentifier:currentVersion:),SupportUI.checkVersion(bundleIdentifier:currentVersion:) in LoopKit/LoopKitUI/SupportUI.swift
softwareUpdateView(bundleIdentifier:currentVersion:guidanceColors:openAppStore:),SupportUI.softwareUpdateView(bundleIdentifier:currentVersion:guidanceColors:openAppStore:) in LoopKit/LoopKitUI/SupportUI.swift
getScenarios(from:),SupportUI.getScenarios(from:) in LoopKit/LoopKitUI/SupportUI.swift
loopWillReset(),SupportUI.loopWillReset() in LoopKit/LoopKitUI/SupportUI.swift
loopDidReset(),SupportUI.loopDidReset() in LoopKit/LoopKitUI/SupportUI.swift
text(for:),TimePicker.text(for:) in LoopKit/LoopKitUI/Views/CardList/TimePicker.swift
instantiate(),ReservoirVolumeHUDView.instantiate() in LoopKit/LoopKitUI/Views/ReservoirVolumeHUDView.swift
awakeFromNib(),ReservoirVolumeHUDView.awakeFromNib() in LoopKit/LoopKitUI/Views/ReservoirVolumeHUDView.swift
levelDidChange(),ReservoirVolumeHUDView.levelDidChange() in LoopKit/LoopKitUI/Views/ReservoirVolumeHUDView.swift
setReservoirVolume(volume:at:),ReservoirVolumeHUDView.setReservoirVolume(volume:at:) in LoopKit/LoopKitUI/Views/ReservoirVolumeHUDView.swift
tintColorDidChange(),ReservoirVolumeHUDView.tintColorDidChange() in LoopKit/LoopKitUI/Views/ReservoirVolumeHUDView.swift
emojiInputControllerDidAdvanceToStandardInputMode(_:),EmojiTextFieldViewModel.emojiInputControllerDidAdvanceToStandardInputMode(_:) in LoopKit/LoopKitUI/CarbKit/RowEmojiTextField.swift
emojiInputControllerDidSelectItemInSection(_:),EmojiTextFieldViewModel.emojiInputControllerDidSelectItemInSection(_:) in LoopKit/LoopKitUI/CarbKit/RowEmojiTextField.swift
startSaving(),DeliveryLimitsEditor.startSaving() in LoopKit/LoopKitUI/Views/Settings Editors/DeliveryLimitsEditor.swift
synchronizeDeliveryLimits(_:_:),DeliveryLimitsEditor.synchronizeDeliveryLimits(_:_:) in LoopKit/LoopKitUI/Views/Settings Editors/DeliveryLimitsEditor.swift
actuallySave(_:),DeliveryLimitsEditor.actuallySave(_:) in LoopKit/LoopKitUI/Views/Settings Editors/DeliveryLimitsEditor.swift
monitorSavingMechanism(savingMechanism:),DeliveryLimitsEditor.monitorSavingMechanism(savingMechanism:) in LoopKit/LoopKitUI/Views/Settings Editors/DeliveryLimitsEditor.swift
alert(for:),DeliveryLimitsEditor.alert(for:) in LoopKit/LoopKitUI/Views/Settings Editors/DeliveryLimitsEditor.swift
updateQuantity(with:),CarbQuantityRow.updateQuantity(with:) in LoopKit/LoopKitUI/CarbKit/CarbQuantityRow.swift
updateCarbInput(with:),CarbQuantityRow.updateCarbInput(with:) in LoopKit/LoopKitUI/CarbKit/CarbQuantityRow.swift
rowTapped(),CarbQuantityRow.rowTapped() in LoopKit/LoopKitUI/CarbKit/CarbQuantityRow.swift
singularWarningTitle(for:),BasalRateGuardrailWarning.singularWarningTitle(for:) in LoopKit/LoopKitUI/Views/Settings Editors/BasalRateScheduleEditor.swift
setUp(),SwitchTableViewCell.setUp() in LoopKit/LoopKitUI/Views/SwitchTableViewCell.swift
layoutSubviews(),SwitchTableViewCell.layoutSubviews() in LoopKit/LoopKitUI/Views/SwitchTableViewCell.swift
prepareForReuse(),SwitchTableViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/SwitchTableViewCell.swift
makeUIView(context:),InsulinModelChartView.makeUIView(context:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelChartView.swift
updateUIView(_:context:),InsulinModelChartView.updateUIView(_:context:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelChartView.swift
updateEndDate(_:),InsulinModelChart.updateEndDate(_:) in LoopKit/LoopKitUI/Charts/InsulinModelChart.swift
layoutSubviews(),ChartContainerView.layoutSubviews() in LoopKit/LoopKitUI/Views/ChartContainerView.swift
reloadChart(),ChartContainerView.reloadChart() in LoopKit/LoopKitUI/Views/ChartContainerView.swift
path(in:),RoundedCorners.path(in:) in LoopKit/LoopKitUI/Views/RoundedCorners.swift
updateDateLabel(),DateAndDurationTableViewCell.updateDateLabel() in LoopKit/LoopKitUI/Views/DateAndDurationTableViewCell.swift
dateChanged(_:),DateAndDurationTableViewCell.dateChanged(_:) in LoopKit/LoopKitUI/Views/DateAndDurationTableViewCell.swift
checkButtonsEnabled(),DatePickerRow.checkButtonsEnabled() in LoopKit/LoopKitUI/CarbKit/DatePickerRow.swift
decrementTime(),DatePickerRow.decrementTime() in LoopKit/LoopKitUI/CarbKit/DatePickerRow.swift
incrementTime(),DatePickerRow.incrementTime() in LoopKit/LoopKitUI/CarbKit/DatePickerRow.swift
validateDate(_:),DatePickerRow.validateDate(_:) in LoopKit/LoopKitUI/CarbKit/DatePickerRow.swift
dateString(),DatePickerRow.dateString() in LoopKit/LoopKitUI/CarbKit/DatePickerRow.swift
rowTapped(),DatePickerRow.rowTapped() in LoopKit/LoopKitUI/CarbKit/DatePickerRow.swift
awakeFromNib(),CustomOverrideCollectionViewCell.awakeFromNib() in LoopKit/LoopKitUI/Views/CustomOverrideCollectionViewCell.swift
prepareForReuse(),CustomOverrideCollectionViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/CustomOverrideCollectionViewCell.swift
applyOverlayToFade(animated:),CustomOverrideCollectionViewCell.applyOverlayToFade(animated:) in LoopKit/LoopKitUI/Views/CustomOverrideCollectionViewCell.swift
removeOverlay(animated:),CustomOverrideCollectionViewCell.removeOverlay(animated:) in LoopKit/LoopKitUI/Views/CustomOverrideCollectionViewCell.swift
didSelectEmojiInSection(_:),FoodTypeRow.didSelectEmojiInSection(_:) in LoopKit/LoopKitUI/CarbKit/FoodTypeRow.swift
rowTapped(),FoodTypeRow.rowTapped() in LoopKit/LoopKitUI/CarbKit/FoodTypeRow.swift
textFieldDidEndEditing(_:),DecimalTextFieldTableViewCell.textFieldDidEndEditing(_:) in LoopKit/LoopKitUI/Views/DecimalTextFieldTableViewCell.swift
updateSelectionState(),EmojiInputCell.updateSelectionState() in LoopKit/LoopKitUI/Views/EmojiInputCell.swift
awakeFromNib(),EmojiInputCell.awakeFromNib() in LoopKit/LoopKitUI/Views/EmojiInputCell.swift
glucoseRangeCategory(for:),CGMStatusIndicator.glucoseRangeCategory(for:) in LoopKit/LoopKitUI/CGMManagerUI.swift
cgmManagerOnboarding(didCreateCGMManager:),CGMManagerOnboardingDelegate.cgmManagerOnboarding(didCreateCGMManager:) in LoopKit/LoopKitUI/CGMManagerUI.swift
cgmManagerOnboarding(didOnboardCGMManager:),CGMManagerOnboardingDelegate.cgmManagerOnboarding(didOnboardCGMManager:) in LoopKit/LoopKitUI/CGMManagerUI.swift
setupViewController(bluetoothProvider:displayGlucosePreference:colorPalette:allowDebugFeatures:prefersToSkipUserInteraction:),CGMManagerUI.setupViewController(bluetoothProvider:displayGlucosePreference:colorPalette:allowDebugFeatures:prefersToSkipUserInteraction:) in LoopKit/LoopKitUI/CGMManagerUI.swift
settingsViewController(bluetoothProvider:displayGlucosePreference:colorPalette:allowDebugFeatures:),CGMManagerUI.settingsViewController(bluetoothProvider:displayGlucosePreference:colorPalette:allowDebugFeatures:) in LoopKit/LoopKitUI/CGMManagerUI.swift
isEditing(_:),ScheduleEditor.isEditing(_:) in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
isTimeSelectable(_:at:),ScheduleEditor.isTimeSelectable(_:at:) in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
startSaving(),ScheduleEditor.startSaving() in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
continueSaving(),ScheduleEditor.continueSaving() in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
alert(for:),ScheduleEditor.alert(for:) in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
getNotificationAuthorization(_:),NotificationAuthorizationProvider.getNotificationAuthorization(_:) in LoopKit/LoopKitUI/OnboardingUI.swift
authorizeNotification(_:),NotificationAuthorizationProvider.authorizeNotification(_:) in LoopKit/LoopKitUI/OnboardingUI.swift
getHealthStoreAuthorization(_:),HealthStoreAuthorizationProvider.getHealthStoreAuthorization(_:) in LoopKit/LoopKitUI/OnboardingUI.swift
authorizeHealthStore(_:),HealthStoreAuthorizationProvider.authorizeHealthStore(_:) in LoopKit/LoopKitUI/OnboardingUI.swift
imageForCGMManager(withIdentifier:),CGMManagerProvider.imageForCGMManager(withIdentifier:) in LoopKit/LoopKitUI/OnboardingUI.swift
onboardCGMManager(withIdentifier:prefersToSkipUserInteraction:),CGMManagerProvider.onboardCGMManager(withIdentifier:prefersToSkipUserInteraction:) in LoopKit/LoopKitUI/OnboardingUI.swift
imageForPumpManager(withIdentifier:),PumpManagerProvider.imageForPumpManager(withIdentifier:) in LoopKit/LoopKitUI/OnboardingUI.swift
supportedIncrementsForPumpManager(withIdentifier:),PumpManagerProvider.supportedIncrementsForPumpManager(withIdentifier:) in LoopKit/LoopKitUI/OnboardingUI.swift
onboardPumpManager(withIdentifier:initialSettings:prefersToSkipUserInteraction:),PumpManagerProvider.onboardPumpManager(withIdentifier:initialSettings:prefersToSkipUserInteraction:) in LoopKit/LoopKitUI/OnboardingUI.swift
pumpManagerOnboarding(didCreatePumpManager:),PumpManagerOnboardingDelegate.pumpManagerOnboarding(didCreatePumpManager:) in LoopKit/LoopKitUI/PumpManagerUI.swift
pumpManagerOnboarding(didOnboardPumpManager:),PumpManagerOnboardingDelegate.pumpManagerOnboarding(didOnboardPumpManager:) in LoopKit/LoopKitUI/PumpManagerUI.swift
pumpManagerOnboarding(didPauseOnboarding:),PumpManagerOnboardingDelegate.pumpManagerOnboarding(didPauseOnboarding:) in LoopKit/LoopKitUI/PumpManagerUI.swift
setupViewController(initialSettings:bluetoothProvider:colorPalette:allowDebugFeatures:prefersToSkipUserInteraction:allowedInsulinTypes:),PumpManagerUI.setupViewController(initialSettings:bluetoothProvider:colorPalette:allowDebugFeatures:prefersToSkipUserInteraction:allowedInsulinTypes:) in LoopKit/LoopKitUI/PumpManagerUI.swift
settingsViewController(bluetoothProvider:colorPalette:allowDebugFeatures:allowedInsulinTypes:),PumpManagerUI.settingsViewController(bluetoothProvider:colorPalette:allowDebugFeatures:allowedInsulinTypes:) in LoopKit/LoopKitUI/PumpManagerUI.swift
deliveryUncertaintyRecoveryViewController(colorPalette:allowDebugFeatures:),PumpManagerUI.deliveryUncertaintyRecoveryViewController(colorPalette:allowDebugFeatures:) in LoopKit/LoopKitUI/PumpManagerUI.swift
hudProvider(bluetoothProvider:colorPalette:allowedInsulinTypes:),PumpManagerUI.hudProvider(bluetoothProvider:colorPalette:allowedInsulinTypes:) in LoopKit/LoopKitUI/PumpManagerUI.swift
createHUDView(rawValue:),PumpManagerUI.createHUDView(rawValue:) in LoopKit/LoopKitUI/PumpManagerUI.swift
createHUDView(),HUDProvider.createHUDView() in LoopKit/LoopKitUI/HUDProvider.swift
didTapOnHUDView(_:allowDebugFeatures:),HUDProvider.didTapOnHUDView(_:allowDebugFeatures:) in LoopKit/LoopKitUI/HUDProvider.swift
onboardService(withIdentifier:),ServiceProvider.onboardService(withIdentifier:) in LoopKit/LoopKitUI/OnboardingUI.swift
onboardingDidUpdateState(_:),OnboardingDelegate.onboardingDidUpdateState(_:) in LoopKit/LoopKitUI/OnboardingUI.swift
onboarding(_:hasNewTherapySettings:),OnboardingDelegate.onboarding(_:hasNewTherapySettings:) in LoopKit/LoopKitUI/OnboardingUI.swift
onboarding(_:hasNewDosingEnabled:),OnboardingDelegate.onboarding(_:hasNewDosingEnabled:) in LoopKit/LoopKitUI/OnboardingUI.swift
onboardingDidSuspend(_:),OnboardingDelegate.onboardingDidSuspend(_:) in LoopKit/LoopKitUI/OnboardingUI.swift
createOnboarding(),OnboardingUI.createOnboarding() in LoopKit/LoopKitUI/OnboardingUI.swift
onboardingViewController(onboardingProvider:displayGlucosePreference:colorPalette:),OnboardingUI.onboardingViewController(onboardingProvider:displayGlucosePreference:colorPalette:) in LoopKit/LoopKitUI/OnboardingUI.swift
setUp(),SegmentedControlTableViewCell.setUp() in LoopKit/LoopKitUI/Views/SegmentedControlTableViewCell.swift
layoutSubviews(),SegmentedControlTableViewCell.layoutSubviews() in LoopKit/LoopKitUI/Views/SegmentedControlTableViewCell.swift
prepareForReuse(),SegmentedControlTableViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/SegmentedControlTableViewCell.swift
onSelection(_:),SegmentedControlTableViewCell.onSelection(_:) in LoopKit/LoopKitUI/Views/SegmentedControlTableViewCell.swift
handleSelection(),SegmentedControlTableViewCell.handleSelection() in LoopKit/LoopKitUI/Views/SegmentedControlTableViewCell.swift
prepareForReuse(),ChartTableViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
reloadChart(),ChartTableViewCell.reloadChart() in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
setChartGenerator(generator:),ChartTableViewCell.setChartGenerator(generator:) in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
setTitleLabelText(label:),ChartTableViewCell.setTitleLabelText(label:) in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
removeTitleLabelText(),ChartTableViewCell.removeTitleLabelText() in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
setSubtitleLabel(label:),ChartTableViewCell.setSubtitleLabel(label:) in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
removeSubtitleLabelText(),ChartTableViewCell.removeSubtitleLabelText() in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
setTitleTextColor(color:),ChartTableViewCell.setTitleTextColor(color:) in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
setSubtitleTextColor(color:),ChartTableViewCell.setSubtitleTextColor(color:) in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
setAlpha(alpha:),ChartTableViewCell.setAlpha(alpha:) in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
awakeFromNib(),OverrideHistoryCollectionViewCell.awakeFromNib() in LoopKit/LoopKitUI/Views/OverrideHistoryCollectionViewCell.swift
prepareForReuse(),OverrideHistoryCollectionViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/OverrideHistoryCollectionViewCell.swift
applyOverlayToFade(animated:),OverrideHistoryCollectionViewCell.applyOverlayToFade(animated:) in LoopKit/LoopKitUI/Views/OverrideHistoryCollectionViewCell.swift
removeOverlay(animated:),OverrideHistoryCollectionViewCell.removeOverlay(animated:) in LoopKit/LoopKitUI/Views/OverrideHistoryCollectionViewCell.swift
overridePresetCollectionViewCellDidScheduleOverride(_:),OverridePresetCollectionViewCellDelegate.overridePresetCollectionViewCellDidScheduleOverride(_:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
overridePresetCollectionViewCellDidPerformFirstDeletionStep(_:),OverridePresetCollectionViewCellDelegate.overridePresetCollectionViewCellDidPerformFirstDeletionStep(_:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
overridePresetCollectionViewCellDidDeletePreset(_:),OverridePresetCollectionViewCellDelegate.overridePresetCollectionViewCellDidDeletePreset(_:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
awakeFromNib(),OverridePresetCollectionViewCell.awakeFromNib() in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
prepareForReuse(),OverridePresetCollectionViewCell.prepareForReuse() in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
configureForEditing(animated:),OverridePresetCollectionViewCell.configureForEditing(animated:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
configureForStandard(animated:),OverridePresetCollectionViewCell.configureForStandard(animated:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
applyOverlayToFade(animated:),OverridePresetCollectionViewCell.applyOverlayToFade(animated:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
removeOverlay(animated:),OverridePresetCollectionViewCell.removeOverlay(animated:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
scheduleButtonTapped(),OverridePresetCollectionViewCell.scheduleButtonTapped() in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
deleteButtonTapped(_:),OverridePresetCollectionViewCell.deleteButtonTapped(_:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
makeUIView(context:),DurationPicker.makeUIView(context:) in LoopKit/LoopKitUI/Views/DurationPicker.swift
updateUIView(_:context:),DurationPicker.updateUIView(_:context:) in LoopKit/LoopKitUI/Views/DurationPicker.swift
makeCoordinator(),DurationPicker.makeCoordinator() in LoopKit/LoopKitUI/Views/DurationPicker.swift
pickerValueChanged(_:),Coordinator.pickerValueChanged(_:) in LoopKit/LoopKitUI/Views/DurationPicker.swift
overrideSelectionViewController(_:didUpdatePresets:),OverrideSelectionViewControllerDelegate.overrideSelectionViewController(_:didUpdatePresets:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
overrideSelectionViewController(_:didConfirmPreset:),OverrideSelectionViewControllerDelegate.overrideSelectionViewController(_:didConfirmPreset:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
overrideSelectionViewController(_:didConfirmOverride:),OverrideSelectionViewControllerDelegate.overrideSelectionViewController(_:didConfirmOverride:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
overrideSelectionViewController(_:didCancelOverride:),OverrideSelectionViewControllerDelegate.overrideSelectionViewController(_:didCancelOverride:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
viewDidLoad(),OverrideSelectionViewController.viewDidLoad() in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
cancel(),OverrideSelectionViewController.cancel() in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
section(for:),OverrideSelectionViewController.section(for:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
cellContent(for:),OverrideSelectionViewController.cellContent(for:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
indexPathOfCustomOverride(),OverrideSelectionViewController.indexPathOfCustomOverride() in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
numberOfSections(in:),OverrideSelectionViewController.numberOfSections(in:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:numberOfItemsInSection:),OverrideSelectionViewController.collectionView(_:numberOfItemsInSection:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:viewForSupplementaryElementOfKind:at:),OverrideSelectionViewController.collectionView(_:viewForSupplementaryElementOfKind:at:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:layout:referenceSizeForHeaderInSection:),OverrideSelectionViewController.collectionView(_:layout:referenceSizeForHeaderInSection:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:cellForItemAt:),OverrideSelectionViewController.collectionView(_:cellForItemAt:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
configure(_:with:duration:),OverrideSelectionViewController.configure(_:with:duration:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
makeTargetRangeText(from:),OverrideSelectionViewController.makeTargetRangeText(from:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:didSelectItemAt:),OverrideSelectionViewController.collectionView(_:didSelectItemAt:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
addNewPreset(),OverrideSelectionViewController.addNewPreset() in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
beginEditing(),OverrideSelectionViewController.beginEditing() in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
endEditing(),OverrideSelectionViewController.endEditing() in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
configureCellsForEditingChanged(),OverrideSelectionViewController.configureCellsForEditingChanged() in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:shouldHighlightItemAt:),OverrideSelectionViewController.collectionView(_:shouldHighlightItemAt:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:canMoveItemAt:),OverrideSelectionViewController.collectionView(_:canMoveItemAt:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:moveItemAt:to:),OverrideSelectionViewController.collectionView(_:moveItemAt:to:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
collectionView(_:targetIndexPathForMoveFromItemAt:toProposedIndexPath:),OverrideSelectionViewController.collectionView(_:targetIndexPathForMoveFromItemAt:toProposedIndexPath:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
rowTapped(),TextFieldRow.rowTapped() in LoopKit/LoopKitUI/CarbKit/TextFieldRow.swift
onFinish(),SectionWithTapToEdit.onFinish() in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
preview_viewModel(),TherapySettingsView_Previews.preview_viewModel() in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
oneUnitBolusEffectPrediction(using:),InsulinModelSelection.oneUnitBolusEffectPrediction(using:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelSelection.swift
isSelected(_:),InsulinModelSelection.isSelected(_:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelSelection.swift
startSaving(),InsulinModelSelection.startSaving() in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelSelection.swift
continueSaving(),InsulinModelSelection.continueSaving() in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelSelection.swift
durationString(),AbsorptionTimePickerRow.durationString() in LoopKit/LoopKitUI/CarbKit/AbsorptionTimePickerRow.swift
buildIf(_:),CardStackBuilder.buildIf(_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:),CardStackBuilder.buildBlock(_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:),CardStackBuilder.buildBlock(_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:_:),CardStackBuilder.buildBlock(_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:_:_:),CardStackBuilder.buildBlock(_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:_:_:_:),CardStackBuilder.buildBlock(_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:_:_:_:_:),CardStackBuilder.buildBlock(_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:_:_:_:_:_:),CardStackBuilder.buildBlock(_:_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:_:_:_:_:_:_:),CardStackBuilder.buildBlock(_:_:_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:_:_:_:_:_:_:_:),CardStackBuilder.buildBlock(_:_:_:_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
buildBlock(_:_:_:_:_:_:_:_:_:_:),CardStackBuilder.buildBlock(_:_:_:_:_:_:_:_:_:_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
toCardStack(_:),CardStackBuilder.toCardStack(_:) in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
dismiss(),VideoView.dismiss() in LoopKit/LoopKitUI/Views/VideoView.swift
destroy(),PlayerHolder.destroy() in LoopKit/LoopKitUI/Views/VideoView.swift
player(for:autoPlay:),PlayerHolder.player(for:autoPlay:) in LoopKit/LoopKitUI/Views/VideoView.swift
autoPlay(_:),VideoPlayView.autoPlay(_:) in LoopKit/LoopKitUI/Views/VideoPlayView.swift
overrideMuteSwitch(_:),VideoPlayView.overrideMuteSwitch(_:) in LoopKit/LoopKitUI/Views/VideoPlayView.swift
includeThumbnailBorder(_:),VideoPlayView.includeThumbnailBorder(_:) in LoopKit/LoopKitUI/Views/VideoPlayView.swift
centerThumbnail(_:),VideoPlayView.centerThumbnail(_:) in LoopKit/LoopKitUI/Views/VideoPlayView.swift
makeUIView(context:),SegmentedGaugeBar.makeUIView(context:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBar.swift
updateUIView(_:context:),SegmentedGaugeBar.updateUIView(_:context:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBar.swift
awakeFromNib(),TableViewTitleLabel.awakeFromNib() in LoopKit/LoopKitUI/Views/TableViewTitleLabel.swift
initFont(),TableViewTitleLabel.initFont() in LoopKit/LoopKitUI/Views/TableViewTitleLabel.swift
notifyComplete(),SettingsNavigationViewController.notifyComplete() in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
makeCoordinator(),RowTextField.makeCoordinator() in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
makeUIView(context:),RowTextField.makeUIView(context:) in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
updateUIView(_:context:),RowTextField.updateUIView(_:context:) in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
textChanged(_:),Coordinator.textChanged(_:) in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
textFieldDidBeginEditing(_:),Coordinator.textFieldDidBeginEditing(_:) in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
textFieldShouldEndEditing(_:),Coordinator.textFieldShouldEndEditing(_:) in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
textField(_:shouldChangeCharactersIn:replacementString:),Coordinator.textField(_:shouldChangeCharactersIn:replacementString:) in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
makeUIView(context:),DismissibleKeyboardTextField.makeUIView(context:) in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
makeDoneToolbar(for:),DismissibleKeyboardTextField.makeDoneToolbar(for:) in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
updateUIView(_:context:),DismissibleKeyboardTextField.updateUIView(_:context:) in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
makeCoordinator(),DismissibleKeyboardTextField.makeCoordinator() in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
textChanged(_:),Coordinator.textChanged(_:) in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
editingDidBegin(_:),Coordinator.editingDidBegin(_:) in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
reduce(value:nextValue:),PickerValueBoundsKey.reduce(value:nextValue:) in LoopKit/LoopKitUI/Views/QuantityPicker.swift
next(),OnboardingScreen.next() in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
viewDidLoad(),OnboardingUICoordinator.viewDidLoad() in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
viewWillAppear(_:),OnboardingUICoordinator.viewWillAppear(_:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
viewControllerForScreen(_:),OnboardingUICoordinator.viewControllerForScreen(_:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
stepFinished(),OnboardingUICoordinator.stepFinished() in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
exitOnboarding(),OnboardingUICoordinator.exitOnboarding() in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
navigate(to:),OnboardingUICoordinator.navigate(to:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
setupWithNightscout(),OnboardingUICoordinator.setupWithNightscout() in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
mockTherapySettingsAndSkipOnboarding(),OnboardingUICoordinator.mockTherapySettingsAndSkipOnboarding() in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
setupWithoutNightscout(),OnboardingUICoordinator.setupWithoutNightscout() in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
checkForAvailableSettingsImport(),OnboardingUICoordinator.checkForAvailableSettingsImport() in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
constructTherapySettingsViewModel(therapySettings:),OnboardingUICoordinator.constructTherapySettingsViewModel(therapySettings:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
createOnboarding(),LoopOnboardingUI.createOnboarding() in LoopOnboarding/LoopOnboardingKitUI/LoopOnboardingUI.swift
onboardingViewController(onboardingProvider:displayGlucosePreference:colorPalette:),LoopOnboardingUI.onboardingViewController(onboardingProvider:displayGlucosePreference:colorPalette:) in LoopOnboarding/LoopOnboardingKitUI/LoopOnboardingUI.swift
notifyDidUpdateState(),LoopOnboardingUI.notifyDidUpdateState() in LoopOnboarding/LoopOnboardingKitUI/LoopOnboardingUI.swift
notifyHasNewTherapySettings(_:),LoopOnboardingUI.notifyHasNewTherapySettings(_:) in LoopOnboarding/LoopOnboardingKitUI/LoopOnboardingUI.swift
destination(),UsageDataPrivacyPreferenceMenuItem.destination() in LoopSupport/LoopSupportKitUI/Views/UsageDataPrivacyPreferenceMenuItem.swift
choice(title:description:sharingPreference:),UsageDataPrivacyPreferenceView.choice(title:description:sharingPreference:) in LoopSupport/LoopSupportKitUI/Views/UsageDataPrivacyPreferenceView.swift
updateUsageDataPrivacyPreference(newValue:),LoopKitAnalytics.updateUsageDataPrivacyPreference(newValue:) in LoopSupport/LoopSupportKitUI/LoopKitAnalytics.swift
createClient(),LoopKitAnalytics.createClient() in LoopSupport/LoopSupportKitUI/LoopKitAnalytics.swift
recordAnalyticsEvent(_:withProperties:outOfSession:),LoopKitAnalytics.recordAnalyticsEvent(_:withProperties:outOfSession:) in LoopSupport/LoopSupportKitUI/LoopKitAnalytics.swift
recordIdentify(_:value:),LoopKitAnalytics.recordIdentify(_:value:) in LoopSupport/LoopSupportKitUI/LoopKitAnalytics.swift
recordIdentify(_:array:),LoopKitAnalytics.recordIdentify(_:array:) in LoopSupport/LoopSupportKitUI/LoopKitAnalytics.swift
checkVersion(bundleIdentifier:currentVersion:),LoopSupportUI.checkVersion(bundleIdentifier:currentVersion:) in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
softwareUpdateView(bundleIdentifier:currentVersion:guidanceColors:openAppStore:),LoopSupportUI.softwareUpdateView(bundleIdentifier:currentVersion:guidanceColors:openAppStore:) in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
getScenarios(from:),LoopSupportUI.getScenarios(from:) in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
supportMenuItem(supportInfoProvider:urlHandler:),LoopSupportUI.supportMenuItem(supportInfoProvider:urlHandler:) in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
initializationComplete(for:),LoopSupportUI.initializationComplete(for:) in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
configurationMenuItems(),LoopSupportUI.configurationMenuItems() in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
loopWillReset(),LoopSupportUI.loopWillReset() in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
loopDidReset(),LoopSupportUI.loopDidReset() in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
injectPumpEvents(_:),TestingPumpManager.injectPumpEvents(_:) in LoopKit/LoopTestingKit/TestingPumpManager.swift
acceptDefaultsAndSkipOnboarding(),TestingDeviceManager.acceptDefaultsAndSkipOnboarding() in LoopKit/LoopTestingKit/TestingDeviceManager.swift
trigger(action:),TestingDeviceManager.trigger(action:) in LoopKit/LoopTestingKit/TestingDeviceManager.swift
doseEntry(relativeTo:),DateRelativeBolusEntry.doseEntry(relativeTo:) in LoopKit/LoopTestingKit/DateRelativeBolusEntry.swift
newPumpEvent(relativeTo:),DateRelativeBolusEntry.newPumpEvent(relativeTo:) in LoopKit/LoopTestingKit/DateRelativeBolusEntry.swift
shift(by:),DateRelativeQuantity.shift(by:) in LoopKit/LoopTestingKit/DateRelativeQuantity.swift
doseEntry(relativeTo:),DateRelativeBasalEntry.doseEntry(relativeTo:) in LoopKit/LoopTestingKit/DateRelativeBasalEntry.swift
newPumpEvent(relativeTo:),DateRelativeBasalEntry.newPumpEvent(relativeTo:) in LoopKit/LoopTestingKit/DateRelativeBasalEntry.swift
instantiate(relativeTo:),TestingScenario.instantiate(relativeTo:) in LoopKit/LoopTestingKit/TestingScenario.swift
stepBackward(by:),TestingScenario.stepBackward(by:) in LoopKit/LoopTestingKit/TestingScenario.swift
stepForward(by:),TestingScenario.stepForward(by:) in LoopKit/LoopTestingKit/TestingScenario.swift
stepForward(unitsPerHour:duration:dateOffset:loopInterval:),TestingScenario.stepForward(unitsPerHour:duration:dateOffset:loopInterval:) in LoopKit/LoopTestingKit/TestingScenario.swift
shift(by:),TestingScenario.shift(by:) in LoopKit/LoopTestingKit/TestingScenario.swift
newCarbEntry(relativeTo:),DateRelativeCarbEntry.newCarbEntry(relativeTo:) in LoopKit/LoopTestingKit/DateRelativeCarbEntry.swift
enteredAt(relativeTo:),DateRelativeCarbEntry.enteredAt(relativeTo:) in LoopKit/LoopTestingKit/DateRelativeCarbEntry.swift
newGlucoseSample(relativeTo:),DateRelativeGlucoseSample.newGlucoseSample(relativeTo:) in LoopKit/LoopTestingKit/DateRelativeGlucoseSample.swift
injectGlucoseSamples(_:futureSamples:),TestingCGMManager.injectGlucoseSamples(_:futureSamples:) in LoopKit/LoopTestingKit/TestingCGMManager.swift
nib(),NibLoadable.nib() in Loop/LoopUI/Extensions/NibLoadable.swift
setup(),CGMStatusHUDView.setup() in Loop/LoopUI/Views/CGMStatusHUDView.swift
tintColorDidChange(),CGMStatusHUDView.tintColorDidChange() in Loop/LoopUI/Views/CGMStatusHUDView.swift
presentStatusHighlight(_:),CGMStatusHUDView.presentStatusHighlight(_:) in Loop/LoopUI/Views/CGMStatusHUDView.swift
presentStatusHighlight(),CGMStatusHUDView.presentStatusHighlight() in Loop/LoopUI/Views/CGMStatusHUDView.swift
dismissStatusHighlight(),CGMStatusHUDView.dismissStatusHighlight() in Loop/LoopUI/Views/CGMStatusHUDView.swift
setGlucoseQuantity(_:at:unit:staleGlucoseAge:glucoseDisplay:wasUserEntered:isDisplayOnly:),CGMStatusHUDView.setGlucoseQuantity(_:at:unit:staleGlucoseAge:glucoseDisplay:wasUserEntered:isDisplayOnly:) in Loop/LoopUI/Views/CGMStatusHUDView.swift
updateDisplay(),CGMStatusHUDView.updateDisplay() in Loop/LoopUI/Views/CGMStatusHUDView.swift
updateTrendIcon(),CGMStatusHUDView.updateTrendIcon() in Loop/LoopUI/Views/CGMStatusHUDView.swift
resetProgress(),DeviceStatusHUDView.resetProgress() in Loop/LoopUI/Views/DeviceStatusHUDView.swift
setup(),DeviceStatusHUDView.setup() in Loop/LoopUI/Views/DeviceStatusHUDView.swift
presentStatusHighlight(_:),DeviceStatusHUDView.presentStatusHighlight(_:) in Loop/LoopUI/Views/DeviceStatusHUDView.swift
presentStatusHighlight(withMessage:image:color:),DeviceStatusHUDView.presentStatusHighlight(withMessage:image:color:) in Loop/LoopUI/Views/DeviceStatusHUDView.swift
presentStatusHighlight(),DeviceStatusHUDView.presentStatusHighlight() in Loop/LoopUI/Views/DeviceStatusHUDView.swift
dismissStatusHighlight(),DeviceStatusHUDView.dismissStatusHighlight() in Loop/LoopUI/Views/DeviceStatusHUDView.swift
presentStatusBadge(_:),DeviceStatusHUDView.presentStatusBadge(_:) in Loop/LoopUI/Views/DeviceStatusHUDView.swift
presentStatusBadge(withIcon:color:),DeviceStatusHUDView.presentStatusBadge(withIcon:color:) in Loop/LoopUI/Views/DeviceStatusHUDView.swift
presentStatusBadge(),DeviceStatusHUDView.presentStatusBadge() in Loop/LoopUI/Views/DeviceStatusHUDView.swift
dismissStatusBadge(),DeviceStatusHUDView.dismissStatusBadge() in Loop/LoopUI/Views/DeviceStatusHUDView.swift
setBadgeIcon(_:),StatusBadgeHUDView.setBadgeIcon(_:) in Loop/LoopUI/Views/StatusBadgeHUDView.swift
tintColorDidChange(),StatusBadgeHUDView.tintColorDidChange() in Loop/LoopUI/Views/StatusBadgeHUDView.swift
setup(),StatusHighlightHUDView.setup() in Loop/LoopUI/Views/StatusHighlightHUDView.swift
setIconPosition(_:),StatusHighlightHUDView.setIconPosition(_:) in Loop/LoopUI/Views/StatusHighlightHUDView.swift
tintColorDidChange(),GlucoseTrendHUDView.tintColorDidChange() in Loop/LoopUI/Views/GlucoseTrendHUDView.swift
setIcon(_:),GlucoseTrendHUDView.setIcon(_:) in Loop/LoopUI/Views/GlucoseTrendHUDView.swift
tintColorDidChange(),GlucoseValueHUDView.tintColorDidChange() in Loop/LoopUI/Views/GlucoseValueHUDView.swift
startStalenessTimerIfNeeded(),CGMStatusHUDViewModel.startStalenessTimerIfNeeded() in Loop/LoopUI/ViewModel/CGMStatusHUDViewModel.swift
setGlucoseQuantity(_:at:unit:staleGlucoseAge:glucoseDisplay:wasUserEntered:isDisplayOnly:),CGMStatusHUDViewModel.setGlucoseQuantity(_:at:unit:staleGlucoseAge:glucoseDisplay:wasUserEntered:isDisplayOnly:) in Loop/LoopUI/ViewModel/CGMStatusHUDViewModel.swift
displayStaleGlucoseValue(),CGMStatusHUDViewModel.displayStaleGlucoseValue() in Loop/LoopUI/ViewModel/CGMStatusHUDViewModel.swift
setManualGlucoseTrendIconOverride(),CGMStatusHUDViewModel.setManualGlucoseTrendIconOverride() in Loop/LoopUI/ViewModel/CGMStatusHUDViewModel.swift
setup(),HUDView.setup() in Loop/LoopUI/Views/HUDView.swift
removePumpManagerProvidedViews(),HUDView.removePumpManagerProvidedViews() in Loop/LoopUI/Views/HUDView.swift
addHUDView(_:),HUDView.addHUDView(_:) in Loop/LoopUI/Views/HUDView.swift
tintColorDidChange(),BasalRateHUDView.tintColorDidChange() in Loop/LoopUI/Views/BasalRateHUDView.swift
setNetBasalRate(_:percent:at:),BasalRateHUDView.setNetBasalRate(_:percent:at:) in Loop/LoopUI/Views/BasalRateHUDView.swift
layoutSubviews(),BasalStateView.layoutSubviews() in Loop/LoopUI/Views/BasalStateView.swift
tintColorDidChange(),BasalStateView.tintColorDidChange() in Loop/LoopUI/Views/BasalStateView.swift
updateTintColor(),BasalStateView.updateTintColor() in Loop/LoopUI/Views/BasalStateView.swift
drawPath(),BasalStateView.drawPath() in Loop/LoopUI/Views/BasalStateView.swift
animateToPath(_:),BasalStateView.animateToPath(_:) in Loop/LoopUI/Views/BasalStateView.swift
startStalenessTimerIfNeeded(),GlucoseHUDView.startStalenessTimerIfNeeded() in Loop/LoopUI/Views/GlucoseHUDView.swift
tintColorDidChange(),GlucoseHUDView.tintColorDidChange() in Loop/LoopUI/Views/GlucoseHUDView.swift
stateColorsDidUpdate(),GlucoseHUDView.stateColorsDidUpdate() in Loop/LoopUI/Views/GlucoseHUDView.swift
updateColor(),GlucoseHUDView.updateColor() in Loop/LoopUI/Views/GlucoseHUDView.swift
setGlucoseQuantity(_:at:unit:staleGlucoseAge:sensor:),GlucoseHUDView.setGlucoseQuantity(_:at:unit:staleGlucoseAge:sensor:) in Loop/LoopUI/Views/GlucoseHUDView.swift
awakeFromNib(),LoopCompletionHUDView.awakeFromNib() in Loop/LoopUI/Views/LoopCompletionHUDView.swift
assertTimer(_:),LoopCompletionHUDView.assertTimer(_:) in Loop/LoopUI/Views/LoopCompletionHUDView.swift
stateColorsDidUpdate(),LoopCompletionHUDView.stateColorsDidUpdate() in Loop/LoopUI/Views/LoopCompletionHUDView.swift
updateTintColor(),LoopCompletionHUDView.updateTintColor() in Loop/LoopUI/Views/LoopCompletionHUDView.swift
initTimer(_:),LoopCompletionHUDView.initTimer(_:) in Loop/LoopUI/Views/LoopCompletionHUDView.swift
updateDisplay(_:),LoopCompletionHUDView.updateDisplay(_:) in Loop/LoopUI/Views/LoopCompletionHUDView.swift
didMoveToWindow(),LoopCompletionHUDView.didMoveToWindow() in Loop/LoopUI/Views/LoopCompletionHUDView.swift
tintColorDidChange(),LoopStateView.tintColorDidChange() in Loop/LoopUI/Views/LoopStateView.swift
updateTintColor(),LoopStateView.updateTintColor() in Loop/LoopUI/Views/LoopStateView.swift
layoutSubviews(),LoopStateView.layoutSubviews() in Loop/LoopUI/Views/LoopStateView.swift
drawPath(lineWidth:),LoopStateView.drawPath(lineWidth:) in Loop/LoopUI/Views/LoopStateView.swift
setup(),StatusBarHUDView.setup() in Loop/LoopUI/Views/StatusBarHUDView.swift
removePumpManagerProvidedView(),StatusBarHUDView.removePumpManagerProvidedView() in Loop/LoopUI/Views/StatusBarHUDView.swift
addPumpManagerProvidedHUDView(_:),StatusBarHUDView.addPumpManagerProvidedHUDView(_:) in Loop/LoopUI/Views/StatusBarHUDView.swift
setup(),PumpStatusHUDView.setup() in Loop/LoopUI/Views/PumpStatusHUDView.swift
tintColorDidChange(),PumpStatusHUDView.tintColorDidChange() in Loop/LoopUI/Views/PumpStatusHUDView.swift
presentStatusHighlight(),PumpStatusHUDView.presentStatusHighlight() in Loop/LoopUI/Views/PumpStatusHUDView.swift
dismissStatusHighlight(),PumpStatusHUDView.dismissStatusHighlight() in Loop/LoopUI/Views/PumpStatusHUDView.swift
removePumpManagerProvidedHUD(),PumpStatusHUDView.removePumpManagerProvidedHUD() in Loop/LoopUI/Views/PumpStatusHUDView.swift
addPumpManagerProvidedHUDView(_:),PumpStatusHUDView.addPumpManagerProvidedHUDView(_:) in Loop/LoopUI/Views/PumpStatusHUDView.swift
bolusDeliveryTime(units:),PumpModel.bolusDeliveryTime(units:) in MinimedKit/MinimedKit/Models/PumpModel.swift
estimateTempBasalProgress(unitsPerHour:duration:elapsed:),PumpModel.estimateTempBasalProgress(unitsPerHour:duration:elapsed:) in MinimedKit/MinimedKit/Models/PumpModel.swift
estimateBolusProgress(elapsed:programmedUnits:),PumpModel.estimateBolusProgress(elapsed:programmedUnits:) in MinimedKit/MinimedKit/Models/PumpModel.swift
rateAt(offset:),BasalSchedule.rateAt(offset:) in MinimedKit/MinimedKit/Messages/Models/BasalSchedule.swift
currentRate(using:at:),BasalSchedule.currentRate(using:at:) in MinimedKit/MinimedKit/Messages/Models/BasalSchedule.swift
lookup(offset:),BasalSchedule.lookup(offset:) in MinimedKit/MinimedKit/Messages/Models/BasalSchedule.swift
cancel(at:pumpModel:),UnfinalizedDose.cancel(at:pumpModel:) in MinimedKit/MinimedKit/PumpManager/UnfinalizedDose.swift
reconcile(with:),UnfinalizedDose.reconcile(with:) in MinimedKit/MinimedKit/PumpManager/UnfinalizedDose.swift
chargeRemaining(at:),BatteryChemistryType.chargeRemaining(at:) in MinimedKit/MinimedKit/Models/BatteryChemistryType.swift
didUpdatePumpManagerState(_:),MinimedPumpManagerStateObserver.didUpdatePumpManagerState(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
setState(_:),MinimedPumpManager.setState(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
mutateState(_:),MinimedPumpManager.mutateState(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
setStateWithResult(_:),MinimedPumpManager.setStateWithResult(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
notifyStatusObservers(oldStatus:),MinimedPumpManager.notifyStatusObservers(oldStatus:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
logDeviceCommunication(_:type:),MinimedPumpManager.logDeviceCommunication(_:type:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
device(_:didReceivePacket:),MinimedPumpManager.device(_:didReceivePacket:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
deviceTimerDidTick(_:),MinimedPumpManager.deviceTimerDidTick(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
device(_:didUpdateBattery:),MinimedPumpManager.device(_:didUpdateBattery:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
runSession(withName:using:_:),PumpOps.runSession(withName:using:_:) in MinimedKit/MinimedKit/PumpManager/PumpOps.swift
pumpOpsSession(_:didChange:),PumpOpsSessionDelegate.pumpOpsSession(_:didChange:) in MinimedKit/MinimedKit/PumpManager/PumpOpsSession.swift
pumpOpsSessionDidChangeRadioConfig(_:),PumpOpsSessionDelegate.pumpOpsSessionDidChangeRadioConfig(_:) in MinimedKit/MinimedKit/PumpManager/PumpOpsSession.swift
resetRadioConfig(),PumpMessageSender.resetRadioConfig() in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
updateRegister(_:value:),PumpMessageSender.updateRegister(_:value:) in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
setBaseFrequency(_:),PumpMessageSender.setBaseFrequency(_:) in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
listen(onChannel:timeout:),PumpMessageSender.listen(onChannel:timeout:) in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
send(_:),PumpMessageSender.send(_:) in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
getRileyLinkStatistics(),PumpMessageSender.getRileyLinkStatistics() in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
getResponse(to:responseType:repeatCount:timeout:retryCount:),PumpMessageSender.getResponse(to:responseType:repeatCount:timeout:retryCount:) in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
sendAndListen(_:repeatCount:timeout:retryCount:),PumpMessageSender.sendAndListen(_:repeatCount:timeout:retryCount:) in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
sendAndListenForPacket(_:repeatCount:timeout:retryCount:),PumpMessageSender.sendAndListenForPacket(_:repeatCount:timeout:retryCount:) in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
listenForPacket(onChannel:timeout:),PumpMessageSender.listenForPacket(onChannel:timeout:) in MinimedKit/MinimedKit/PumpManager/PumpMessageSender.swift
willSend(_:),CommsLogger.willSend(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
didReceive(_:),CommsLogger.didReceive(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
didError(_:),CommsLogger.didError(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
pumpOps(_:didChange:),PumpOpsDelegate.pumpOps(_:didChange:) in MinimedKit/MinimedKit/PumpManager/PumpOps.swift
isForwardOffsetReference(),SensorTimestampGlucoseEvent.isForwardOffsetReference() in MinimedKit/MinimedKit/GlucoseEvents/SensorTimestampGlucoseEvent.swift
timerParameters(),MinimedDoseProgressEstimator.timerParameters() in MinimedKit/MinimedKit/PumpManager/MinimedDoseProgressEstimator.swift
isMutable(atDate:forPump:),BolusNormalPumpEvent.isMutable(atDate:forPump:) in MinimedKit/MinimedKit/PumpEvents/BolusNormalPumpEvent.swift
calculateLength(_:),BolusNormalPumpEvent.calculateLength(_:) in MinimedKit/MinimedKit/PumpEvents/BolusNormalPumpEvent.swift
getUnitsRemaining(insulinBitPackingScale:),ReadRemainingInsulinMessageBody.getUnitsRemaining(insulinBitPackingScale:) in MinimedKit/MinimedKit/Messages/ReadRemainingInsulinMessageBody.swift
encodedData(),MinimedPacket.encodedData() in MinimedKit/MinimedKit/Radio/MinimedPacket.swift
runSession(withName:using:_:),MinimedPumpOps.runSession(withName:using:_:) in MinimedKit/MinimedKit/PumpManager/PumpOps.swift
configureDevice(_:with:),MinimedPumpOps.configureDevice(_:with:) in MinimedKit/MinimedKit/PumpManager/PumpOps.swift
deviceRadioConfigDidChange(_:),MinimedPumpOps.deviceRadioConfigDidChange(_:) in MinimedKit/MinimedKit/PumpManager/PumpOps.swift
resetRadioConfig(),MinimedPumpMessageSender.resetRadioConfig() in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
updateRegister(_:value:),MinimedPumpMessageSender.updateRegister(_:value:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
setBaseFrequency(_:),MinimedPumpMessageSender.setBaseFrequency(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
listen(onChannel:timeout:),MinimedPumpMessageSender.listen(onChannel:timeout:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
getRileyLinkStatistics(),MinimedPumpMessageSender.getRileyLinkStatistics() in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
send(_:),MinimedPumpMessageSender.send(_:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
getResponse(to:responseType:repeatCount:timeout:retryCount:),MinimedPumpMessageSender.getResponse(to:responseType:repeatCount:timeout:retryCount:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
sendAndListen(_:repeatCount:timeout:retryCount:),MinimedPumpMessageSender.sendAndListen(_:repeatCount:timeout:retryCount:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
sendAndListenForPacket(_:repeatCount:timeout:retryCount:),MinimedPumpMessageSender.sendAndListenForPacket(_:repeatCount:timeout:retryCount:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
listenForPacket(onChannel:timeout:),MinimedPumpMessageSender.listenForPacket(onChannel:timeout:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
viewDidLoad(),MinimedPumpSetupCompleteViewController.viewDidLoad() in MinimedKit/MinimedKitUI/Setup/MinimedPumpSetupCompleteViewController.swift
continueButtonPressed(_:),MinimedPumpSetupCompleteViewController.continueButtonPressed(_:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSetupCompleteViewController.swift
updateReservoirView(),MinimedHUDProvider.updateReservoirView() in MinimedKit/MinimedKitUI/MinimedHUDProvider.swift
createHUDView(),MinimedHUDProvider.createHUDView() in MinimedKit/MinimedKitUI/MinimedHUDProvider.swift
didTapOnHUDView(_:allowDebugFeatures:),MinimedHUDProvider.didTapOnHUDView(_:allowDebugFeatures:) in MinimedKit/MinimedKitUI/MinimedHUDProvider.swift
createHUDView(rawValue:),MinimedHUDProvider.createHUDView(rawValue:) in MinimedKit/MinimedKitUI/MinimedHUDProvider.swift
instantiate(),ReservoirHUDView.instantiate() in MinimedKit/MinimedKitUI/Views/ReservoirHUDView.swift
awakeFromNib(),ReservoirHUDView.awakeFromNib() in MinimedKit/MinimedKitUI/Views/ReservoirHUDView.swift
levelDidChange(),ReservoirHUDView.levelDidChange() in MinimedKit/MinimedKitUI/Views/ReservoirHUDView.swift
setReservoirVolume(volume:at:),ReservoirHUDView.setReservoirVolume(volume:at:) in MinimedKit/MinimedKitUI/Views/ReservoirHUDView.swift
tintColorDidChange(),ReservoirHUDView.tintColorDidChange() in MinimedKit/MinimedKitUI/Views/ReservoirHUDView.swift
nib(),NibLoadable.nib() in MinimedKit/MinimedKitUI/Extensions/NibLoadable.swift
deletePump(),MinimedPumpSettingsViewModel.deletePump() in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsViewModel.swift
doneButtonPressed(),MinimedPumpSettingsViewModel.doneButtonPressed() in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsViewModel.swift
suspendResumeButtonPressed(action:),MinimedPumpSettingsViewModel.suspendResumeButtonPressed(action:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsViewModel.swift
didChangeInsulinType(_:),MinimedPumpSettingsViewModel.didChangeInsulinType(_:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsViewModel.swift
suspendResumeButtonColor(guidanceColors:),MinimedPumpSettingsViewModel.suspendResumeButtonColor(guidanceColors:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsViewModel.swift
reservoirText(for:),MinimedPumpSettingsViewModel.reservoirText(for:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsViewModel.swift
changeTimeZoneTapped(),MinimedPumpSettingsViewModel.changeTimeZoneTapped() in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsViewModel.swift
next(),MinimedUIScreen.next() in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
viewDidLoad(),MinimedUICoordinator.viewDidLoad() in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
viewWillAppear(_:),MinimedUICoordinator.viewWillAppear(_:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
determineInitialStep(),MinimedUICoordinator.determineInitialStep() in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
viewControllerForScreen(_:),MinimedUICoordinator.viewControllerForScreen(_:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
stepFinished(),MinimedUICoordinator.stepFinished() in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
navigateTo(_:),MinimedUICoordinator.navigateTo(_:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
viewDidLoad(),MinimedPumpClockSetupViewController.viewDidLoad() in MinimedKit/MinimedKitUI/Setup/MinimedPumpClockSetupViewController.swift
reservoirSize(in:),MinimedReservoirView.reservoirSize(in:) in MinimedKit/MinimedKitUI/Views/MinimedReservoirView.swift
reservoirColor(for:),MinimedPumpSettingsView.reservoirColor(for:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsView.swift
errorText(_:),MinimedPumpSettingsView.errorText(_:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsView.swift
formatRSSI(rssi:),MinimedPumpSettingsView.formatRSSI(rssi:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsView.swift
viewDidLoad(),MinimedPumpSentrySetupViewController.viewDidLoad() in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
viewDidAppear(_:),MinimedPumpSentrySetupViewController.viewDidAppear(_:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
continueButtonPressed(_:),MinimedPumpSentrySetupViewController.continueButtonPressed(_:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
listenForPairing(),MinimedPumpSentrySetupViewController.listenForPairing() in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
awakeFromNib(),PumpMenuItemTableViewCell.awakeFromNib() in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
updateLabel(selected:),PumpMenuItemTableViewCell.updateLabel(selected:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
setSelected(_:animated:),PumpMenuItemTableViewCell.setSelected(_:animated:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
continueWithType(_:),InsulinTypeConfirmation.continueWithType(_:) in MinimedKit/MinimedKitUI/Views/InsulinTypeConfirmation.swift
viewDidLoad(),MinimedPumpIDSetupViewController.viewDidLoad() in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
setEditing(_:animated:),MinimedPumpIDSetupViewController.setEditing(_:animated:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
tableView(_:didSelectRowAt:),MinimedPumpIDSetupViewController.tableView(_:didSelectRowAt:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
updateStateForSettings(),MinimedPumpIDSetupViewController.updateStateForSettings() in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
setupPump(with:),MinimedPumpIDSetupViewController.setupPump(with:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
shouldPerformSegue(withIdentifier:sender:),MinimedPumpIDSetupViewController.shouldPerformSegue(withIdentifier:sender:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
continueButtonPressed(_:),MinimedPumpIDSetupViewController.continueButtonPressed(_:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
cancelButtonPressed(_:),MinimedPumpIDSetupViewController.cancelButtonPressed(_:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
keyboardDidHide(),MinimedPumpIDSetupViewController.keyboardDidHide() in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
instantiateFromStoryboard(),MinimedPumpManagerSetupViewController.instantiateFromStoryboard() in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
viewDidLoad(),MinimedPumpManagerSetupViewController.viewDidLoad() in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
navigationController(_:willShow:animated:),MinimedPumpManagerSetupViewController.navigationController(_:willShow:animated:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
navigationController(_:didShow:animated:),MinimedPumpManagerSetupViewController.navigationController(_:didShow:animated:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
pumpManagerSetupComplete(_:),MinimedPumpManagerSetupViewController.pumpManagerSetupComplete(_:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
finishedSetup(),MinimedPumpManagerSetupViewController.finishedSetup() in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
finishedSettingsDisplay(),MinimedPumpManagerSetupViewController.finishedSettingsDisplay() in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
didCancel(),MinimedPumpManagerSetupViewController.didCancel() in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
completeCreate(),MixpanelService.completeCreate() in MixpanelService/MixpanelServiceKit/MixpanelService.swift
completeUpdate(),MixpanelService.completeUpdate() in MixpanelService/MixpanelServiceKit/MixpanelService.swift
completeDelete(),MixpanelService.completeDelete() in MixpanelService/MixpanelServiceKit/MixpanelService.swift
createClient(),MixpanelService.createClient() in MixpanelService/MixpanelServiceKit/MixpanelService.swift
nib(),NibLoadable.nib() in MixpanelService/MixpanelServiceKitUI/NibLoadable.swift
viewDidLoad(),MixpanelServiceTableViewController.viewDidLoad() in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
updateButtonStates(),MixpanelServiceTableViewController.updateButtonStates() in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
cancel(),MixpanelServiceTableViewController.cancel() in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
done(),MixpanelServiceTableViewController.done() in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
confirmDeletion(completion:),MixpanelServiceTableViewController.confirmDeletion(completion:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
notifyComplete(),MixpanelServiceTableViewController.notifyComplete() in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
numberOfSections(in:),MixpanelServiceTableViewController.numberOfSections(in:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
tableView(_:numberOfRowsInSection:),MixpanelServiceTableViewController.tableView(_:numberOfRowsInSection:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
tableView(_:titleForHeaderInSection:),MixpanelServiceTableViewController.tableView(_:titleForHeaderInSection:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
tableView(_:cellForRowAt:),MixpanelServiceTableViewController.tableView(_:cellForRowAt:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
tableView(_:didSelectRowAt:),MixpanelServiceTableViewController.tableView(_:didSelectRowAt:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
textField(_:shouldChangeCharactersIn:replacementString:),MixpanelServiceTableViewController.textField(_:shouldChangeCharactersIn:replacementString:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
textFieldShouldReturn(_:),MixpanelServiceTableViewController.textFieldShouldReturn(_:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
finalizeFinishedDoses(),MockPumpManagerState.finalizeFinishedDoses() in LoopKit/MockKit/MockPumpManagerState.swift
progress(at:),UnfinalizedDose.progress(at:) in LoopKit/MockKit/UnfinalizedDose.swift
isFinished(at:),UnfinalizedDose.isFinished(at:) in LoopKit/MockKit/UnfinalizedDose.swift
cancel(at:),UnfinalizedDose.cancel(at:) in LoopKit/MockKit/UnfinalizedDose.swift
mockPumpManager(_:didUpdate:),MockPumpManagerStateObserver.mockPumpManager(_:didUpdate:) in LoopKit/MockKit/MockPumpManager.swift
mockPumpManager(_:didUpdate:oldStatus:),MockPumpManagerStateObserver.mockPumpManager(_:didUpdate:oldStatus:) in LoopKit/MockKit/MockPumpManager.swift
basalDeliveryState(for:),MockPumpManager.basalDeliveryState(for:) in LoopKit/MockKit/MockPumpManager.swift
bolusState(for:),MockPumpManager.bolusState(for:) in LoopKit/MockKit/MockPumpManager.swift
buildPumpStatusHighlight(for:),MockPumpManager.buildPumpStatusHighlight(for:) in LoopKit/MockKit/MockPumpManager.swift
buildPumpLifecycleProgress(for:),MockPumpManager.buildPumpLifecycleProgress(for:) in LoopKit/MockKit/MockPumpManager.swift
status(for:),MockPumpManager.status(for:) in LoopKit/MockKit/MockPumpManager.swift
notifyStatusObservers(oldStatus:),MockPumpManager.notifyStatusObservers(oldStatus:) in LoopKit/MockKit/MockPumpManager.swift
estimatedDuration(toBolus:),MockPumpManager.estimatedDuration(toBolus:) in LoopKit/MockKit/MockPumpManager.swift
logDeviceCommunication(_:type:),MockPumpManager.logDeviceCommunication(_:type:) in LoopKit/MockKit/MockPumpManager.swift
createBolusProgressReporter(reportingOn:),MockPumpManager.createBolusProgressReporter(reportingOn:) in LoopKit/MockKit/MockPumpManager.swift
addStatusObserver(_:queue:),MockPumpManager.addStatusObserver(_:queue:) in LoopKit/MockKit/MockPumpManager.swift
addStateObserver(_:queue:),MockPumpManager.addStateObserver(_:queue:) in LoopKit/MockKit/MockPumpManager.swift
removeStatusObserver(_:),MockPumpManager.removeStatusObserver(_:) in LoopKit/MockKit/MockPumpManager.swift
ensureCurrentPumpData(completion:),MockPumpManager.ensureCurrentPumpData(completion:) in LoopKit/MockKit/MockPumpManager.swift
storePumpEvents(completion:),MockPumpManager.storePumpEvents(completion:) in LoopKit/MockKit/MockPumpManager.swift
enactTempBasal(unitsPerHour:for:completion:),MockPumpManager.enactTempBasal(unitsPerHour:for:completion:) in LoopKit/MockKit/MockPumpManager.swift
logDeviceComms(_:message:),MockPumpManager.logDeviceComms(_:message:) in LoopKit/MockKit/MockPumpManager.swift
enactBolus(units:activationType:completion:),MockPumpManager.enactBolus(units:activationType:completion:) in LoopKit/MockKit/MockPumpManager.swift
cancelBolus(completion:),MockPumpManager.cancelBolus(completion:) in LoopKit/MockKit/MockPumpManager.swift
setMustProvideBLEHeartbeat(_:),MockPumpManager.setMustProvideBLEHeartbeat(_:) in LoopKit/MockKit/MockPumpManager.swift
stopInsulinDelivery(),MockPumpManager.stopInsulinDelivery() in LoopKit/MockKit/MockPumpManager.swift
suspendDelivery(completion:),MockPumpManager.suspendDelivery(completion:) in LoopKit/MockKit/MockPumpManager.swift
resumeDelivery(completion:),MockPumpManager.resumeDelivery(completion:) in LoopKit/MockKit/MockPumpManager.swift
trigger(action:),MockPumpManager.trigger(action:) in LoopKit/MockKit/MockPumpManager.swift
injectPumpEvents(_:),MockPumpManager.injectPumpEvents(_:) in LoopKit/MockKit/MockPumpManager.swift
setMaximumTempBasalRate(_:),MockPumpManager.setMaximumTempBasalRate(_:) in LoopKit/MockKit/MockPumpManager.swift
syncBasalRateSchedule(items:completion:),MockPumpManager.syncBasalRateSchedule(items:completion:) in LoopKit/MockKit/MockPumpManager.swift
syncDeliveryLimits(limits:completion:),MockPumpManager.syncDeliveryLimits(limits:completion:) in LoopKit/MockKit/MockPumpManager.swift
completeCreate(),MockService.completeCreate() in LoopKit/MockKit/MockService.swift
completeUpdate(),MockService.completeUpdate() in LoopKit/MockKit/MockService.swift
completeDelete(),MockService.completeDelete() in LoopKit/MockKit/MockService.swift
clearHistory(),MockService.clearHistory() in LoopKit/MockKit/MockService.swift
record(_:),MockService.record(_:) in LoopKit/MockKit/MockService.swift
fetchData(at:completion:),MockGlucoseProvider.fetchData(at:completion:) in LoopKit/MockKit/MockGlucoseProvider.swift
backfill(_:endingAt:completion:),MockGlucoseProvider.backfill(_:endingAt:completion:) in LoopKit/MockKit/MockGlucoseProvider.swift
fetchNewData(_:),MockCGMDataSource.fetchNewData(_:) in LoopKit/MockKit/MockCGMDataSource.swift
backfillData(from:completion:),MockCGMDataSource.backfillData(from:completion:) in LoopKit/MockKit/MockCGMDataSource.swift
timerParameters(),MockDoseProgressEstimator.timerParameters() in LoopKit/MockKit/MockDoseProgressEstimator.swift
setProgressColor(),MockCGMState.setProgressColor() in LoopKit/MockKit/MockCGMManager.swift
addStatusObserver(_:queue:),MockCGMManager.addStatusObserver(_:queue:) in LoopKit/MockKit/MockCGMManager.swift
removeStatusObserver(_:),MockCGMManager.removeStatusObserver(_:) in LoopKit/MockKit/MockCGMManager.swift
notifyStatusObservers(cgmManagerStatus:),MockCGMManager.notifyStatusObservers(cgmManagerStatus:) in LoopKit/MockKit/MockCGMManager.swift
logDeviceComms(_:message:),MockCGMManager.logDeviceComms(_:message:) in LoopKit/MockKit/MockCGMManager.swift
sendCGMReadingResult(_:),MockCGMManager.sendCGMReadingResult(_:) in LoopKit/MockKit/MockCGMManager.swift
glucoseRangeCategory(for:),MockCGMManager.glucoseRangeCategory(for:) in LoopKit/MockKit/MockCGMManager.swift
fetchNewDataIfNeeded(_:),MockCGMManager.fetchNewDataIfNeeded(_:) in LoopKit/MockKit/MockCGMManager.swift
backfillData(datingBack:),MockCGMManager.backfillData(datingBack:) in LoopKit/MockKit/MockCGMManager.swift
updateGlucoseUpdateTimer(),MockCGMManager.updateGlucoseUpdateTimer() in LoopKit/MockKit/MockCGMManager.swift
setupGlucoseUpdateTimer(),MockCGMManager.setupGlucoseUpdateTimer() in LoopKit/MockKit/MockCGMManager.swift
injectGlucoseSamples(_:futureSamples:),MockCGMManager.injectGlucoseSamples(_:futureSamples:) in LoopKit/MockKit/MockCGMManager.swift
trigger(action:),MockCGMManager.trigger(action:) in LoopKit/MockKit/MockCGMManager.swift
acceptDefaultsAndSkipOnboarding(),MockCGMManager.acceptDefaultsAndSkipOnboarding() in LoopKit/MockKit/MockCGMManager.swift
createHUDView(),MockHUDProvider.createHUDView() in LoopKit/MockKitUI/MockHUDProvider.swift
createHUDView(rawValue:),MockHUDProvider.createHUDView(rawValue:) in LoopKit/MockKitUI/MockHUDProvider.swift
didTapOnHUDView(_:allowDebugFeatures:),MockHUDProvider.didTapOnHUDView(_:allowDebugFeatures:) in LoopKit/MockKitUI/MockHUDProvider.swift
updateReservoirView(),MockHUDProvider.updateReservoirView() in LoopKit/MockKitUI/MockHUDProvider.swift
updateBatteryView(),MockHUDProvider.updateBatteryView() in LoopKit/MockKitUI/MockHUDProvider.swift
prepareForReuse(),BoundSwitchTableViewCell.prepareForReuse() in LoopKit/MockKitUI/Views/BoundSwitchTableViewCell.swift
respondToToggle(),BoundSwitchTableViewCell.respondToToggle() in LoopKit/MockKitUI/Views/BoundSwitchTableViewCell.swift
checkVersion(bundleIdentifier:currentVersion:),MockSupport.checkVersion(bundleIdentifier:currentVersion:) in LoopKit/MockKitUI/MockSupport.swift
configurationMenuItems(),MockSupport.configurationMenuItems() in LoopKit/MockKitUI/MockSupport.swift
softwareUpdateView(bundleIdentifier:currentVersion:guidanceColors:openAppStore:),MockSupport.softwareUpdateView(bundleIdentifier:currentVersion:guidanceColors:openAppStore:) in LoopKit/MockKitUI/MockSupport.swift
getScenarios(from:),MockSupport.getScenarios(from:) in LoopKit/MockKitUI/MockSupport.swift
loopWillReset(),MockSupport.loopWillReset() in LoopKit/MockKitUI/MockSupport.swift
loopDidReset(),MockSupport.loopDidReset() in LoopKit/MockKitUI/MockSupport.swift
viewDidLoad(),MockServiceTableViewController.viewDidLoad() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
cancel(),MockServiceTableViewController.cancel() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
done(),MockServiceTableViewController.done() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
confirmDeletion(completion:),MockServiceTableViewController.confirmDeletion(completion:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
notifyComplete(),MockServiceTableViewController.notifyComplete() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
numberOfSections(in:),MockServiceTableViewController.numberOfSections(in:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
tableView(_:numberOfRowsInSection:),MockServiceTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
tableView(_:titleForHeaderInSection:),MockServiceTableViewController.tableView(_:titleForHeaderInSection:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
tableView(_:shouldHighlightRowAt:),MockServiceTableViewController.tableView(_:shouldHighlightRowAt:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
tableView(_:cellForRowAt:),MockServiceTableViewController.tableView(_:cellForRowAt:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
remoteDataChanged(_:),MockServiceTableViewController.remoteDataChanged(_:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
loggingChanged(_:),MockServiceTableViewController.loggingChanged(_:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
analyticsChanged(_:),MockServiceTableViewController.analyticsChanged(_:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
tableView(_:didSelectRowAt:),MockServiceTableViewController.tableView(_:didSelectRowAt:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
loadView(),MockServiceHistoryViewController.loadView() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
viewDidLoad(),MockServiceHistoryViewController.viewDidLoad() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
share(),MockServiceHistoryViewController.share() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
write(),SharedResponse.write() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
activityViewControllerPlaceholderItem(_:),SharedResponse.activityViewControllerPlaceholderItem(_:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
activityViewController(_:itemForActivityType:),SharedResponse.activityViewController(_:itemForActivityType:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
activityViewController(_:subjectForActivityType:),SharedResponse.activityViewController(_:subjectForActivityType:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
activityViewController(_:dataTypeIdentifierForActivityType:),SharedResponse.activityViewController(_:dataTypeIdentifierForActivityType:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
glucoseTrendTableViewControllerDidChangeTrend(_:),GlucoseTrendTableViewControllerDelegate.glucoseTrendTableViewControllerDidChangeTrend(_:) in LoopKit/MockKitUI/View Controllers/GlucoseTrendTableViewController.swift
nib(),NibLoadable.nib() in LoopKit/MockKitUI/Extensions/NibLoadable.swift
viewDidLoad(),MockPumpManagerSettingsViewController.viewDidLoad() in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
doneTapped(_:),MockPumpManagerSettingsViewController.doneTapped(_:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
done(),MockPumpManagerSettingsViewController.done() in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
numberOfSections(in:),MockPumpManagerSettingsViewController.numberOfSections(in:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
tableView(_:numberOfRowsInSection:),MockPumpManagerSettingsViewController.tableView(_:numberOfRowsInSection:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
tableView(_:titleForHeaderInSection:),MockPumpManagerSettingsViewController.tableView(_:titleForHeaderInSection:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
tableView(_:cellForRowAt:),MockPumpManagerSettingsViewController.tableView(_:cellForRowAt:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
switchTableViewCell(for:titled:boundTo:),MockPumpManagerSettingsViewController.switchTableViewCell(for:titled:boundTo:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
tableView(_:didSelectRowAt:),MockPumpManagerSettingsViewController.tableView(_:didSelectRowAt:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
suspendResumeCellTapped(_:),MockPumpManagerSettingsViewController.suspendResumeCellTapped(_:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
tableView(_:trailingSwipeActionsConfigurationForRowAt:),MockPumpManagerSettingsViewController.tableView(_:trailingSwipeActionsConfigurationForRowAt:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
viewDidLoad(),SupportedRangeTableViewController.viewDidLoad() in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
numberOfSections(in:),SupportedRangeTableViewController.numberOfSections(in:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
tableView(_:numberOfRowsInSection:),SupportedRangeTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
tableView(_:titleForFooterInSection:),SupportedRangeTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
tableView(_:cellForRowAt:),SupportedRangeTableViewController.tableView(_:cellForRowAt:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
tableView(_:didSelectRowAt:),SupportedRangeTableViewController.tableView(_:didSelectRowAt:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
supportedRangeDidUpdate(_:),SupportedRangeTableViewControllerDelegate.supportedRangeDidUpdate(_:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
alert(for:),MockCGMManagerSettingsView.alert(for:) in LoopKit/MockKitUI/Views/MockCGMManagerSettingsView.swift
updateLastReadingTime(),MockCGMManagerSettingsViewModel.updateLastReadingTime() in LoopKit/MockKitUI/ViewModel/MockCGMManagerSettingsViewModel.swift
setLastGlucoseTrend(_:),MockCGMManagerSettingsViewModel.setLastGlucoseTrend(_:) in LoopKit/MockKitUI/ViewModel/MockCGMManagerSettingsViewModel.swift
setLastGlucoseValue(_:),MockCGMManagerSettingsViewModel.setLastGlucoseValue(_:) in LoopKit/MockKitUI/ViewModel/MockCGMManagerSettingsViewModel.swift
makeUIViewController(context:),MockPumpManagerControlsView.makeUIViewController(context:) in LoopKit/MockKitUI/Views/MockPumpManagerControlsView.swift
updateUIViewController(_:context:),MockPumpManagerControlsView.updateUIViewController(_:context:) in LoopKit/MockKitUI/Views/MockPumpManagerControlsView.swift
makeCoordinator(),MockPumpManagerControlsView.makeCoordinator() in LoopKit/MockKitUI/Views/MockPumpManagerControlsView.swift
sineCurveParametersTableViewControllerDidUpdateParameters(_:),SineCurveParametersTableViewControllerDelegate.sineCurveParametersTableViewControllerDidUpdateParameters(_:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
viewDidLoad(),SineCurveParametersTableViewController.viewDidLoad() in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
numberOfSections(in:),SineCurveParametersTableViewController.numberOfSections(in:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
tableView(_:numberOfRowsInSection:),SineCurveParametersTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
tableView(_:cellForRowAt:),SineCurveParametersTableViewController.tableView(_:cellForRowAt:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
tableView(_:didSelectRowAt:),SineCurveParametersTableViewController.tableView(_:didSelectRowAt:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
tableView(_:titleForFooterInSection:),SineCurveParametersTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
setSuspenededAtString(),MockPumpManagerSettingsViewModel.setSuspenededAtString() in LoopKit/MockKitUI/ViewModel/MockPumpManagerSettingsViewModel.swift
resumeDelivery(completion:),MockPumpManagerSettingsViewModel.resumeDelivery(completion:) in LoopKit/MockKitUI/ViewModel/MockPumpManagerSettingsViewModel.swift
suspendDelivery(completion:),MockPumpManagerSettingsViewModel.suspendDelivery(completion:) in LoopKit/MockKitUI/ViewModel/MockPumpManagerSettingsViewModel.swift
randomOutlierTableViewControllerDidChangeOutlier(_:),RandomOutlierTableViewControllerDelegate.randomOutlierTableViewControllerDidChangeOutlier(_:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
viewDidLoad(),RandomOutlierTableViewController.viewDidLoad() in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
numberOfSections(in:),RandomOutlierTableViewController.numberOfSections(in:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
tableView(_:numberOfRowsInSection:),RandomOutlierTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
tableView(_:cellForRowAt:),RandomOutlierTableViewController.tableView(_:cellForRowAt:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
tableView(_:didSelectRowAt:),RandomOutlierTableViewController.tableView(_:didSelectRowAt:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
tableView(_:titleForFooterInSection:),RandomOutlierTableViewController.tableView(_:titleForFooterInSection:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
measurementFrequencyTableViewControllerDidChangeFrequency(_:),MeasurementFrequencyTableViewControllerDelegate.measurementFrequencyTableViewControllerDidChangeFrequency(_:) in LoopKit/MockKitUI/View Controllers/MeasurementFrequencyTableViewController.swift
makeUIViewController(context:),MockCGMManagerControlsView.makeUIViewController(context:) in LoopKit/MockKitUI/Views/MockCGMManagerControlsView.swift
updateUIViewController(_:context:),MockCGMManagerControlsView.updateUIViewController(_:context:) in LoopKit/MockKitUI/Views/MockCGMManagerControlsView.swift
makeCoordinator(),MockCGMManagerControlsView.makeCoordinator() in LoopKit/MockKitUI/Views/MockCGMManagerControlsView.swift
suspendResumeTapped(),MockPumpManagerSettingsView.suspendResumeTapped() in LoopKit/MockKitUI/Views/MockPumpManagerSettingsView.swift
alert(for:),MockPumpManagerSettingsView.alert(for:) in LoopKit/MockKitUI/Views/MockPumpManagerSettingsView.swift
viewDidLoad(),MockCGMManagerSettingsViewController.viewDidLoad() in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
doneTapped(_:),MockCGMManagerSettingsViewController.doneTapped(_:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
done(),MockCGMManagerSettingsViewController.done() in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
numberOfSections(in:),MockCGMManagerSettingsViewController.numberOfSections(in:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
tableView(_:numberOfRowsInSection:),MockCGMManagerSettingsViewController.tableView(_:numberOfRowsInSection:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
tableView(_:titleForHeaderInSection:),MockCGMManagerSettingsViewController.tableView(_:titleForHeaderInSection:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
tableView(_:titleForFooterInSection:),MockCGMManagerSettingsViewController.tableView(_:titleForFooterInSection:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
tableView(_:cellForRowAt:),MockCGMManagerSettingsViewController.tableView(_:cellForRowAt:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
tableView(_:didSelectRowAt:),MockCGMManagerSettingsViewController.tableView(_:didSelectRowAt:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
indexPaths(forSection:rows:),MockCGMManagerSettingsViewController.indexPaths(forSection:rows:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
viewDidLoad(),IssueAlertTableViewController.viewDidLoad() in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
doneTapped(_:),IssueAlertTableViewController.doneTapped(_:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
done(),IssueAlertTableViewController.done() in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
numberOfSections(in:),IssueAlertTableViewController.numberOfSections(in:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
tableView(_:numberOfRowsInSection:),IssueAlertTableViewController.tableView(_:numberOfRowsInSection:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
tableView(_:cellForRowAt:),IssueAlertTableViewController.tableView(_:cellForRowAt:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
tableView(_:didSelectRowAt:),IssueAlertTableViewController.tableView(_:didSelectRowAt:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
checkServiceStatus(_:),NightscoutAPIService.checkServiceStatus(_:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPIService.swift
verify(_:),NightscoutAPIService.verify(_:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPIService.swift
reset(),NightscoutAPIService.reset() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPIService.swift
fetchRecent(minutes:completion:),NightscoutFetcher.fetchRecent(minutes:completion:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutFetcher.swift
fetchNewDataIfNeeded(_:),NightscoutRemoteCGM.fetchNewDataIfNeeded(_:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutRemoteCGM.swift
scheduleUpdateTimer(),NightscoutRemoteCGM.scheduleUpdateTimer() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutRemoteCGM.swift
resume(),DispatchTimer.resume() in NightscoutRemoteCGM/Common/DispatchTimer.swift
suspend(),DispatchTimer.suspend() in NightscoutRemoteCGM/Common/DispatchTimer.swift
subscribeOnChanges(),NightscoutAPISettingsViewController.subscribeOnChanges() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISettingsViewController.swift
viewDidAppear(),SettingsViewModel.viewDidAppear() in NightscoutRemoteCGM/NightscoutRemoteCGM/SettingsView.swift
updateServiceStatus(),SettingsViewModel.updateServiceStatus() in NightscoutRemoteCGM/NightscoutRemoteCGM/SettingsView.swift
localizedString(),SettingsViewServiceStatus.localizedString() in NightscoutRemoteCGM/NightscoutRemoteCGM/SettingsView.swift
+(_:_:),KalmanInput.+(_:_:) in NightscoutRemoteCGM/NightscoutRemoteCGM/KalmanFilter/KalmanFilterType.swift
-(_:_:),KalmanInput.-(_:_:) in NightscoutRemoteCGM/NightscoutRemoteCGM/KalmanFilter/KalmanFilterType.swift
*(_:_:),KalmanInput.*(_:_:) in NightscoutRemoteCGM/NightscoutRemoteCGM/KalmanFilter/KalmanFilterType.swift
predict(stateTransitionModel:controlInputModel:controlVector:covarianceOfProcessNoise:),KalmanFilterType.predict(stateTransitionModel:controlInputModel:controlVector:covarianceOfProcessNoise:) in NightscoutRemoteCGM/NightscoutRemoteCGM/KalmanFilter/KalmanFilterType.swift
update(measurement:observationModel:covarienceOfObservationNoise:),KalmanFilterType.update(measurement:observationModel:covarienceOfObservationNoise:) in NightscoutRemoteCGM/NightscoutRemoteCGM/KalmanFilter/KalmanFilterType.swift
predict(stateTransitionModel:controlInputModel:controlVector:covarianceOfProcessNoise:),KalmanFilter.predict(stateTransitionModel:controlInputModel:controlVector:covarianceOfProcessNoise:) in NightscoutRemoteCGM/NightscoutRemoteCGM/KalmanFilter/KalmanFilter.swift
update(measurement:observationModel:covarienceOfObservationNoise:),KalmanFilter.update(measurement:observationModel:covarienceOfObservationNoise:) in NightscoutRemoteCGM/NightscoutRemoteCGM/KalmanFilter/KalmanFilter.swift
cancel(),NightscoutAPISetupViewController.cancel() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
save(),NightscoutAPISetupViewController.save() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
showAuthenticationViewController(),NightscoutAPISetupViewController.showAuthenticationViewController() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
dismissSetup(),NightscoutAPISetupViewController.dismissSetup() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
subscribeOnDisclaimerChanges(),NightscoutAPISetupViewController.subscribeOnDisclaimerChanges() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
toRemoteAction(),BolusRemoteNotification.toRemoteAction() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/BolusRemoteNotification.swift
otpValidationRequired(),BolusRemoteNotification.otpValidationRequired() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/BolusRemoteNotification.swift
includedInNotification(_:),BolusRemoteNotification.includedInNotification(_:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/BolusRemoteNotification.swift
toRemoteAction(),RemoteNotification.toRemoteAction() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/RemoteNotification.swift
otpValidationRequired(),RemoteNotification.otpValidationRequired() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/RemoteNotification.swift
includedInNotification(_:),RemoteNotification.includedInNotification(_:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/RemoteNotification.swift
verifyConfiguration(completion:),NightscoutService.verifyConfiguration(completion:) in NightscoutService/NightscoutServiceKit/NightscoutService.swift
completeCreate(),NightscoutService.completeCreate() in NightscoutService/NightscoutServiceKit/NightscoutService.swift
completeOnboard(),NightscoutService.completeOnboard() in NightscoutService/NightscoutServiceKit/NightscoutService.swift
completeUpdate(),NightscoutService.completeUpdate() in NightscoutService/NightscoutServiceKit/NightscoutService.swift
completeDelete(),NightscoutService.completeDelete() in NightscoutService/NightscoutServiceKit/NightscoutService.swift
saveCredentials(),NightscoutService.saveCredentials() in NightscoutService/NightscoutServiceKit/NightscoutService.swift
restoreCredentials(),NightscoutService.restoreCredentials() in NightscoutService/NightscoutServiceKit/NightscoutService.swift
clearCredentials(),NightscoutService.clearCredentials() in NightscoutService/NightscoutServiceKit/NightscoutService.swift
remoteNotificationWasReceived(_:),RemoteCommandSourceV1.remoteNotificationWasReceived(_:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/RemoteCommandSourceV1.swift
remoteNotificationWasReceived(_:),RemoteCommandSource.remoteNotificationWasReceived(_:) in NightscoutService/NightscoutServiceKit/RemoteCommands/RemoteCommandSource.swift
isDuplicate(_:),RecentNotifications.isDuplicate(_:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/RemoteCommandSourceV1.swift
validate(remoteNotification:),RemoteCommandValidator.validate(remoteNotification:) in NightscoutService/NightscoutServiceKit/RemoteCommands/Validators/RemoteCommandValidator.swift
validateExpirationDate(remoteNotification:),RemoteCommandValidator.validateExpirationDate(remoteNotification:) in NightscoutService/NightscoutServiceKit/RemoteCommands/Validators/RemoteCommandValidator.swift
validateOTP(remoteNotification:),RemoteCommandValidator.validateOTP(remoteNotification:) in NightscoutService/NightscoutServiceKit/RemoteCommands/Validators/RemoteCommandValidator.swift
commandSourceV1(_:handleAction:),RemoteCommandSourceV1Delegate.commandSourceV1(_:handleAction:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/RemoteCommandSourceV1.swift
commandSourceV1(_:uploadError:notification:),RemoteCommandSourceV1Delegate.commandSourceV1(_:uploadError:notification:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/RemoteCommandSourceV1.swift
add(syncIdentifier:objectId:),ObjectIdCache.add(syncIdentifier:objectId:) in NightscoutService/NightscoutServiceKit/ObjectIdCache.swift
purge(before:),ObjectIdCache.purge(before:) in NightscoutService/NightscoutServiceKit/ObjectIdCache.swift
findObjectIdBySyncIdentifier(_:),ObjectIdCache.findObjectIdBySyncIdentifier(_:) in NightscoutService/NightscoutServiceKit/ObjectIdCache.swift
validatePassword(password:deliveryDate:),OTPManager.validatePassword(password:deliveryDate:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
storeUsedPassword(_:),OTPManager.storeUsedPassword(_:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
resetSecretKey(),OTPManager.resetSecretKey() in NightscoutService/NightscoutServiceKit/OTPManager.swift
createRandomSecretKey(),OTPManager.createRandomSecretKey() in NightscoutService/NightscoutServiceKit/OTPManager.swift
createSecretKeyName(),OTPManager.createSecretKeyName() in NightscoutService/NightscoutServiceKit/OTPManager.swift
otpToken(),OTPManager.otpToken() in NightscoutService/NightscoutServiceKit/OTPManager.swift
validOTPs(),OTPManager.validOTPs() in NightscoutService/NightscoutServiceKit/OTPManager.swift
otpsSince(date:),OTPManager.otpsSince(date:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
isValidPassword(_:),OTPManager.isValidPassword(_:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
oldestAcceptableOTPPeriod(),OTPManager.oldestAcceptableOTPPeriod() in NightscoutService/NightscoutServiceKit/OTPManager.swift
currentOTPPeriod(),OTPManager.currentOTPPeriod() in NightscoutService/NightscoutServiceKit/OTPManager.swift
otpPeriodForDate(_:),OTPManager.otpPeriodForDate(_:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
currentOTP(),OTPManager.currentOTP() in NightscoutService/NightscoutServiceKit/OTPManager.swift
currentPassword(),OTPManager.currentPassword() in NightscoutService/NightscoutServiceKit/OTPManager.swift
tokenName(),OTPManager.tokenName() in NightscoutService/NightscoutServiceKit/OTPManager.swift
tokenSecretKey(),OTPSecretStore.tokenSecretKey() in NightscoutService/NightscoutServiceKit/OTPManager.swift
setTokenSecretKey(_:),OTPSecretStore.setTokenSecretKey(_:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
tokenSecretKeyName(),OTPSecretStore.tokenSecretKeyName() in NightscoutService/NightscoutServiceKit/OTPManager.swift
setTokenSecretKeyName(_:),OTPSecretStore.setTokenSecretKeyName(_:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
recentAcceptedPasswords(),OTPSecretStore.recentAcceptedPasswords() in NightscoutService/NightscoutServiceKit/OTPManager.swift
setRecentAcceptedPasswords(_:),OTPSecretStore.setRecentAcceptedPasswords(_:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
absorptionTime(),CarbRemoteNotification.absorptionTime() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/CarbRemoteNotification.swift
toRemoteAction(),CarbRemoteNotification.toRemoteAction() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/CarbRemoteNotification.swift
otpValidationRequired(),CarbRemoteNotification.otpValidationRequired() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/CarbRemoteNotification.swift
includedInNotification(_:),CarbRemoteNotification.includedInNotification(_:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/CarbRemoteNotification.swift
durationTime(),OverrideRemoteNotification.durationTime() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideRemoteNotification.swift
toRemoteAction(),OverrideRemoteNotification.toRemoteAction() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideRemoteNotification.swift
otpValidationRequired(),OverrideRemoteNotification.otpValidationRequired() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideRemoteNotification.swift
includedInNotification(_:),OverrideRemoteNotification.includedInNotification(_:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideRemoteNotification.swift
toRemoteAction(),OverrideCancelRemoteNotification.toRemoteAction() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideCancelRemoteNotification.swift
otpValidationRequired(),OverrideCancelRemoteNotification.otpValidationRequired() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideCancelRemoteNotification.swift
includedInNotification(_:),OverrideCancelRemoteNotification.includedInNotification(_:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideCancelRemoteNotification.swift
verifyConfiguration(completion:),ServiceStatusViewModelDelegate.verifyConfiguration(completion:) in NightscoutService/NightscoutServiceKitUI/Models/ServiceStatusViewModel.swift
resetSecretKey(),OTPViewModel.resetSecretKey() in NightscoutService/NightscoutServiceKitUI/Models/OTPViewModel.swift
refreshCurrentOTP(),OTPViewModel.refreshCurrentOTP() in NightscoutService/NightscoutServiceKitUI/Models/OTPViewModel.swift
createQRImage(otpURL:),OTPViewModel.createQRImage(otpURL:) in NightscoutService/NightscoutServiceKitUI/Models/OTPViewModel.swift
nib(),NibLoadable.nib() in NightscoutService/NightscoutServiceKitUI/Extensions/NibLoadable.swift
next(),ServiceScreen.next() in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
viewDidLoad(),ServiceUICoordinator.viewDidLoad() in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
viewWillAppear(_:),ServiceUICoordinator.viewWillAppear(_:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
viewControllerForScreen(_:),ServiceUICoordinator.viewControllerForScreen(_:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
stepFinished(),ServiceUICoordinator.stepFinished() in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
navigate(to:),ServiceUICoordinator.navigate(to:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
completeLogin(),ServiceUICoordinator.completeLogin() in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
completeLogout(),ServiceUICoordinator.completeLogout() in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
attemptAuth(urlString:apiSecret:),CredentialsViewModel.attemptAuth(urlString:apiSecret:) in NightscoutService/NightscoutServiceKitUI/Models/CredentialsViewModel.swift
keyBoardWillShow(notification:),KeyboardObserver.keyBoardWillShow(notification:) in NightscoutService/NightscoutServiceKitUI/Models/KeyboardObserver.swift
keyBoardWillHide(notification:),KeyboardObserver.keyBoardWillHide(notification:) in NightscoutService/NightscoutServiceKitUI/Models/KeyboardObserver.swift
parseKeys(_:_:),StringLengthPrefixEncoding.parseKeys(_:_:) in OmniBLE/OmniBLE/Bluetooth/StringLengthPrefixEncoding.swift
formatKeys(keys:payloads:),StringLengthPrefixEncoding.formatKeys(keys:payloads:) in OmniBLE/OmniBLE/Bluetooth/StringLengthPrefixEncoding.swift
toData(sqn:podReceiving:),Nonce.toData(sqn:podReceiving:) in OmniBLE/OmniBLE/Bluetooth/EnDecrypt/Nonce.swift
toInt(),EapSqn.toInt() in OmniBLE/OmniBLE/Bluetooth/Session/EapSqn.swift
increment(),EapSqn.increment() in OmniBLE/OmniBLE/Bluetooth/Session/EapSqn.swift
notActivated(),Ids.notActivated() in OmniBLE/OmniBLE/Bluetooth/Ids.swift
fromInt(_:),Id.fromInt(_:) in OmniBLE/OmniBLE/Bluetooth/Id.swift
fromUInt32(_:),Id.fromUInt32(_:) in OmniBLE/OmniBLE/Bluetooth/Id.swift
toInt64(),Id.toInt64() in OmniBLE/OmniBLE/Bluetooth/Id.swift
toUInt32(),Id.toUInt32() in OmniBLE/OmniBLE/Bluetooth/Id.swift
==(_:_:),Id.==(_:_:) in OmniBLE/OmniBLE/Bluetooth/Id.swift
alert(for:),AttachPodView.alert(for:) in OmniBLE/OmniBLE/PumpManagerUI/Views/AttachPodView.swift
nextBytes(length:),OmniRandomByteGenerator.nextBytes(length:) in OmniBLE/OmniBLE/Bluetooth/Util/OmniRandomByteGenerator.swift
nextBytes(length:),RandomByteGenerator.nextBytes(length:) in OmniBLE/OmniBLE/Bluetooth/Util/OmniRandomByteGenerator.swift
omnipodPeripheralDidConnect(manager:),OmniBLEConnectionDelegate.omnipodPeripheralDidConnect(manager:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
omnipodPeripheralWasRestored(manager:),OmniBLEConnectionDelegate.omnipodPeripheralWasRestored(manager:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
omnipodPeripheralDidDisconnect(peripheral:error:),OmniBLEConnectionDelegate.omnipodPeripheralDidDisconnect(peripheral:error:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
omnipodPeripheralDidFailToConnect(peripheral:error:),OmniBLEConnectionDelegate.omnipodPeripheralDidFailToConnect(peripheral:error:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
completeConfiguration(for:),PeripheralManagerDelegate.completeConfiguration(for:) in OmniBLE/OmniBLE/Bluetooth/PeripheralManager.swift
addPeripheral(_:podAdvertisement:),BluetoothManager.addPeripheral(_:podAdvertisement:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
discoverPods(completion:),BluetoothManager.discoverPods(completion:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
endPodDiscovery(),BluetoothManager.endPodDiscovery() in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
connectToDevice(uuidString:),BluetoothManager.connectToDevice(uuidString:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
disconnectFromDevice(uuidString:),BluetoothManager.disconnectFromDevice(uuidString:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
updateConnections(),BluetoothManager.updateConnections() in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
discoverPods(_:),BluetoothManager.discoverPods(_:) in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
startScanning(),BluetoothManager.startScanning() in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
stopScanning(),BluetoothManager.stopScanning() in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
getConnectedDevices(),BluetoothManager.getConnectedDevices() in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
createHUDView(),OmniBLEHUDProvider.createHUDView() in OmniBLE/OmniBLE/PumpManagerUI/OmniBLEHUDProvider.swift
didTapOnHUDView(_:allowDebugFeatures:),OmniBLEHUDProvider.didTapOnHUDView(_:allowDebugFeatures:) in OmniBLE/OmniBLE/PumpManagerUI/OmniBLEHUDProvider.swift
hudDidAppear(),OmniBLEHUDProvider.hudDidAppear() in OmniBLE/OmniBLE/PumpManagerUI/OmniBLEHUDProvider.swift
createHUDView(rawValue:),OmniBLEHUDProvider.createHUDView(rawValue:) in OmniBLE/OmniBLE/PumpManagerUI/OmniBLEHUDProvider.swift
refresh(),OmniBLEHUDProvider.refresh() in OmniBLE/OmniBLE/PumpManagerUI/OmniBLEHUDProvider.swift
updateReservoirView(),OmniBLEHUDProvider.updateReservoirView() in OmniBLE/OmniBLE/PumpManagerUI/OmniBLEHUDProvider.swift
instantiate(),OmniBLEReservoirView.instantiate() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLEReservoirView.swift
awakeFromNib(),OmniBLEReservoirView.awakeFromNib() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLEReservoirView.swift
tintColorDidChange(),OmniBLEReservoirView.tintColorDidChange() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLEReservoirView.swift
updateColor(),OmniBLEReservoirView.updateColor() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLEReservoirView.swift
updateViews(),OmniBLEReservoirView.updateViews() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLEReservoirView.swift
update(level:at:reservoirLevelHighlightState:),OmniBLEReservoirView.update(level:at:reservoirLevelHighlightState:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLEReservoirView.swift
nib(),NibLoadable.nib() in OmniBLE/Common/NibLoadable.swift
setState(_:),OmniBLEPumpManager.setState(_:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
evaluateStatus(),OmniBLEPumpManager.evaluateStatus() in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
setStateWithResult(_:),OmniBLEPumpManager.setStateWithResult(_:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
notifyStatusObservers(oldStatus:),OmniBLEPumpManager.notifyStatusObservers(oldStatus:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
logDeviceCommunication(_:type:),OmniBLEPumpManager.logDeviceCommunication(_:type:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
setMustProvideBLEHeartbeat(_:),OmniBLEPumpManager.setMustProvideBLEHeartbeat(_:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
issueHeartbeatIfNeeded(),OmniBLEPumpManager.issueHeartbeatIfNeeded() in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
omnipodPeripheralDidConnect(manager:),OmniBLEPumpManager.omnipodPeripheralDidConnect(manager:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
omnipodPeripheralDidDisconnect(peripheral:error:),OmniBLEPumpManager.omnipodPeripheralDidDisconnect(peripheral:error:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
omnipodPeripheralDidFailToConnect(peripheral:error:),OmniBLEPumpManager.omnipodPeripheralDidFailToConnect(peripheral:error:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
omnipodPeripheralWasRestored(manager:),OmniBLEPumpManager.omnipodPeripheralWasRestored(manager:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
notifyPodConnectionStateDidChange(isConnected:),OmniBLEPumpManager.notifyPodConnectionStateDidChange(isConnected:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
podStateDidUpdate(_:),PodStateObserver.podStateDidUpdate(_:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
podConnectionStateDidChange(isConnected:),PodStateObserver.podConnectionStateDidChange(isConnected:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
incrementEapSeq(),PodState.incrementEapSeq() in OmniBLE/OmniBLE/PumpManager/PodState.swift
advanceToNextNonce(),PodState.advanceToNextNonce() in OmniBLE/OmniBLE/PumpManager/PodState.swift
resyncNonce(syncWord:sentNonce:messageSequenceNum:),PodState.resyncNonce(syncWord:sentNonce:messageSequenceNum:) in OmniBLE/OmniBLE/PumpManager/PodState.swift
updatePodTimes(timeActive:),PodState.updatePodTimes(timeActive:) in OmniBLE/OmniBLE/PumpManager/PodState.swift
updateFromStatusResponse(_:at:),PodState.updateFromStatusResponse(_:at:) in OmniBLE/OmniBLE/PumpManager/PodState.swift
registerConfiguredAlert(slot:alert:),PodState.registerConfiguredAlert(slot:alert:) in OmniBLE/OmniBLE/PumpManager/PodState.swift
finalizeAllDoses(),PodState.finalizeAllDoses() in OmniBLE/OmniBLE/PumpManager/PodState.swift
resolveAnyPendingCommandWithUncertainty(),PodState.resolveAnyPendingCommandWithUncertainty() in OmniBLE/OmniBLE/PumpManager/PodState.swift
updateDeliveryStatus(deliveryStatus:podProgressStatus:bolusNotDelivered:at:),PodState.updateDeliveryStatus(deliveryStatus:podProgressStatus:bolusNotDelivered:at:) in OmniBLE/OmniBLE/PumpManager/PodState.swift
progress(at:),UnfinalizedDose.progress(at:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
isFinished(at:),UnfinalizedDose.isFinished(at:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
cancel(at:withRemaining:),UnfinalizedDose.cancel(at:withRemaining:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
isMutable(at:),UnfinalizedDose.isMutable(at:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
==(_:_:),PendingCommand.==(_:_:) in OmniBLE/OmniBLE/OmnipodCommon/PendingCommand.swift
==(_:_:),StartProgram.==(_:_:) in OmniBLE/OmniBLE/OmnipodCommon/PendingCommand.swift
rateAt(offset:),BasalSchedule.rateAt(offset:) in OmniBLE/OmniBLE/OmnipodCommon/BasalSchedule.swift
currentRate(using:at:),BasalSchedule.currentRate(using:at:) in OmniBLE/OmniBLE/OmnipodCommon/BasalSchedule.swift
lookup(offset:),BasalSchedule.lookup(offset:) in OmniBLE/OmniBLE/OmnipodCommon/BasalSchedule.swift
durations(),BasalSchedule.durations() in OmniBLE/OmniBLE/OmnipodCommon/BasalSchedule.swift
index(after:),AlertSet.index(after:) in OmniBLE/OmniBLE/OmnipodCommon/AlertSlot.swift
compare(to:),AlertSet.compare(to:) in OmniBLE/OmniBLE/OmnipodCommon/AlertSlot.swift
updateInsulinType(_:),PodComms.updateInsulinType(_:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
forgetPod(),PodComms.forgetPod() in OmniBLE/OmniBLE/PumpManager/PodComms.swift
prepForNewPod(myId:podId:),PodComms.prepForNewPod(myId:podId:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
connectToNewPod(_:),PodComms.connectToNewPod(_:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
sendPairMessage(transport:message:),PodComms.sendPairMessage(transport:message:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
pairPod(insulinType:),PodComms.pairPod(insulinType:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
establishSession(ltk:eapSeq:msgSeq:),PodComms.establishSession(ltk:eapSeq:msgSeq:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
establishNewSession(),PodComms.establishNewSession() in OmniBLE/OmniBLE/PumpManager/PodComms.swift
setupPod(timeZone:),PodComms.setupPod(timeZone:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
pairAndSetupPod(timeZone:insulinType:messageLogger:_:),PodComms.pairAndSetupPod(timeZone:insulinType:messageLogger:_:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
runSession(withName:_:),PodComms.runSession(withName:_:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
handlePodFault(fault:),PodCommsSession.handlePodFault(fault:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
throwPodFault(fault:),PodCommsSession.throwPodFault(fault:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
send(_:beepBlock:expectFollowOnMessage:),PodCommsSession.send(_:beepBlock:expectFollowOnMessage:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
prime(),PodCommsSession.prime() in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
programInitialBasalSchedule(_:scheduleOffset:),PodCommsSession.programInitialBasalSchedule(_:scheduleOffset:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
configureAlerts(_:acknowledgeAll:beepBlock:),PodCommsSession.configureAlerts(_:acknowledgeAll:beepBlock:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
beepConfig(beepType:tempBasalCompletionBeep:bolusCompletionBeep:),PodCommsSession.beepConfig(beepType:tempBasalCompletionBeep:bolusCompletionBeep:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
markSetupProgressCompleted(statusResponse:),PodCommsSession.markSetupProgressCompleted(statusResponse:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
insertCannula(optionalAlerts:silent:),PodCommsSession.insertCannula(optionalAlerts:silent:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
checkInsertionCompleted(),PodCommsSession.checkInsertionCompleted() in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
bolus(units:automatic:acknowledgementBeep:completionBeep:programReminderInterval:extendedUnits:extendedDuration:),PodCommsSession.bolus(units:automatic:acknowledgementBeep:completionBeep:programReminderInterval:extendedUnits:extendedDuration:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
setTempBasal(rate:duration:isHighTemp:automatic:acknowledgementBeep:completionBeep:programReminderInterval:),PodCommsSession.setTempBasal(rate:duration:isHighTemp:automatic:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
handleCancelDosing(deliveryType:bolusNotDelivered:),PodCommsSession.handleCancelDosing(deliveryType:bolusNotDelivered:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
suspendDelivery(suspendReminder:silent:beepBlock:),PodCommsSession.suspendDelivery(suspendReminder:silent:beepBlock:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
cancelSuspendAlerts(),PodCommsSession.cancelSuspendAlerts() in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
cancelDelivery(deliveryType:beepType:beepBlock:),PodCommsSession.cancelDelivery(deliveryType:beepType:beepBlock:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
setTime(timeZone:basalSchedule:date:acknowledgementBeep:),PodCommsSession.setTime(timeZone:basalSchedule:date:acknowledgementBeep:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
setBasalSchedule(schedule:scheduleOffset:acknowledgementBeep:programReminderInterval:),PodCommsSession.setBasalSchedule(schedule:scheduleOffset:acknowledgementBeep:programReminderInterval:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
resumeBasal(schedule:scheduleOffset:acknowledgementBeep:programReminderInterval:),PodCommsSession.resumeBasal(schedule:scheduleOffset:acknowledgementBeep:programReminderInterval:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
cancelNone(beepBlock:),PodCommsSession.cancelNone(beepBlock:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
getStatus(beepBlock:),PodCommsSession.getStatus(beepBlock:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
getDetailedStatus(beepBlock:),PodCommsSession.getDetailedStatus(beepBlock:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
readPodInfo(podInfoResponseSubType:beepBlock:),PodCommsSession.readPodInfo(podInfoResponseSubType:beepBlock:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
unacknowledgedCommandWasReceived(pendingCommand:podStatus:),PodCommsSession.unacknowledgedCommandWasReceived(pendingCommand:podStatus:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
recoverUnacknowledgedCommand(using:),PodCommsSession.recoverUnacknowledgedCommand(using:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
deactivatePod(),PodCommsSession.deactivatePod() in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
acknowledgeAlerts(alerts:beepBlock:),PodCommsSession.acknowledgeAlerts(alerts:beepBlock:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
dosesForStorage(_:),PodCommsSession.dosesForStorage(_:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
assertOnSessionQueue(),PodCommsSession.assertOnSessionQueue() in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
sendMessage(_:),MessageTransport.sendMessage(_:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
assertOnSessionQueue(),MessageTransport.assertOnSessionQueue() in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
messageTransport(_:didUpdate:),MessageTransportDelegate.messageTransport(_:didUpdate:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
podCommsSession(_:didChange:),PodCommsSessionDelegate.podCommsSession(_:didChange:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
decodeBlocks(data:),Message.decodeBlocks(data:) in OmniBLE/OmniBLE/OmnipodCommon/Message.swift
encoded(),Message.encoded() in OmniBLE/OmniBLE/OmnipodCommon/Message.swift
incrementMsgSeq(_:),PodMessageTransport.incrementMsgSeq(_:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
incrementNonceSeq(_:),PodMessageTransport.incrementNonceSeq(_:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
incrementMessageNumber(_:),PodMessageTransport.incrementMessageNumber(_:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
sendMessage(_:),PodMessageTransport.sendMessage(_:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
getCmdMessage(cmd:),PodMessageTransport.getCmdMessage(cmd:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
readAndAckResponse(),PodMessageTransport.readAndAckResponse() in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
parseResponse(decrypted:),PodMessageTransport.parseResponse(decrypted:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
getAck(response:),PodMessageTransport.getAck(response:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
assertOnSessionQueue(),PodMessageTransport.assertOnSessionQueue() in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
parse(payload:),MessagePacket.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/MessagePacket.swift
asData(forEncryption:),MessagePacket.asData(forEncryption:) in OmniBLE/OmniBLE/Bluetooth/MessagePacket.swift
decrypt(_:_:),EnDecrypt.decrypt(_:_:) in OmniBLE/OmniBLE/Bluetooth/EnDecrypt/EnDecrypt.swift
encrypt(_:_:),EnDecrypt.encrypt(_:_:) in OmniBLE/OmniBLE/Bluetooth/EnDecrypt/EnDecrypt.swift
didSend(_:),MessageLogger.didSend(_:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
didReceive(_:),MessageLogger.didReceive(_:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
didError(_:),MessageLogger.didError(_:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
podComms(_:didChange:),PodCommsDelegate.podComms(_:didChange:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
podCommsDidEstablishSession(_:),PodCommsDelegate.podCommsDidEstablishSession(_:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
updatePodStateFromPodComms(_:),OmniBLEPumpManagerState.updatePodStateFromPodComms(_:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManagerState.swift
shouldBeepForCommand(automatic:),BeepPreference.shouldBeepForCommand(automatic:) in OmniBLE/OmniBLE/OmnipodCommon/BeepPreference.swift
toData(),EapAkaAttribute.toData() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
parseAttributes(payload:),EapAkaAttribute.parseAttributes(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
toData(),EapAkaAttributeRand.toData() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
parse(_:),EapAkaAttributeRand.parse(_:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
toData(),EapAkaAttributeAutn.toData() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
parse(_:),EapAkaAttributeAutn.parse(_:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
toData(),EapAkaAttributeAuts.toData() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
parse(payload:),EapAkaAttributeAuts.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
toData(),EapAkaAttributeRes.toData() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
parse(payload:),EapAkaAttributeRes.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
toData(),EapAkaAttributeCustomIV.toData() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
parse(payload:),EapAkaAttributeCustomIV.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
toData(),EapAkaAttributeClientErrorCode.toData() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
parse(payload:),EapAkaAttributeClientErrorCode.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
expirationReminderHourString(_:),ExpirationReminderPickerView.expirationReminderHourString(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ExpirationReminderPickerView.swift
saveTapped(),ScheduledExpirationReminderEditView.saveTapped() in OmniBLE/OmniBLE/PumpManagerUI/Views/ScheduledExpirationReminderEditView.swift
scheduledReminderDateString(_:),ScheduledExpirationReminderEditView.scheduledReminderDateString(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ScheduledExpirationReminderEditView.swift
alert(error:),ScheduledExpirationReminderEditView.alert(error:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ScheduledExpirationReminderEditView.swift
makeEntries(rate:duration:),RateEntry.makeEntries(rate:duration:) in OmniBLE/OmniBLE/OmnipodCommon/BasalDeliveryTable.swift
updatePodPublicData(_:),KeyExchange.updatePodPublicData(_:) in OmniBLE/OmniBLE/Bluetooth/Pair/KeyExchange.swift
validatePodConf(_:),KeyExchange.validatePodConf(_:) in OmniBLE/OmniBLE/Bluetooth/Pair/KeyExchange.swift
generateKeys(),KeyExchange.generateKeys() in OmniBLE/OmniBLE/Bluetooth/Pair/KeyExchange.swift
aesCmac(_:_:),KeyExchange.aesCmac(_:_:) in OmniBLE/OmniBLE/Bluetooth/Pair/KeyExchange.swift
generatePrivateKey(),PrivateKeyGenerator.generatePrivateKey() in OmniBLE/OmniBLE/Bluetooth/Util/X25519KeyGenerator.swift
publicFromPrivate(_:),PrivateKeyGenerator.publicFromPrivate(_:) in OmniBLE/OmniBLE/Bluetooth/Util/X25519KeyGenerator.swift
computeSharedSecret(_:_:),PrivateKeyGenerator.computeSharedSecret(_:_:) in OmniBLE/OmniBLE/Bluetooth/Util/X25519KeyGenerator.swift
symbolColor(using:),ErrorCriticality.symbolColor(using:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/ErrorView.swift
typeCode(),DeliverySchedule.typeCode() in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
checksum(),DeliverySchedule.checksum() in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
numSegments(),BolusDeliveryTable.numSegments() in OmniBLE/OmniBLE/OmnipodCommon/BolusDeliveryTable.swift
checksum(),InsulinTableEntry.checksum() in OmniBLE/OmniBLE/OmnipodCommon/InsulinTableEntry.swift
rateToTableEntries(rate:duration:),BasalDeliveryTable.rateToTableEntries(rate:duration:) in OmniBLE/OmniBLE/OmnipodCommon/BasalDeliveryTable.swift
numSegments(),BasalDeliveryTable.numSegments() in OmniBLE/OmniBLE/OmnipodCommon/BasalDeliveryTable.swift
playTestBeepsAndHandleError(),PlayTestBeepsView.playTestBeepsAndHandleError() in OmniBLE/OmniBLE/PumpManagerUI/Views/PlayTestBeepsView.swift
alert(error:),PlayTestBeepsView.alert(error:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PlayTestBeepsView.swift
playTestBeeps(),DiagnosticCommands.playTestBeeps() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDiagnosticsView.swift
readPulseLog(),DiagnosticCommands.readPulseLog() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDiagnosticsView.swift
readPulseLogPlus(),DiagnosticCommands.readPulseLogPlus() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDiagnosticsView.swift
readActivationTime(),DiagnosticCommands.readActivationTime() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDiagnosticsView.swift
readTriggeredAlerts(),DiagnosticCommands.readTriggeredAlerts() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDiagnosticsView.swift
getDetailedStatus(),DiagnosticCommands.getDetailedStatus() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDiagnosticsView.swift
pumpManagerDetails(),DiagnosticCommands.pumpManagerDetails() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDiagnosticsView.swift
scheduledReminderDateString(_:),NotificationSettingsView.scheduledReminderDateString(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/NotificationSettingsView.swift
timerParameters(),PodDoseProgressEstimator.timerParameters() in OmniBLE/OmniBLE/OmnipodCommon/PodDoseProgressEstimator.swift
pairAndPrime(),PairPodViewModel.pairAndPrime() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/PairPodViewModel.swift
continueButtonTapped(),PairPodViewModel.continueButtonTapped() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/PairPodViewModel.swift
pairAndPrimePod(completion:),PodPairer.pairAndPrimePod(completion:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/PairPodViewModel.swift
discardPod(completion:),PodPairer.discardPod(completion:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/PairPodViewModel.swift
color(using:),NavBarButtonAction.color(using:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/PairPodViewModel.swift
progressColor(guidanceColors:),PodLifeState.progressColor(guidanceColors:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/PodLifeState.swift
labelColor(using:),PodLifeState.labelColor(using:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/PodLifeState.swift
next(),DashUIScreen.next() in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
attemptAction(),ReadPodInfoView.attemptAction() in OmniBLE/OmniBLE/PumpManagerUI/Views/ReadPodInfoView.swift
alert(error:),ReadPodInfoView.alert(error:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ReadPodInfoView.swift
formatValue(_:),LowReservoirReminderEditView.formatValue(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/LowReservoirReminderEditView.swift
saveTapped(),LowReservoirReminderEditView.saveTapped() in OmniBLE/OmniBLE/PumpManagerUI/Views/LowReservoirReminderEditView.swift
alert(error:),LowReservoirReminderEditView.alert(error:) in OmniBLE/OmniBLE/PumpManagerUI/Views/LowReservoirReminderEditView.swift
generatePrivateKey(),X25519KeyGenerator.generatePrivateKey() in OmniBLE/OmniBLE/Bluetooth/Util/X25519KeyGenerator.swift
publicFromPrivate(_:),X25519KeyGenerator.publicFromPrivate(_:) in OmniBLE/OmniBLE/Bluetooth/Util/X25519KeyGenerator.swift
computeSharedSecret(_:_:),X25519KeyGenerator.computeSharedSecret(_:_:) in OmniBLE/OmniBLE/Bluetooth/Util/X25519KeyGenerator.swift
insertCannula(completion:),CannulaInserter.insertCannula(completion:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/InsertCannulaViewModel.swift
checkCannulaInsertionFinished(completion:),CannulaInserter.checkCannulaInsertionFinished(completion:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/InsertCannulaViewModel.swift
checkCannulaInsertionFinished(),InsertCannulaViewModel.checkCannulaInsertionFinished() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/InsertCannulaViewModel.swift
insertCannula(),InsertCannulaViewModel.insertCannula() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/InsertCannulaViewModel.swift
continueButtonTapped(),InsertCannulaViewModel.continueButtonTapped() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/InsertCannulaViewModel.swift
negotiateSessionKeys(),SessionEstablisher.negotiateSessionKeys() in OmniBLE/OmniBLE/Bluetooth/Session/SessionEstablisher.swift
eapAkaChallenge(),SessionEstablisher.eapAkaChallenge() in OmniBLE/OmniBLE/Bluetooth/Session/SessionEstablisher.swift
assertIdentifier(msg:),SessionEstablisher.assertIdentifier(msg:) in OmniBLE/OmniBLE/Bluetooth/Session/SessionEstablisher.swift
processChallengeResponse(challengeResponse:),SessionEstablisher.processChallengeResponse(challengeResponse:) in OmniBLE/OmniBLE/Bluetooth/Session/SessionEstablisher.swift
assertValidAkaMessage(eapMsg:),SessionEstablisher.assertValidAkaMessage(eapMsg:) in OmniBLE/OmniBLE/Bluetooth/Session/SessionEstablisher.swift
isResynchronization(eapMsg:),SessionEstablisher.isResynchronization(eapMsg:) in OmniBLE/OmniBLE/Bluetooth/Session/SessionEstablisher.swift
eapSuccess(),SessionEstablisher.eapSuccess() in OmniBLE/OmniBLE/Bluetooth/Session/SessionEstablisher.swift
toData(),EapMessage.toData() in OmniBLE/OmniBLE/Bluetooth/Session/EapMessage.swift
parse(payload:),EapMessage.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapMessage.swift
splitInPackets(),PayloadSplitter.splitInPackets() in OmniBLE/OmniBLE/Bluetooth/Packet/PayloadSplitter.swift
splitInOnePacket(),PayloadSplitter.splitInOnePacket() in OmniBLE/OmniBLE/Bluetooth/Packet/PayloadSplitter.swift
toData(),BlePacket.toData() in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
alert(error:),BeepPreferenceSelectionView.alert(error:) in OmniBLE/OmniBLE/PumpManagerUI/Views/BeepPreferenceSelectionView.swift
alert(error:),SilencePodSelectionView.alert(error:) in OmniBLE/OmniBLE/PumpManagerUI/Views/SilencePodSelectionView.swift
pumpManager(_:didUpdate:oldStatus:),DeliveryUncertaintyRecoveryViewModel.pumpManager(_:didUpdate:oldStatus:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/DeliveryUncertaintyRecoveryViewModel.swift
podDeactivationChosen(),DeliveryUncertaintyRecoveryViewModel.podDeactivationChosen() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/DeliveryUncertaintyRecoveryViewModel.swift
navigateTo(_:),DashUINavigator.navigateTo(_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
viewControllerForScreen(_:),DashUICoordinator.viewControllerForScreen(_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
stepFinished(),DashUICoordinator.stepFinished() in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
setupCanceled(),DashUICoordinator.setupCanceled() in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
determineInitialStep(),DashUICoordinator.determineInitialStep() in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
viewWillAppear(_:),DashUICoordinator.viewWillAppear(_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
viewDidLoad(),DashUICoordinator.viewDidLoad() in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
viewDidDisappear(_:),DashUICoordinator.viewDidDisappear(_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
navigationController(_:willShow:animated:),DashUICoordinator.navigationController(_:willShow:animated:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
activeTimeText(_:),PodDetailsView.activeTimeText(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDetailsView.swift
insertCannula(completion:),MockCannulaInserter.insertCannula(completion:) in OmniBLE/OmniBLE/PumpManagerUI/Views/InsertCannulaView.swift
checkCannulaInsertionFinished(completion:),MockCannulaInserter.checkCannulaInsertionFinished(completion:) in OmniBLE/OmniBLE/PumpManagerUI/Views/InsertCannulaView.swift
toData(),FirstBlePacket.toData() in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
parse(payload:),FirstBlePacket.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
toData(),MiddleBlePacket.toData() in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
parse(payload:),MiddleBlePacket.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
toData(),LastBlePacket.toData() in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
parse(payload:),LastBlePacket.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
toData(),LastOptionalPlusOneBlePacket.toData() in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
parse(payload:),LastOptionalPlusOneBlePacket.parse(payload:) in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
negotiateLTK(),LTKExchanger.negotiateLTK() in OmniBLE/OmniBLE/Bluetooth/Pair/LTKExchanger.swift
throwOnSendError(_:_:),LTKExchanger.throwOnSendError(_:_:) in OmniBLE/OmniBLE/Bluetooth/Pair/LTKExchanger.swift
processSps1FromPod(_:),LTKExchanger.processSps1FromPod(_:) in OmniBLE/OmniBLE/Bluetooth/Pair/LTKExchanger.swift
validatePodSps2(_:),LTKExchanger.validatePodSps2(_:) in OmniBLE/OmniBLE/Bluetooth/Pair/LTKExchanger.swift
sp2(),LTKExchanger.sp2() in OmniBLE/OmniBLE/Bluetooth/Pair/LTKExchanger.swift
validateP0(_:),LTKExchanger.validateP0(_:) in OmniBLE/OmniBLE/Bluetooth/Pair/LTKExchanger.swift
changeTimeZoneTapped(),OmniBLESettingsViewModel.changeTimeZoneTapped() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
doneTapped(),OmniBLESettingsViewModel.doneTapped() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
stopUsingOmnipodDashTapped(),OmniBLESettingsViewModel.stopUsingOmnipodDashTapped() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
suspendDelivery(duration:),OmniBLESettingsViewModel.suspendDelivery(duration:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
resumeDelivery(),OmniBLESettingsViewModel.resumeDelivery() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
runTemporaryBasalProgram(unitsPerHour:for:completion:),OmniBLESettingsViewModel.runTemporaryBasalProgram(unitsPerHour:for:completion:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
saveScheduledExpirationReminder(_:_:),OmniBLESettingsViewModel.saveScheduledExpirationReminder(_:_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
saveLowReservoirReminder(_:_:),OmniBLESettingsViewModel.saveLowReservoirReminder(_:_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
playTestBeeps(),OmniBLESettingsViewModel.playTestBeeps() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
setConfirmationBeeps(_:_:),OmniBLESettingsViewModel.setConfirmationBeeps(_:_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
setSilencePod(_:_:),OmniBLESettingsViewModel.setSilencePod(_:_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
didChangeInsulinType(_:),OmniBLESettingsViewModel.didChangeInsulinType(_:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
reservoirText(for:),OmniBLESettingsViewModel.reservoirText(for:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
suspendResumeButtonColor(guidanceColors:),OmniBLESettingsViewModel.suspendResumeButtonColor(guidanceColors:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
suspendResumeActionColor(),OmniBLESettingsViewModel.suspendResumeActionColor() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
makeUIView(context:),BasalStateSwiftUIView.makeUIView(context:) in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
updateUIView(_:context:),BasalStateSwiftUIView.updateUIView(_:context:) in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
layoutSubviews(),BasalStateView.layoutSubviews() in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
tintColorDidChange(),BasalStateView.tintColorDidChange() in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
updateTintColor(),BasalStateView.updateTintColor() in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
drawPath(),BasalStateView.drawPath() in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
animateToPath(_:),BasalStateView.animateToPath(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
set(_:_:),Flag.set(_:_:) in OmniBLE/OmniBLE/Bluetooth/MessagePacket.swift
get(_:),Flag.get(_:) in OmniBLE/OmniBLE/Bluetooth/MessagePacket.swift
formatRate(_:),ManualTempBasalEntryView.formatRate(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ManualTempBasalEntryView.swift
formatDuration(_:),ManualTempBasalEntryView.formatDuration(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ManualTempBasalEntryView.swift
errorMessage(error:),ManualTempBasalEntryView.errorMessage(error:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ManualTempBasalEntryView.swift
didLongPressOnTitle(),PodSetupView.didLongPressOnTitle() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodSetupView.swift
fetchDetailedStatus(),ReadPodStatusView.fetchDetailedStatus() in OmniBLE/OmniBLE/PumpManagerUI/Views/ReadPodStatusView.swift
alert(error:),ReadPodStatusView.alert(error:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ReadPodStatusView.swift
accumulate(packet:),PayloadJoiner.accumulate(packet:) in OmniBLE/OmniBLE/Bluetooth/Packet/PayloadJoiner.swift
finalize(),PayloadJoiner.finalize() in OmniBLE/OmniBLE/Bluetooth/Packet/PayloadJoiner.swift
deactivatePod(completion:),PodDeactivater.deactivatePod(completion:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/DeactivatePodViewModel.swift
forgetPod(completion:),PodDeactivater.forgetPod(completion:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/DeactivatePodViewModel.swift
continueButtonTapped(),DeactivatePodViewModel.continueButtonTapped() in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/DeactivatePodViewModel.swift
discardPod(navigateOnCompletion:),DeactivatePodViewModel.discardPod(navigateOnCompletion:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/DeactivatePodViewModel.swift
formatValue(_:),LowReservoirReminderSetupView.formatValue(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/LowReservoirReminderSetupView.swift
continueWithType(_:),InsulinTypeConfirmation.continueWithType(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/InsulinTypeConfirmation.swift
dateComponents(date:timeZone:),SetupPodCommand.dateComponents(date:timeZone:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetupPodCommand.swift
date(from:timeZone:),SetupPodCommand.date(from:timeZone:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetupPodCommand.swift
cancelDelete(),OmniBLESettingsView.cancelDelete() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
suspendResumeTapped(),OmniBLESettingsView.suspendResumeTapped() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
manualBasalTapped(),OmniBLESettingsView.manualBasalTapped() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
cancelManualBasal(),OmniBLESettingsView.cancelManualBasal() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
errorText(_:),OmniBLESettingsView.errorText(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
alert(for:),OmniBLESettingsView.alert(for:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
reservoirColor(for:),OmniBLESettingsView.reservoirColor(for:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
scheduledReminderDateString(_:),SetupCompleteView.scheduledReminderDateString(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/SetupCompleteView.swift
makeUIViewController(context:),ActivityView.makeUIViewController(context:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ActivityView.swift
updateUIViewController(_:context:),ActivityView.updateUIViewController(_:context:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ActivityView.swift
makeUIViewController(context:),ActivityViewController.makeUIViewController(context:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ActivityView.swift
updateUIViewController(_:context:),ActivityViewController.updateUIViewController(_:context:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ActivityView.swift
rateToTableEntries(rate:duration:),BasalDeliveryTable.rateToTableEntries(rate:duration:) in OmniKit/OmniKit/OmnipodCommon/BasalDeliveryTable.swift
numSegments(),BasalDeliveryTable.numSegments() in OmniKit/OmniKit/OmnipodCommon/BasalDeliveryTable.swift
rateAt(offset:),BasalSchedule.rateAt(offset:) in OmniKit/OmniKit/OmnipodCommon/BasalSchedule.swift
currentRate(using:at:),BasalSchedule.currentRate(using:at:) in OmniKit/OmniKit/OmnipodCommon/BasalSchedule.swift
lookup(offset:),BasalSchedule.lookup(offset:) in OmniKit/OmniKit/OmnipodCommon/BasalSchedule.swift
durations(),BasalSchedule.durations() in OmniKit/OmniKit/OmnipodCommon/BasalSchedule.swift
checksum(),InsulinTableEntry.checksum() in OmniKit/OmniKit/OmnipodCommon/InsulinTableEntry.swift
makeEntries(rate:duration:),RateEntry.makeEntries(rate:duration:) in OmniKit/OmniKit/OmnipodCommon/BasalDeliveryTable.swift
index(after:),AlertSet.index(after:) in OmniKit/OmniKit/OmnipodCommon/AlertSlot.swift
compare(to:),AlertSet.compare(to:) in OmniKit/OmniKit/OmnipodCommon/AlertSlot.swift
typeCode(),DeliverySchedule.typeCode() in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
checksum(),DeliverySchedule.checksum() in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
numSegments(),BolusDeliveryTable.numSegments() in OmniKit/OmniKit/OmnipodCommon/BolusDeliveryTable.swift
updatePodStateFromPodComms(_:),OmnipodPumpManagerState.updatePodStateFromPodComms(_:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManagerState.swift
shouldBeepForCommand(automatic:),BeepPreference.shouldBeepForCommand(automatic:) in OmniKit/OmniKit/OmnipodCommon/BeepPreference.swift
progress(at:),UnfinalizedDose.progress(at:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
isFinished(at:),UnfinalizedDose.isFinished(at:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
cancel(at:withRemaining:),UnfinalizedDose.cancel(at:withRemaining:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
isMutable(at:),UnfinalizedDose.isMutable(at:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
advanceToNextNonce(),PodState.advanceToNextNonce() in OmniKit/OmniKit/PumpManager/PodState.swift
resyncNonce(syncWord:sentNonce:messageSequenceNum:),PodState.resyncNonce(syncWord:sentNonce:messageSequenceNum:) in OmniKit/OmniKit/PumpManager/PodState.swift
updatePodTimes(timeActive:),PodState.updatePodTimes(timeActive:) in OmniKit/OmniKit/PumpManager/PodState.swift
updateFromStatusResponse(_:at:),PodState.updateFromStatusResponse(_:at:) in OmniKit/OmniKit/PumpManager/PodState.swift
registerConfiguredAlert(slot:alert:),PodState.registerConfiguredAlert(slot:alert:) in OmniKit/OmniKit/PumpManager/PodState.swift
finalizeAllDoses(),PodState.finalizeAllDoses() in OmniKit/OmniKit/PumpManager/PodState.swift
resolveAnyPendingCommandWithUncertainty(),PodState.resolveAnyPendingCommandWithUncertainty() in OmniKit/OmniKit/PumpManager/PodState.swift
updateDeliveryStatus(deliveryStatus:podProgressStatus:bolusNotDelivered:at:),PodState.updateDeliveryStatus(deliveryStatus:podProgressStatus:bolusNotDelivered:at:) in OmniKit/OmniKit/PumpManager/PodState.swift
==(_:_:),PendingCommand.==(_:_:) in OmniKit/OmniKit/OmnipodCommon/PendingCommand.swift
==(_:_:),StartProgram.==(_:_:) in OmniKit/OmniKit/OmnipodCommon/PendingCommand.swift
generateEntry(),NonceState.generateEntry() in OmniKit/OmniKit/PumpManager/PodState.swift
advanceToNextNonce(),NonceState.advanceToNextNonce() in OmniKit/OmniKit/PumpManager/PodState.swift
podComms(_:didChange:),PodCommsDelegate.podComms(_:didChange:) in OmniKit/OmniKit/PumpManager/PodComms.swift
updateInsulinType(_:),PodComms.updateInsulinType(_:) in OmniKit/OmniKit/PumpManager/PodComms.swift
forgetPod(),PodComms.forgetPod() in OmniKit/OmniKit/PumpManager/PodComms.swift
mockPodStateChanges(_:),PodComms.mockPodStateChanges(_:) in OmniKit/OmniKit/PumpManager/PodComms.swift
sendPairMessage(address:transport:message:insulinType:),PodComms.sendPairMessage(address:transport:message:insulinType:) in OmniKit/OmniKit/PumpManager/PodComms.swift
assignAddress(address:commandSession:insulinType:),PodComms.assignAddress(address:commandSession:insulinType:) in OmniKit/OmniKit/PumpManager/PodComms.swift
setupPod(podState:timeZone:commandSession:insulinType:),PodComms.setupPod(podState:timeZone:commandSession:insulinType:) in OmniKit/OmniKit/PumpManager/PodComms.swift
assignAddressAndSetupPod(address:using:timeZone:messageLogger:insulinType:_:),PodComms.assignAddressAndSetupPod(address:using:timeZone:messageLogger:insulinType:_:) in OmniKit/OmniKit/PumpManager/PodComms.swift
runSession(withName:using:_:),PodComms.runSession(withName:using:_:) in OmniKit/OmniKit/PumpManager/PodComms.swift
configureDevice(_:with:),PodComms.configureDevice(_:with:) in OmniKit/OmniKit/PumpManager/PodComms.swift
deviceRadioConfigDidChange(_:),PodComms.deviceRadioConfigDidChange(_:) in OmniKit/OmniKit/PumpManager/PodComms.swift
maxBodyLen(),PacketType.maxBodyLen() in OmniKit/OmniKit/MessageTransport/Packet.swift
handlePodFault(fault:),PodCommsSession.handlePodFault(fault:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
throwPodFault(fault:),PodCommsSession.throwPodFault(fault:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
send(_:beepBlock:expectFollowOnMessage:),PodCommsSession.send(_:beepBlock:expectFollowOnMessage:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
prime(),PodCommsSession.prime() in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
programInitialBasalSchedule(_:scheduleOffset:),PodCommsSession.programInitialBasalSchedule(_:scheduleOffset:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
configureAlerts(_:acknowledgeAll:beepBlock:),PodCommsSession.configureAlerts(_:acknowledgeAll:beepBlock:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
beepConfig(beepType:tempBasalCompletionBeep:bolusCompletionBeep:),PodCommsSession.beepConfig(beepType:tempBasalCompletionBeep:bolusCompletionBeep:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
markSetupProgressCompleted(statusResponse:),PodCommsSession.markSetupProgressCompleted(statusResponse:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
insertCannula(optionalAlerts:silent:),PodCommsSession.insertCannula(optionalAlerts:silent:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
checkInsertionCompleted(),PodCommsSession.checkInsertionCompleted() in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
bolus(units:automatic:acknowledgementBeep:completionBeep:programReminderInterval:extendedUnits:extendedDuration:),PodCommsSession.bolus(units:automatic:acknowledgementBeep:completionBeep:programReminderInterval:extendedUnits:extendedDuration:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
setTempBasal(rate:duration:isHighTemp:automatic:acknowledgementBeep:completionBeep:programReminderInterval:),PodCommsSession.setTempBasal(rate:duration:isHighTemp:automatic:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
handleCancelDosing(deliveryType:bolusNotDelivered:),PodCommsSession.handleCancelDosing(deliveryType:bolusNotDelivered:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
suspendDelivery(suspendReminder:silent:beepBlock:),PodCommsSession.suspendDelivery(suspendReminder:silent:beepBlock:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
cancelSuspendAlerts(),PodCommsSession.cancelSuspendAlerts() in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
cancelDelivery(deliveryType:beepType:beepBlock:),PodCommsSession.cancelDelivery(deliveryType:beepType:beepBlock:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
setTime(timeZone:basalSchedule:date:acknowledgementBeep:),PodCommsSession.setTime(timeZone:basalSchedule:date:acknowledgementBeep:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
setBasalSchedule(schedule:scheduleOffset:acknowledgementBeep:programReminderInterval:),PodCommsSession.setBasalSchedule(schedule:scheduleOffset:acknowledgementBeep:programReminderInterval:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
resumeBasal(schedule:scheduleOffset:acknowledgementBeep:programReminderInterval:),PodCommsSession.resumeBasal(schedule:scheduleOffset:acknowledgementBeep:programReminderInterval:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
cancelNone(beepBlock:),PodCommsSession.cancelNone(beepBlock:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
getStatus(beepBlock:),PodCommsSession.getStatus(beepBlock:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
getDetailedStatus(beepBlock:),PodCommsSession.getDetailedStatus(beepBlock:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
readPodInfo(podInfoResponseSubType:beepBlock:),PodCommsSession.readPodInfo(podInfoResponseSubType:beepBlock:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
unacknowledgedCommandWasReceived(pendingCommand:podStatus:),PodCommsSession.unacknowledgedCommandWasReceived(pendingCommand:podStatus:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
recoverUnacknowledgedCommand(using:),PodCommsSession.recoverUnacknowledgedCommand(using:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
deactivatePod(),PodCommsSession.deactivatePod() in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
acknowledgeAlerts(alerts:beepBlock:),PodCommsSession.acknowledgeAlerts(alerts:beepBlock:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
dosesForStorage(_:),PodCommsSession.dosesForStorage(_:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
assertOnSessionQueue(),PodCommsSession.assertOnSessionQueue() in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
sendMessage(_:),MessageTransport.sendMessage(_:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
assertOnSessionQueue(),MessageTransport.assertOnSessionQueue() in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
messageTransport(_:didUpdate:),MessageTransportDelegate.messageTransport(_:didUpdate:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
podCommsSession(_:didChange:),PodCommsSessionDelegate.podCommsSession(_:didChange:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
decodeBlocks(data:),Message.decodeBlocks(data:) in OmniKit/OmniKit/OmnipodCommon/Message.swift
encoded(),Message.encoded() in OmniKit/OmniKit/OmnipodCommon/Message.swift
incrementPacketNumber(_:),PodMessageTransport.incrementPacketNumber(_:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
incrementMessageNumber(_:),PodMessageTransport.incrementMessageNumber(_:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
makeAckPacket(),PodMessageTransport.makeAckPacket() in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
ackUntilQuiet(),PodMessageTransport.ackUntilQuiet() in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
exchangePackets(packet:repeatCount:packetResponseTimeout:exchangeTimeout:preambleExtension:),PodMessageTransport.exchangePackets(packet:repeatCount:packetResponseTimeout:exchangeTimeout:preambleExtension:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
sendMessage(_:),PodMessageTransport.sendMessage(_:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
assertOnSessionQueue(),PodMessageTransport.assertOnSessionQueue() in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
encoded(),Packet.encoded() in OmniKit/OmniKit/MessageTransport/Packet.swift
didSend(_:),MessageLogger.didSend(_:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
didReceive(_:),MessageLogger.didReceive(_:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
didError(_:),MessageLogger.didError(_:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
timerParameters(),PodDoseProgressEstimator.timerParameters() in OmniKit/OmniKit/OmnipodCommon/PodDoseProgressEstimator.swift
podStateDidUpdate(_:),PodStateObserver.podStateDidUpdate(_:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
setState(_:),OmnipodPumpManager.setState(_:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
setStateWithResult(_:),OmnipodPumpManager.setStateWithResult(_:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
notifyStatusObservers(oldStatus:),OmnipodPumpManager.notifyStatusObservers(oldStatus:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
logDeviceCommunication(_:type:),OmnipodPumpManager.logDeviceCommunication(_:type:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
deviceTimerDidTick(_:),OmnipodPumpManager.deviceTimerDidTick(_:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
device(_:didUpdateBattery:),OmnipodPumpManager.device(_:didUpdateBattery:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
dateComponents(date:timeZone:),SetupPodCommand.dateComponents(date:timeZone:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetupPodCommand.swift
date(from:timeZone:),SetupPodCommand.date(from:timeZone:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetupPodCommand.swift
alert(error:),BeepPreferenceSelectionView.alert(error:) in OmniKit/OmniKitUI/Views/BeepPreferenceSelectionView.swift
alert(for:),AttachPodView.alert(for:) in OmniKit/OmniKitUI/Views/AttachPodView.swift
deactivatePod(completion:),PodDeactivater.deactivatePod(completion:) in OmniKit/OmniKitUI/ViewModels/DeactivatePodViewModel.swift
forgetPod(completion:),PodDeactivater.forgetPod(completion:) in OmniKit/OmniKitUI/ViewModels/DeactivatePodViewModel.swift
continueButtonTapped(),DeactivatePodViewModel.continueButtonTapped() in OmniKit/OmniKitUI/ViewModels/DeactivatePodViewModel.swift
discardPod(navigateOnCompletion:),DeactivatePodViewModel.discardPod(navigateOnCompletion:) in OmniKit/OmniKitUI/ViewModels/DeactivatePodViewModel.swift
makeUIViewController(context:),ActivityView.makeUIViewController(context:) in OmniKit/OmniKitUI/Views/ActivityView.swift
updateUIViewController(_:context:),ActivityView.updateUIViewController(_:context:) in OmniKit/OmniKitUI/Views/ActivityView.swift
makeUIViewController(context:),ActivityViewController.makeUIViewController(context:) in OmniKit/OmniKitUI/Views/ActivityView.swift
updateUIViewController(_:context:),ActivityViewController.updateUIViewController(_:context:) in OmniKit/OmniKitUI/Views/ActivityView.swift
instantiate(),OmnipodReservoirView.instantiate() in OmniKit/OmniKitUI/Views/OmnipodReservoirView.swift
awakeFromNib(),OmnipodReservoirView.awakeFromNib() in OmniKit/OmniKitUI/Views/OmnipodReservoirView.swift
tintColorDidChange(),OmnipodReservoirView.tintColorDidChange() in OmniKit/OmniKitUI/Views/OmnipodReservoirView.swift
updateColor(),OmnipodReservoirView.updateColor() in OmniKit/OmniKitUI/Views/OmnipodReservoirView.swift
updateViews(),OmnipodReservoirView.updateViews() in OmniKit/OmniKitUI/Views/OmnipodReservoirView.swift
update(level:at:reservoirLevelHighlightState:),OmnipodReservoirView.update(level:at:reservoirLevelHighlightState:) in OmniKit/OmniKitUI/Views/OmnipodReservoirView.swift
nib(),NibLoadable.nib() in OmniKit/OmniKitUI/Extensions/NibLoadable.swift
formatValue(_:),LowReservoirReminderEditView.formatValue(_:) in OmniKit/OmniKitUI/Views/LowReservoirReminderEditView.swift
saveTapped(),LowReservoirReminderEditView.saveTapped() in OmniKit/OmniKitUI/Views/LowReservoirReminderEditView.swift
alert(error:),LowReservoirReminderEditView.alert(error:) in OmniKit/OmniKitUI/Views/LowReservoirReminderEditView.swift
expirationReminderHourString(_:),ExpirationReminderPickerView.expirationReminderHourString(_:) in OmniKit/OmniKitUI/Views/ExpirationReminderPickerView.swift
continueWithType(_:),InsulinTypeConfirmation.continueWithType(_:) in OmniKit/OmniKitUI/Views/InsulinTypeConfirmation.swift
formatRSSI(rssi:),DeliveryUncertaintyRecoveryView.formatRSSI(rssi:) in OmniKit/OmniKitUI/Views/DeliveryUncertaintyRecoveryView.swift
autoconnectBinding(for:),RileyLinkListDataSource.autoconnectBinding(for:) in OmniKit/OmniKitUI/ViewModels/RileyLinkListDataSource.swift
reloadDevices(),RileyLinkListDataSource.reloadDevices() in OmniKit/OmniKitUI/ViewModels/RileyLinkListDataSource.swift
updateRSSI(),RileyLinkListDataSource.updateRSSI() in OmniKit/OmniKitUI/ViewModels/RileyLinkListDataSource.swift
pumpManager(_:didUpdate:oldStatus:),DeliveryUncertaintyRecoveryViewModel.pumpManager(_:didUpdate:oldStatus:) in OmniKit/OmniKitUI/ViewModels/DeliveryUncertaintyRecoveryViewModel.swift
podDeactivationChosen(),DeliveryUncertaintyRecoveryViewModel.podDeactivationChosen() in OmniKit/OmniKitUI/ViewModels/DeliveryUncertaintyRecoveryViewModel.swift
formatRSSI(rssi:),RileyLinkSetupView.formatRSSI(rssi:) in OmniKit/OmniKitUI/Views/RileyLinkSetupView.swift
progressColor(guidanceColors:),PodLifeState.progressColor(guidanceColors:) in OmniKit/OmniKitUI/ViewModels/PodLifeState.swift
labelColor(using:),PodLifeState.labelColor(using:) in OmniKit/OmniKitUI/ViewModels/PodLifeState.swift
next(),OmnipodUIScreen.next() in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
insertCannula(completion:),CannulaInserter.insertCannula(completion:) in OmniKit/OmniKitUI/ViewModels/InsertCannulaViewModel.swift
checkCannulaInsertionFinished(completion:),CannulaInserter.checkCannulaInsertionFinished(completion:) in OmniKit/OmniKitUI/ViewModels/InsertCannulaViewModel.swift
checkCannulaInsertionFinished(),InsertCannulaViewModel.checkCannulaInsertionFinished() in OmniKit/OmniKitUI/ViewModels/InsertCannulaViewModel.swift
insertCannula(),InsertCannulaViewModel.insertCannula() in OmniKit/OmniKitUI/ViewModels/InsertCannulaViewModel.swift
continueButtonTapped(),InsertCannulaViewModel.continueButtonTapped() in OmniKit/OmniKitUI/ViewModels/InsertCannulaViewModel.swift
makeUIView(context:),BasalStateSwiftUIView.makeUIView(context:) in OmniKit/OmniKitUI/Views/BasalStateView.swift
updateUIView(_:context:),BasalStateSwiftUIView.updateUIView(_:context:) in OmniKit/OmniKitUI/Views/BasalStateView.swift
layoutSubviews(),BasalStateView.layoutSubviews() in OmniKit/OmniKitUI/Views/BasalStateView.swift
tintColorDidChange(),BasalStateView.tintColorDidChange() in OmniKit/OmniKitUI/Views/BasalStateView.swift
updateTintColor(),BasalStateView.updateTintColor() in OmniKit/OmniKitUI/Views/BasalStateView.swift
drawPath(),BasalStateView.drawPath() in OmniKit/OmniKitUI/Views/BasalStateView.swift
animateToPath(_:),BasalStateView.animateToPath(_:) in OmniKit/OmniKitUI/Views/BasalStateView.swift
fetchDetailedStatus(),ReadPodStatusView.fetchDetailedStatus() in OmniKit/OmniKitUI/Views/ReadPodStatusView.swift
alert(error:),ReadPodStatusView.alert(error:) in OmniKit/OmniKitUI/Views/ReadPodStatusView.swift
cancelDelete(),OmnipodSettingsView.cancelDelete() in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
suspendResumeTapped(),OmnipodSettingsView.suspendResumeTapped() in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
manualBasalTapped(),OmnipodSettingsView.manualBasalTapped() in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
cancelManualBasal(),OmnipodSettingsView.cancelManualBasal() in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
errorText(_:),OmnipodSettingsView.errorText(_:) in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
alert(for:),OmnipodSettingsView.alert(for:) in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
reservoirColor(for:),OmnipodSettingsView.reservoirColor(for:) in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
formatRSSI(rssi:),OmnipodSettingsView.formatRSSI(rssi:) in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
updateConnectionStatus(),OmnipodSettingsViewModel.updateConnectionStatus() in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
changeTimeZoneTapped(),OmnipodSettingsViewModel.changeTimeZoneTapped() in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
doneTapped(),OmnipodSettingsViewModel.doneTapped() in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
stopUsingOmnipodTapped(),OmnipodSettingsViewModel.stopUsingOmnipodTapped() in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
suspendDelivery(duration:),OmnipodSettingsViewModel.suspendDelivery(duration:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
resumeDelivery(),OmnipodSettingsViewModel.resumeDelivery() in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
runTemporaryBasalProgram(unitsPerHour:for:completion:),OmnipodSettingsViewModel.runTemporaryBasalProgram(unitsPerHour:for:completion:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
saveScheduledExpirationReminder(_:_:),OmnipodSettingsViewModel.saveScheduledExpirationReminder(_:_:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
saveLowReservoirReminder(_:_:),OmnipodSettingsViewModel.saveLowReservoirReminder(_:_:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
playTestBeeps(),OmnipodSettingsViewModel.playTestBeeps() in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
setConfirmationBeeps(_:_:),OmnipodSettingsViewModel.setConfirmationBeeps(_:_:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
setSilencePod(_:_:),OmnipodSettingsViewModel.setSilencePod(_:_:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
didChangeInsulinType(_:),OmnipodSettingsViewModel.didChangeInsulinType(_:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
reservoirText(for:),OmnipodSettingsViewModel.reservoirText(for:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
suspendResumeButtonColor(guidanceColors:),OmnipodSettingsViewModel.suspendResumeButtonColor(guidanceColors:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
suspendResumeActionColor(),OmnipodSettingsViewModel.suspendResumeActionColor() in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
playTestBeeps(),DiagnosticCommands.playTestBeeps() in OmniKit/OmniKitUI/Views/PodDiagnosticsView.swift
readPulseLog(),DiagnosticCommands.readPulseLog() in OmniKit/OmniKitUI/Views/PodDiagnosticsView.swift
readPulseLogPlus(),DiagnosticCommands.readPulseLogPlus() in OmniKit/OmniKitUI/Views/PodDiagnosticsView.swift
readActivationTime(),DiagnosticCommands.readActivationTime() in OmniKit/OmniKitUI/Views/PodDiagnosticsView.swift
readTriggeredAlerts(),DiagnosticCommands.readTriggeredAlerts() in OmniKit/OmniKitUI/Views/PodDiagnosticsView.swift
getDetailedStatus(),DiagnosticCommands.getDetailedStatus() in OmniKit/OmniKitUI/Views/PodDiagnosticsView.swift
pumpManagerDetails(),DiagnosticCommands.pumpManagerDetails() in OmniKit/OmniKitUI/Views/PodDiagnosticsView.swift
formatValue(_:),LowReservoirReminderSetupView.formatValue(_:) in OmniKit/OmniKitUI/Views/LowReservoirReminderSetupView.swift
alert(error:),SilencePodSelectionView.alert(error:) in OmniKit/OmniKitUI/Views/SilencePodSelectionView.swift
viewControllerForScreen(_:),OmnipodUICoordinator.viewControllerForScreen(_:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
stepFinished(),OmnipodUICoordinator.stepFinished() in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
navigateTo(_:),OmnipodUICoordinator.navigateTo(_:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
setupCanceled(),OmnipodUICoordinator.setupCanceled() in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
determineInitialStep(),OmnipodUICoordinator.determineInitialStep() in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
viewWillAppear(_:),OmnipodUICoordinator.viewWillAppear(_:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
viewDidDisappear(_:),OmnipodUICoordinator.viewDidDisappear(_:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
viewDidLoad(),OmnipodUICoordinator.viewDidLoad() in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
navigationController(_:willShow:animated:),OmnipodUICoordinator.navigationController(_:willShow:animated:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
formatRate(_:),ManualTempBasalEntryView.formatRate(_:) in OmniKit/OmniKitUI/Views/ManualTempBasalEntryView.swift
formatDuration(_:),ManualTempBasalEntryView.formatDuration(_:) in OmniKit/OmniKitUI/Views/ManualTempBasalEntryView.swift
errorMessage(error:),ManualTempBasalEntryView.errorMessage(error:) in OmniKit/OmniKitUI/Views/ManualTempBasalEntryView.swift
pairAndPrime(),PairPodViewModel.pairAndPrime() in OmniKit/OmniKitUI/ViewModels/PairPodViewModel.swift
continueButtonTapped(),PairPodViewModel.continueButtonTapped() in OmniKit/OmniKitUI/ViewModels/PairPodViewModel.swift
pairAndPrimePod(completion:),PodPairer.pairAndPrimePod(completion:) in OmniKit/OmniKitUI/ViewModels/PairPodViewModel.swift
discardPod(completion:),PodPairer.discardPod(completion:) in OmniKit/OmniKitUI/ViewModels/PairPodViewModel.swift
color(using:),NavBarButtonAction.color(using:) in OmniKit/OmniKitUI/ViewModels/PairPodViewModel.swift
playTestBeepsAndHandleError(),PlayTestBeepsView.playTestBeepsAndHandleError() in OmniKit/OmniKitUI/Views/PlayTestBeepsView.swift
alert(error:),PlayTestBeepsView.alert(error:) in OmniKit/OmniKitUI/Views/PlayTestBeepsView.swift
activeTimeText(_:),PodDetailsView.activeTimeText(_:) in OmniKit/OmniKitUI/Views/PodDetailsView.swift
scheduledReminderDateString(_:),NotificationSettingsView.scheduledReminderDateString(_:) in OmniKit/OmniKitUI/Views/NotificationSettingsView.swift
insertCannula(completion:),MockCannulaInserter.insertCannula(completion:) in OmniKit/OmniKitUI/Views/InsertCannulaView.swift
checkCannulaInsertionFinished(completion:),MockCannulaInserter.checkCannulaInsertionFinished(completion:) in OmniKit/OmniKitUI/Views/InsertCannulaView.swift
saveTapped(),ScheduledExpirationReminderEditView.saveTapped() in OmniKit/OmniKitUI/Views/ScheduledExpirationReminderEditView.swift
scheduledReminderDateString(_:),ScheduledExpirationReminderEditView.scheduledReminderDateString(_:) in OmniKit/OmniKitUI/Views/ScheduledExpirationReminderEditView.swift
alert(error:),ScheduledExpirationReminderEditView.alert(error:) in OmniKit/OmniKitUI/Views/ScheduledExpirationReminderEditView.swift
createHUDView(),OmnipodHUDProvider.createHUDView() in OmniKit/OmniKitUI/PumpManager/OmnipodHUDProvider.swift
didTapOnHUDView(_:allowDebugFeatures:),OmnipodHUDProvider.didTapOnHUDView(_:allowDebugFeatures:) in OmniKit/OmniKitUI/PumpManager/OmnipodHUDProvider.swift
hudDidAppear(),OmnipodHUDProvider.hudDidAppear() in OmniKit/OmniKitUI/PumpManager/OmnipodHUDProvider.swift
createHUDView(rawValue:),OmnipodHUDProvider.createHUDView(rawValue:) in OmniKit/OmniKitUI/PumpManager/OmnipodHUDProvider.swift
refresh(),OmnipodHUDProvider.refresh() in OmniKit/OmniKitUI/PumpManager/OmnipodHUDProvider.swift
updateReservoirView(),OmnipodHUDProvider.updateReservoirView() in OmniKit/OmniKitUI/PumpManager/OmnipodHUDProvider.swift
symbolColor(using:),ErrorCriticality.symbolColor(using:) in OmniKit/OmniKitUI/Views/DesignElements/ErrorView.swift
didLongPressOnTitle(),PodSetupView.didLongPressOnTitle() in OmniKit/OmniKitUI/Views/PodSetupView.swift
scheduledReminderDateString(_:),SetupCompleteView.scheduledReminderDateString(_:) in OmniKit/OmniKitUI/Views/SetupCompleteView.swift
attemptAction(),ReadPodInfoView.attemptAction() in OmniKit/OmniKitUI/Views/ReadPodInfoView.swift
alert(error:),ReadPodInfoView.alert(error:) in OmniKit/OmniKitUI/Views/ReadPodInfoView.swift
append(_:),ResponseBuffer.append(_:) in RileyLinkKit/RileyLinkBLEKit/ResponseBuffer.swift
peripheralManager(_:didUpdateValueFor:),PeripheralManagerDelegate.peripheralManager(_:didUpdateValueFor:) in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
peripheralManager(_:didUpdateNotificationStateFor:),PeripheralManagerDelegate.peripheralManager(_:didUpdateNotificationStateFor:) in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
peripheralManager(_:didReadRSSI:error:),PeripheralManagerDelegate.peripheralManager(_:didReadRSSI:error:) in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
peripheralManagerDidUpdateName(_:),PeripheralManagerDelegate.peripheralManagerDidUpdateName(_:) in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
completeConfiguration(for:),PeripheralManagerDelegate.completeConfiguration(for:) in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
readRSSI(),RileyLinkDevice.readRSSI() in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
setCustomName(_:),RileyLinkDevice.setCustomName(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
updateBatteryLevel(),RileyLinkDevice.updateBatteryLevel() in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
orangeAction(_:),RileyLinkDevice.orangeAction(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
setOrangeConfig(_:isOn:),RileyLinkDevice.setOrangeConfig(_:isOn:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
orangeWritePwd(),RileyLinkDevice.orangeWritePwd() in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
orangeClose(),RileyLinkDevice.orangeClose() in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
orangeReadSet(),RileyLinkDevice.orangeReadSet() in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
orangeReadVDC(),RileyLinkDevice.orangeReadVDC() in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
findDevice(),RileyLinkDevice.findDevice() in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
setDiagnosticeLEDModeForBLEChip(_:),RileyLinkDevice.setDiagnosticeLEDModeForBLEChip(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
readDiagnosticLEDModeForBLEChip(completion:),RileyLinkDevice.readDiagnosticLEDModeForBLEChip(completion:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
assertOnSessionQueue(),RileyLinkDevice.assertOnSessionQueue() in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
sessionQueueAsyncAfter(deadline:execute:),RileyLinkDevice.sessionQueueAsyncAfter(deadline:execute:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
runSession(withName:_:),RileyLinkDevice.runSession(withName:_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
getStatus(_:),RileyLinkDevice.getStatus(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
writeCommand(_:timeout:),CommandSession.writeCommand(_:timeout:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
writeCommand(_:timeout:),CommandSession.writeCommand(_:timeout:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
updateRegister(_:value:),CommandSession.updateRegister(_:value:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
readRegister(_:),CommandSession.readRegister(_:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
setCCLEDMode(_:),CommandSession.setCCLEDMode(_:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
setBaseFrequency(_:),CommandSession.setBaseFrequency(_:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
readBaseFrequency(),CommandSession.readBaseFrequency() in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
sendAndListen(_:repeatCount:timeout:retryCount:preambleExtension:),CommandSession.sendAndListen(_:repeatCount:timeout:retryCount:preambleExtension:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
sendAndListen(_:repeatCount:timeout:retryCount:),CommandSession.sendAndListen(_:repeatCount:timeout:retryCount:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
listen(onChannel:timeout:),CommandSession.listen(onChannel:timeout:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
send(_:onChannel:timeout:),CommandSession.send(_:onChannel:timeout:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
setSoftwareEncoding(_:),CommandSession.setSoftwareEncoding(_:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
resetRadioConfig(),CommandSession.resetRadioConfig() in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
getRileyLinkStatistics(),CommandSession.getRileyLinkStatistics() in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
setPreamble(_:),CommandSession.setPreamble(_:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
assertOnSessionQueue(),CommandSession.assertOnSessionQueue() in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
append(_:),SetModeRegisters.append(_:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
setPeripheral(_:),RileyLinkBluetoothDevice.setPeripheral(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkBluetoothDevice.swift
rileylinkDeviceProvider(_:didChange:),RileyLinkDeviceProviderDelegate.rileylinkDeviceProvider(_:didChange:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDeviceProvider.swift
deprioritize(_:completion:),RileyLinkDeviceProvider.deprioritize(_:completion:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDeviceProvider.swift
assertIdleListening(forcingRestart:),RileyLinkDeviceProvider.assertIdleListening(forcingRestart:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDeviceProvider.swift
getDevices(_:),RileyLinkDeviceProvider.getDevices(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDeviceProvider.swift
connect(_:),RileyLinkDeviceProvider.connect(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDeviceProvider.swift
disconnect(_:),RileyLinkDeviceProvider.disconnect(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDeviceProvider.swift
setScanningEnabled(_:),RileyLinkDeviceProvider.setScanningEnabled(_:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDeviceProvider.swift
shouldConnect(to:),RileyLinkDeviceProvider.shouldConnect(to:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDeviceProvider.swift
autoconnectBinding(for:),RileyLinkListDataSource.autoconnectBinding(for:) in RileyLinkKit/RileyLinkKit/RileyLinkListDataSource.swift
reloadDevices(),RileyLinkListDataSource.reloadDevices() in RileyLinkKit/RileyLinkKit/RileyLinkListDataSource.swift
updateRSSI(),RileyLinkListDataSource.updateRSSI() in RileyLinkKit/RileyLinkKit/RileyLinkListDataSource.swift
device(_:didReceivePacket:),RileyLinkPumpManager.device(_:didReceivePacket:) in RileyLinkKit/RileyLinkKit/RileyLinkPumpManager.swift
deviceTimerDidTick(_:),RileyLinkPumpManager.deviceTimerDidTick(_:) in RileyLinkKit/RileyLinkKit/RileyLinkPumpManager.swift
device(_:didUpdateBattery:),RileyLinkPumpManager.device(_:didUpdateBattery:) in RileyLinkKit/RileyLinkKit/RileyLinkPumpManager.swift
nib(),NibLoadable.nib() in RileyLinkKit/Common/NibLoadable.swift
preferenceStateForDevice(_:),RileyLinkDevicesTableViewDataSource.preferenceStateForDevice(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesTableViewDataSource.swift
reloadDevices(),RileyLinkDevicesTableViewDataSource.reloadDevices() in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesTableViewDataSource.swift
deviceDidUpdate(_:),RileyLinkDevicesTableViewDataSource.deviceDidUpdate(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesTableViewDataSource.swift
updateRSSI(),RileyLinkDevicesTableViewDataSource.updateRSSI() in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesTableViewDataSource.swift
deviceConnectionChanged(_:),RileyLinkDevicesTableViewDataSource.deviceConnectionChanged(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesTableViewDataSource.swift
awakeFromNib(),RileyLinkDeviceTableViewCell.awakeFromNib() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewCell.swift
setup(),RileyLinkDeviceTableViewCell.setup() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewCell.swift
layoutSubviews(),RileyLinkDeviceTableViewCell.layoutSubviews() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewCell.swift
configureCellWithName(_:signal:peripheralState:),RileyLinkDeviceTableViewCell.configureCellWithName(_:signal:peripheralState:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewCell.swift
prepareForReuse(),RileyLinkDeviceTableViewCell.prepareForReuse() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewCell.swift
setup(),RileyLinkDevicesHeaderView.setup() in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesHeaderView.swift
layoutSubviews(),RileyLinkDevicesHeaderView.layoutSubviews() in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesHeaderView.swift
viewDidLoad(),RileyLinkSettingsViewController.viewDidLoad() in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
viewDidAppear(_:),RileyLinkSettingsViewController.viewDidAppear(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
viewWillDisappear(_:),RileyLinkSettingsViewController.viewWillDisappear(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
tableView(_:numberOfRowsInSection:),RileyLinkSettingsViewController.tableView(_:numberOfRowsInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
tableView(_:cellForRowAt:),RileyLinkSettingsViewController.tableView(_:cellForRowAt:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
tableView(_:titleForHeaderInSection:),RileyLinkSettingsViewController.tableView(_:titleForHeaderInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
tableView(_:viewForHeaderInSection:),RileyLinkSettingsViewController.tableView(_:viewForHeaderInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
viewDidLoad(),RileyLinkSetupTableViewController.viewDidLoad() in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
viewWillAppear(_:),RileyLinkSetupTableViewController.viewWillAppear(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
viewDidDisappear(_:),RileyLinkSetupTableViewController.viewDidDisappear(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
numberOfSections(in:),RileyLinkSetupTableViewController.numberOfSections(in:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
tableView(_:numberOfRowsInSection:),RileyLinkSetupTableViewController.tableView(_:numberOfRowsInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
tableView(_:cellForRowAt:),RileyLinkSetupTableViewController.tableView(_:cellForRowAt:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
tableView(_:titleForHeaderInSection:),RileyLinkSetupTableViewController.tableView(_:titleForHeaderInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
tableView(_:viewForHeaderInSection:),RileyLinkSetupTableViewController.tableView(_:viewForHeaderInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
tableView(_:estimatedHeightForHeaderInSection:),RileyLinkSetupTableViewController.tableView(_:estimatedHeightForHeaderInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
tableView(_:shouldHighlightRowAt:),RileyLinkSetupTableViewController.tableView(_:shouldHighlightRowAt:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
deviceConnectionStateDidChange(),RileyLinkSetupTableViewController.deviceConnectionStateDidChange() in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
updateContinueButtonState(),RileyLinkSetupTableViewController.updateContinueButtonState() in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
shouldPerformSegue(withIdentifier:sender:),RileyLinkSetupTableViewController.shouldPerformSegue(withIdentifier:sender:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
layoutSubviews(),RileyLinkCell.layoutSubviews() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
viewDidLoad(),RileyLinkDeviceTableViewController.viewDidLoad() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
updateRSSI(),RileyLinkDeviceTableViewController.updateRSSI() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
updateDeviceStatus(),RileyLinkDeviceTableViewController.updateDeviceStatus() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
updateUptime(),RileyLinkDeviceTableViewController.updateUptime() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
updateFrequency(),RileyLinkDeviceTableViewController.updateFrequency() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
readDiagnosticLEDMode(),RileyLinkDeviceTableViewController.readDiagnosticLEDMode() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
observe(),RileyLinkDeviceTableViewController.observe() in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
viewWillAppear(_:),RileyLinkDeviceTableViewController.viewWillAppear(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
viewDidDisappear(_:),RileyLinkDeviceTableViewController.viewDidDisappear(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
viewWillDisappear(_:),RileyLinkDeviceTableViewController.viewWillDisappear(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
cellForRow(_:),RileyLinkDeviceTableViewController.cellForRow(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
cellForRow(_:),RileyLinkDeviceTableViewController.cellForRow(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
cellForRow(_:),RileyLinkDeviceTableViewController.cellForRow(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
cellForRow(_:),RileyLinkDeviceTableViewController.cellForRow(_:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
numberOfSections(in:),RileyLinkDeviceTableViewController.numberOfSections(in:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
tableView(_:numberOfRowsInSection:),RileyLinkDeviceTableViewController.tableView(_:numberOfRowsInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
switchAction(sender:),RileyLinkDeviceTableViewController.switchAction(sender:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
tableView(_:cellForRowAt:),RileyLinkDeviceTableViewController.tableView(_:cellForRowAt:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
tableView(_:titleForHeaderInSection:),RileyLinkDeviceTableViewController.tableView(_:titleForHeaderInSection:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
tableView(_:shouldHighlightRowAt:),RileyLinkDeviceTableViewController.tableView(_:shouldHighlightRowAt:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
tableView(_:didSelectRowAt:),RileyLinkDeviceTableViewController.tableView(_:didSelectRowAt:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
viewDidLoad(),RileyLinkManagerSetupViewController.viewDidLoad() in RileyLinkKit/RileyLinkKitUI/RileyLinkManagerSetupViewController.swift
navigationController(_:willShow:animated:),RileyLinkManagerSetupViewController.navigationController(_:willShow:animated:) in RileyLinkKit/RileyLinkKitUI/RileyLinkManagerSetupViewController.swift
finishedSetup(),RileyLinkManagerSetupViewController.finishedSetup() in RileyLinkKit/RileyLinkKitUI/RileyLinkManagerSetupViewController.swift
fetchNewDataIfNeeded(_:),ShareClientManager.fetchNewDataIfNeeded(_:) in dexcom-share-client-swift/ShareClient/ShareClientManager.swift
verify(_:),ShareService.verify(_:) in dexcom-share-client-swift/ShareClient/ShareService.swift
reset(),ShareService.reset() in dexcom-share-client-swift/ShareClient/ShareService.swift
fetchLast(_:callback:),ShareClient.fetchLast(_:callback:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
ensureToken(_:),ShareClient.ensureToken(_:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
fetchAccountID(_:),ShareClient.fetchAccountID(_:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
fetchTokenByAccountId(_:callback:),ShareClient.fetchTokenByAccountId(_:callback:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
fetchLastWithRetries(_:remaining:callback:),ShareClient.fetchLastWithRetries(_:remaining:callback:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
parseDate(_:),ShareClient.parseDate(_:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
viewDidLoad(),ShareClientSettingsViewController.viewDidLoad() in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
doneTapped(_:),ShareClientSettingsViewController.doneTapped(_:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
complete(),ShareClientSettingsViewController.complete() in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
numberOfSections(in:),ShareClientSettingsViewController.numberOfSections(in:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
tableView(_:numberOfRowsInSection:),ShareClientSettingsViewController.tableView(_:numberOfRowsInSection:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
tableView(_:cellForRowAt:),ShareClientSettingsViewController.tableView(_:cellForRowAt:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
tableView(_:titleForHeaderInSection:),ShareClientSettingsViewController.tableView(_:titleForHeaderInSection:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
tableView(_:didSelectRowAt:),ShareClientSettingsViewController.tableView(_:didSelectRowAt:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
cancel(),ShareClientSetupViewController.cancel() in dexcom-share-client-swift/ShareClientUI/ShareClientSetupViewController.swift
save(),ShareClientSetupViewController.save() in dexcom-share-client-swift/ShareClientUI/ShareClientSetupViewController.swift
setSession(_:for:),SessionStorage.setSession(_:for:) in TidepoolService/TidepoolServiceKit/TidepoolService.swift
getSession(for:),SessionStorage.getSession(for:) in TidepoolService/TidepoolServiceKit/TidepoolService.swift
apiDidUpdateSession(_:),TidepoolService.apiDidUpdateSession(_:) in TidepoolService/TidepoolServiceKit/TidepoolService.swift
completeCreate(),TidepoolService.completeCreate() in TidepoolService/TidepoolServiceKit/TidepoolService.swift
completeUpdate(),TidepoolService.completeUpdate() in TidepoolService/TidepoolServiceKit/TidepoolService.swift
deleteService(),TidepoolService.deleteService() in TidepoolService/TidepoolServiceKit/TidepoolService.swift
clearCachedDataSetId(),TidepoolService.clearCachedDataSetId() in TidepoolService/TidepoolServiceKit/TidepoolService.swift
getCachedDataSetId(),TidepoolService.getCachedDataSetId() in TidepoolService/TidepoolServiceKit/TidepoolService.swift
fetchDataSetId(),TidepoolService.fetchDataSetId() in TidepoolService/TidepoolServiceKit/TidepoolService.swift
createDataSet(),TidepoolService.createDataSet() in TidepoolService/TidepoolServiceKit/TidepoolService.swift
isEffectivelyEquivalent(to:),EffectivelyEquivalent.isEffectivelyEquivalent(to:) in TidepoolService/TidepoolServiceKit/TidepoolService.swift
loginButtonTapped(),SettingsView.loginButtonTapped() in TidepoolService/TidepoolServiceKitUI/SettingsView.swift
presentationAnchor(for:),WindowContextProvider.presentationAnchor(for:) in TidepoolService/TidepoolServiceKitUI/TidepoolService+UI.swift
nib(),NibLoadable.nib() in TidepoolService/TidepoolServiceKitUI/NibLoadable.swift
debugLog(_:),TimedOperation.debugLog(_:) in TrueTime.swift/Sources/TimedOperation.swift
timeoutError(_:),TimedOperation.timeoutError(_:) in TrueTime.swift/Sources/TimedOperation.swift
now(),ReferenceTime.now() in TrueTime.swift/Sources/TrueTime.swift
read(),GCDLock.read() in TrueTime.swift/Sources/GCDLock.swift
write(_:),GCDLock.write(_:) in TrueTime.swift/Sources/GCDLock.swift
start(pool:port:),TrueTimeClient.start(pool:port:) in TrueTime.swift/Sources/TrueTime.swift
pause(),TrueTimeClient.pause() in TrueTime.swift/Sources/TrueTime.swift
fetchIfNeeded(queue:first:completion:),TrueTimeClient.fetchIfNeeded(queue:first:completion:) in TrueTime.swift/Sources/TrueTime.swift
start(pool:port:),NTPClient.start(pool:port:) in TrueTime.swift/Sources/NTPClient.swift
pause(),NTPClient.pause() in TrueTime.swift/Sources/NTPClient.swift
fetchIfNeeded(queue:first:completion:),NTPClient.fetchIfNeeded(queue:first:completion:) in TrueTime.swift/Sources/NTPClient.swift
debugLog(_:),NTPClient.debugLog(_:) in TrueTime.swift/Sources/NTPClient.swift
query(addresses:config:logger:callbackQueue:progress:),NTPConnection.query(addresses:config:logger:callbackQueue:progress:) in TrueTime.swift/Sources/NTPConnection.swift
start(_:onComplete:),NTPConnection.start(_:onComplete:) in TrueTime.swift/Sources/NTPConnection.swift
close(waitUntilFinished:),NTPConnection.close(waitUntilFinished:) in TrueTime.swift/Sources/NTPConnection.swift
debugLog(_:),NTPConnection.debugLog(_:) in TrueTime.swift/Sources/NTPConnection.swift
startMonitoring(),Reachability.startMonitoring() in TrueTime.swift/Sources/Reachability.swift
stopMonitoring(),Reachability.stopMonitoring() in TrueTime.swift/Sources/Reachability.swift
resolve(hosts:timeout:logger:callbackQueue:onComplete:),HostResolver.resolve(hosts:timeout:logger:callbackQueue:onComplete:) in TrueTime.swift/Sources/HostResolver.swift
resolve(),HostResolver.resolve() in TrueTime.swift/Sources/HostResolver.swift
stop(waitUntilFinished:),HostResolver.stop(waitUntilFinished:) in TrueTime.swift/Sources/HostResolver.swift
debugLog(_:),HostResolver.debugLog(_:) in TrueTime.swift/Sources/HostResolver.swift
establishProxy(),LibreDemoCGMManager.establishProxy() in LibreTransmitter/LibreDemoPlugin/LibreDemoCGMManager.swift
reportMockSample(),LibreDemoCGMManager.reportMockSample() in LibreTransmitter/LibreDemoPlugin/LibreDemoCGMManager.swift
timeComponent(value:units:),SettingsView.timeComponent(value:units:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/SettingsView.swift
makeBody(configuration:),BlueButtonStyle.makeBody(configuration:) in LibreTransmitter/LibreTransmitterUI/Views/Styles/BlueButtonStyle.swift
_body(configuration:),ErrorTextFieldStyle._body(configuration:) in LibreTransmitter/LibreTransmitterUI/Views/Styles/ErrorTextFieldStyle.swift
getPumpManagerTypeByIdentifier(_:),PluginManager.getPumpManagerTypeByIdentifier(_:) in Loop/Loop/Plugins/PluginManager.swift
application(_:didFinishLaunchingWithOptions:),AppDelegate.application(_:didFinishLaunchingWithOptions:) in Loop/Loop/AppDelegate.swift
applicationDidBecomeActive(_:),AppDelegate.applicationDidBecomeActive(_:) in Loop/Loop/AppDelegate.swift
applicationWillResignActive(_:),AppDelegate.applicationWillResignActive(_:) in Loop/Loop/AppDelegate.swift
applicationDidEnterBackground(_:),AppDelegate.applicationDidEnterBackground(_:) in Loop/Loop/AppDelegate.swift
applicationWillEnterForeground(_:),AppDelegate.applicationWillEnterForeground(_:) in Loop/Loop/AppDelegate.swift
applicationWillTerminate(_:),AppDelegate.applicationWillTerminate(_:) in Loop/Loop/AppDelegate.swift
applicationProtectedDataDidBecomeAvailable(_:),AppDelegate.applicationProtectedDataDidBecomeAvailable(_:) in Loop/Loop/AppDelegate.swift
application(_:didRegisterForRemoteNotificationsWithDeviceToken:),AppDelegate.application(_:didRegisterForRemoteNotificationsWithDeviceToken:) in Loop/Loop/AppDelegate.swift
application(_:didFailToRegisterForRemoteNotificationsWithError:),AppDelegate.application(_:didFailToRegisterForRemoteNotificationsWithError:) in Loop/Loop/AppDelegate.swift
application(_:didReceiveRemoteNotification:fetchCompletionHandler:),AppDelegate.application(_:didReceiveRemoteNotification:fetchCompletionHandler:) in Loop/Loop/AppDelegate.swift
application(_:open:options:),AppDelegate.application(_:open:options:) in Loop/Loop/AppDelegate.swift
application(_:continue:restorationHandler:),AppDelegate.application(_:continue:restorationHandler:) in Loop/Loop/AppDelegate.swift
application(_:supportedInterfaceOrientationsFor:),AppDelegate.application(_:supportedInterfaceOrientationsFor:) in Loop/Loop/AppDelegate.swift
userActivity(_:restorationHandler:),LoopAppManager.userActivity(_:restorationHandler:) in Loop/Loop/Managers/LoopAppManager.swift
default(_:_:),DiagnosticLog.default(_:_:) in Loop/Loop/Extensions/DiagnosticLog.swift
handle(_:),LoopAppManager.handle(_:) in Loop/Loop/Managers/LoopAppManager.swift
handleRemoteNotification(_:),LoopAppManager.handleRemoteNotification(_:) in Loop/Loop/Managers/LoopAppManager.swift
remoteNotificationRegistrationDidFinish(_:),LoopAppManager.remoteNotificationRegistrationDidFinish(_:) in Loop/Loop/Managers/LoopAppManager.swift
error(_:_:),DiagnosticLog.error(_:_:) in Loop/Loop/Extensions/DiagnosticLog.swift
launch(),LoopAppManager.launch() in Loop/Loop/Managers/LoopAppManager.swift
didBecomeActive(),LoopAppManager.didBecomeActive() in Loop/Loop/Managers/LoopAppManager.swift
initialize(windowProvider:launchOptions:),LoopAppManager.initialize(windowProvider:launchOptions:) in Loop/Loop/Managers/LoopAppManager.swift
updateRemoteRecommendation(),LoopDataManager.updateRemoteRecommendation() in Loop/Loop/Managers/LoopDataManager.swift
resume(),OnboardingManager.resume() in Loop/Loop/Managers/OnboardingManager.swift
debug(_:_:),DiagnosticLog.debug(_:_:) in Loop/Loop/Extensions/DiagnosticLog.swift
info(_:_:),DiagnosticLog.info(_:_:) in Loop/Loop/Extensions/DiagnosticLog.swift
log(_:type:_:),DiagnosticLog.log(_:type:_:) in Loop/Loop/Extensions/DiagnosticLog.swift
description(for:),StoredDosingDecisionIssue.description(for:) in Loop/Loop/Extensions/DosingDecisionStore.swift
description(for:),StoredDosingDecisionIssue.description(for:) in Loop/Loop/Extensions/DosingDecisionStore.swift
textFieldValueChanged(sender:),TextFieldObserver.textFieldValueChanged(sender:) in Loop/Loop/Extensions/UIAlertController.swift
textFieldShouldReturn(_:),TextFieldObserver.textFieldShouldReturn(_:) in Loop/Loop/Extensions/UIAlertController.swift
updateMutePeriodEndingWatcher(_:),AlertMuter.updateMutePeriodEndingWatcher(_:) in Loop/Loop/Managers/AlertMuter.swift
shouldMuteAlert(scheduledAt:),AlertMuter.shouldMuteAlert(scheduledAt:) in Loop/Loop/Managers/AlertMuter.swift
shouldMuteAlert(_:issuedDate:now:),AlertMuter.shouldMuteAlert(_:issuedDate:now:) in Loop/Loop/Managers/AlertMuter.swift
unmuteAlerts(),AlertMuter.unmuteAlerts() in Loop/Loop/Managers/AlertMuter.swift
shouldMuteAlert(scheduledAt:now:),Configuration.shouldMuteAlert(scheduledAt:now:) in Loop/Loop/Managers/AlertMuter.swift
notificationsPermissions(requiresRiskMitigation:scheduledDeliveryEnabled:),AlertPermissionsCheckerDelegate.notificationsPermissions(requiresRiskMitigation:scheduledDeliveryEnabled:) in Loop/Loop/Managers/AlertPermissionsChecker.swift
checkNow(),AlertPermissionsChecker.checkNow() in Loop/Loop/Managers/AlertPermissionsChecker.swift
check(then:),AlertPermissionsChecker.check(then:) in Loop/Loop/Managers/AlertPermissionsChecker.swift
gotoSettings(),AlertPermissionsChecker.gotoSettings() in Loop/Loop/Managers/AlertPermissionsChecker.swift
acknowledgeAlert(identifier:),AlertManagerResponder.acknowledgeAlert(identifier:) in Loop/Loop/Managers/Alerts/AlertManager.swift
addAlertResponder(managerIdentifier:alertResponder:),AlertManager.addAlertResponder(managerIdentifier:alertResponder:) in Loop/Loop/Managers/Alerts/AlertManager.swift
removeAlertResponder(managerIdentifier:),AlertManager.removeAlertResponder(managerIdentifier:) in Loop/Loop/Managers/Alerts/AlertManager.swift
addAlertSoundVendor(managerIdentifier:soundVendor:),AlertManager.addAlertSoundVendor(managerIdentifier:soundVendor:) in Loop/Loop/Managers/Alerts/AlertManager.swift
removeAlertSoundVendor(managerIdentifier:),AlertManager.removeAlertSoundVendor(managerIdentifier:) in Loop/Loop/Managers/Alerts/AlertManager.swift
onBluetoothPermissionDenied(),AlertManager.onBluetoothPermissionDenied() in Loop/Loop/Managers/Alerts/AlertManager.swift
onBluetoothPoweredOn(),AlertManager.onBluetoothPoweredOn() in Loop/Loop/Managers/Alerts/AlertManager.swift
onBluetoothPoweredOff(),AlertManager.onBluetoothPoweredOff() in Loop/Loop/Managers/Alerts/AlertManager.swift
loopDidComplete(_:),AlertManager.loopDidComplete(_:) in Loop/Loop/Managers/Alerts/AlertManager.swift
rescheduleLoopNotRunningNotifications(),AlertManager.rescheduleLoopNotRunningNotifications() in Loop/Loop/Managers/Alerts/AlertManager.swift
rescheduleLoopNotRunningNotifications(_:),AlertManager.rescheduleLoopNotRunningNotifications(_:) in Loop/Loop/Managers/Alerts/AlertManager.swift
scheduleLoopNotRunningNotifications(_:),AlertManager.scheduleLoopNotRunningNotifications(_:) in Loop/Loop/Managers/Alerts/AlertManager.swift
inferDeliveredLoopNotRunningNotifications(),AlertManager.inferDeliveredLoopNotRunningNotifications() in Loop/Loop/Managers/Alerts/AlertManager.swift
clearLoopNotRunningNotifications(),AlertManager.clearLoopNotRunningNotifications() in Loop/Loop/Managers/Alerts/AlertManager.swift
getLastLoopDate(),AlertManager.getLastLoopDate() in Loop/Loop/Managers/Alerts/AlertManager.swift
scheduleWorkoutOverrideReminder(),AlertManager.scheduleWorkoutOverrideReminder() in Loop/Loop/Managers/Alerts/AlertManager.swift
retractWorkoutOverrideReminder(),AlertManager.retractWorkoutOverrideReminder() in Loop/Loop/Managers/Alerts/AlertManager.swift
rescheduleMutedAlerts(_:),AlertManager.rescheduleMutedAlerts(_:) in Loop/Loop/Managers/Alerts/AlertManager.swift
scheduleAlert(_:muted:),UserNotificationAlertScheduler.scheduleAlert(_:muted:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
scheduleAlert(_:),InAppModalAlertScheduler.scheduleAlert(_:) in Loop/Loop/Managers/Alerts/InAppModalAlertScheduler.swift
unscheduleAlert(identifier:),UserNotificationAlertScheduler.unscheduleAlert(identifier:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
unscheduleAlert(identifier:),InAppModalAlertScheduler.unscheduleAlert(identifier:) in Loop/Loop/Managers/Alerts/InAppModalAlertScheduler.swift
present(_:animated:completion:),AlertPresenter.present(_:animated:completion:) in Loop/Loop/Managers/LoopAppManager.swift
recordAcknowledgement(of:at:completion:),AlertStore.recordAcknowledgement(of:at:completion:) in Loop/Loop/Managers/Alerts/AlertStore.swift
dismissAlert(_:animated:completion:),AlertPresenter.dismissAlert(_:animated:completion:) in Loop/Loop/Managers/LoopAppManager.swift
recordRetractedAlert(_:at:completion:),AlertStore.recordRetractedAlert(_:at:completion:) in Loop/Loop/Managers/Alerts/AlertStore.swift
recordIssued(alert:at:completion:),AlertStore.recordIssued(alert:at:completion:) in Loop/Loop/Managers/Alerts/AlertStore.swift
lookupAllUnacknowledgedUnretracted(managerIdentifier:filteredByTriggers:completion:),AlertStore.lookupAllUnacknowledgedUnretracted(managerIdentifier:filteredByTriggers:completion:) in Loop/Loop/Managers/Alerts/AlertStore.swift
lookupAllUnretracted(managerIdentifier:completion:),AlertStore.lookupAllUnretracted(managerIdentifier:completion:) in Loop/Loop/Managers/Alerts/AlertStore.swift
lookupAllMatching(identifier:completion:),AlertStore.lookupAllMatching(identifier:completion:) in Loop/Loop/Managers/Alerts/AlertStore.swift
recordRetraction(of:at:completion:),AlertStore.recordRetraction(of:at:completion:) in Loop/Loop/Managers/Alerts/AlertStore.swift
didIssueAlert(identifier:interruptionLevel:),AnalyticsServicesManager.didIssueAlert(identifier:interruptionLevel:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
lookupAllAcknowledgedUnretractedRepeatingAlerts(completion:),AlertStore.lookupAllAcknowledgedUnretractedRepeatingAlerts(completion:) in Loop/Loop/Managers/Alerts/AlertStore.swift
alertStoreHasUpdatedAlertData(_:),AlertStoreDelegate.alertStoreHasUpdatedAlertData(_:) in Loop/Loop/Managers/Alerts/AlertStore.swift
removePresentedAlert(identifier:completion:),InAppModalAlertScheduler.removePresentedAlert(identifier:completion:) in Loop/Loop/Managers/Alerts/InAppModalAlertScheduler.swift
removePendingAlert(identifier:),InAppModalAlertScheduler.removePendingAlert(identifier:) in Loop/Loop/Managers/Alerts/InAppModalAlertScheduler.swift
updateModificationCounter(),StoredAlert.updateModificationCounter() in Loop/Loop/Managers/Alerts/StoredAlert+CoreDataClass.swift
awakeFromInsert(),StoredAlert.awakeFromInsert() in Loop/Loop/Managers/Alerts/StoredAlert+CoreDataClass.swift
willSave(),StoredAlert.willSave() in Loop/Loop/Managers/Alerts/StoredAlert+CoreDataClass.swift
add(_:withCompletionHandler:),UserNotificationCenter.add(_:withCompletionHandler:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
removePendingNotificationRequests(withIdentifiers:),UserNotificationCenter.removePendingNotificationRequests(withIdentifiers:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
removeDeliveredNotifications(withIdentifiers:),UserNotificationCenter.removeDeliveredNotifications(withIdentifiers:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
getDeliveredNotifications(completionHandler:),UserNotificationCenter.getDeliveredNotifications(completionHandler:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
getPendingNotificationRequests(completionHandler:),UserNotificationCenter.getPendingNotificationRequests(completionHandler:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
scheduleAlert(_:timestamp:muted:),UserNotificationAlertScheduler.scheduleAlert(_:timestamp:muted:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
addService(_:),AnalyticsServicesManager.addService(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
restoreService(_:),AnalyticsServicesManager.restoreService(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
removeService(_:),AnalyticsServicesManager.removeService(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
logEvent(_:withProperties:outOfSession:),AnalyticsServicesManager.logEvent(_:withProperties:outOfSession:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
identify(_:value:),AnalyticsServicesManager.identify(_:value:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
identify(_:array:),AnalyticsServicesManager.identify(_:array:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
application(didFinishLaunchingWithOptions:),AnalyticsServicesManager.application(didFinishLaunchingWithOptions:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
identifyAppName(_:),AnalyticsServicesManager.identifyAppName(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
identifyWorkspaceGitRevision(_:),AnalyticsServicesManager.identifyWorkspaceGitRevision(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
identifyPumpType(_:),AnalyticsServicesManager.identifyPumpType(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
identifyCGMType(_:),AnalyticsServicesManager.identifyCGMType(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
didDisplayBolusScreen(),AnalyticsServicesManager.didDisplayBolusScreen() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didDisplayCarbEntryScreen(),AnalyticsServicesManager.didDisplayCarbEntryScreen() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didDisplaySettingsScreen(),AnalyticsServicesManager.didDisplaySettingsScreen() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didDisplayStatusScreen(),AnalyticsServicesManager.didDisplayStatusScreen() in Loop/Loop/Managers/AnalyticsServicesManager.swift
transmitterTimeDidDrift(_:),AnalyticsServicesManager.transmitterTimeDidDrift(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
pumpTimeDidDrift(_:),AnalyticsServicesManager.pumpTimeDidDrift(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
pumpBatteryWasReplaced(),AnalyticsServicesManager.pumpBatteryWasReplaced() in Loop/Loop/Managers/AnalyticsServicesManager.swift
reservoirWasRewound(),AnalyticsServicesManager.reservoirWasRewound() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didChangeBasalRateSchedule(),AnalyticsServicesManager.didChangeBasalRateSchedule() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didChangeCarbRatioSchedule(),AnalyticsServicesManager.didChangeCarbRatioSchedule() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didChangeInsulinModel(),AnalyticsServicesManager.didChangeInsulinModel() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didChangeInsulinSensitivitySchedule(),AnalyticsServicesManager.didChangeInsulinSensitivitySchedule() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didChangeLoopSettings(from:to:),AnalyticsServicesManager.didChangeLoopSettings(from:to:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
pumpWasRemoved(),AnalyticsServicesManager.pumpWasRemoved() in Loop/Loop/Managers/AnalyticsServicesManager.swift
pumpWasAdded(identifier:),AnalyticsServicesManager.pumpWasAdded(identifier:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
cgmWasRemoved(),AnalyticsServicesManager.cgmWasRemoved() in Loop/Loop/Managers/AnalyticsServicesManager.swift
cgmWasAdded(identifier:),AnalyticsServicesManager.cgmWasAdded(identifier:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
didAddCarbs(source:amount:inSession:),AnalyticsServicesManager.didAddCarbs(source:amount:inSession:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
didRetryBolus(),AnalyticsServicesManager.didRetryBolus() in Loop/Loop/Managers/AnalyticsServicesManager.swift
didBolus(source:units:inSession:),AnalyticsServicesManager.didBolus(source:units:inSession:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
didFetchNewCGMData(),AnalyticsServicesManager.didFetchNewCGMData() in Loop/Loop/Managers/AnalyticsServicesManager.swift
loopDidSucceed(_:),AnalyticsServicesManager.loopDidSucceed(_:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
loopDidError(error:),AnalyticsServicesManager.loopDidError(error:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
didEnactOverride(name:symbol:duration:insulinSensitivityMultiplier:targetRange:),AnalyticsServicesManager.didEnactOverride(name:symbol:duration:insulinSensitivityMultiplier:targetRange:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
didCancelOverride(name:),AnalyticsServicesManager.didCancelOverride(name:) in Loop/Loop/Managers/AnalyticsServicesManager.swift
alertIfNeeded(viewControllerToPresentFrom:),AppExpirationAlerter.alertIfNeeded(viewControllerToPresentFrom:) in Loop/Loop/Managers/AppExpirationAlerter.swift
createVerboseAlertMessage(timeUntilExpirationStr:),AppExpirationAlerter.createVerboseAlertMessage(timeUntilExpirationStr:) in Loop/Loop/Managers/AppExpirationAlerter.swift
isNearExpiration(expirationDate:),AppExpirationAlerter.isNearExpiration(expirationDate:) in Loop/Loop/Managers/AppExpirationAlerter.swift
createProfileExpirationSettingsMessage(expirationDate:),AppExpirationAlerter.createProfileExpirationSettingsMessage(expirationDate:) in Loop/Loop/Managers/AppExpirationAlerter.swift
relativeTimeFormatter(maxUnitCount:),AppExpirationAlerter.relativeTimeFormatter(maxUnitCount:) in Loop/Loop/Managers/AppExpirationAlerter.swift
buildDate(),AppExpirationAlerter.buildDate() in Loop/Loop/Managers/AppExpirationAlerter.swift
isTestFlightBuild(),AppExpirationAlerter.isTestFlightBuild() in Loop/Loop/Managers/AppExpirationAlerter.swift
calculateExpirationDate(profileExpiration:),AppExpirationAlerter.calculateExpirationDate(profileExpiration:) in Loop/Loop/Managers/AppExpirationAlerter.swift
authorizeBluetooth(_:),BluetoothStateManager.authorizeBluetooth(_:) in Loop/Loop/Managers/BluetoothStateManager.swift
addBluetoothObserver(_:queue:),BluetoothStateManager.addBluetoothObserver(_:queue:) in Loop/Loop/Managers/BluetoothStateManager.swift
removeBluetoothObserver(_:),BluetoothStateManager.removeBluetoothObserver(_:) in Loop/Loop/Managers/BluetoothStateManager.swift
getLatestCGMGlucose(since:completion:),CGMStalenessMonitorDelegate.getLatestCGMGlucose(since:completion:) in Loop/Loop/Managers/CGMStalenessMonitor.swift
cgmGlucoseSamplesAvailable(_:),CGMStalenessMonitor.cgmGlucoseSamplesAvailable(_:) in Loop/Loop/Managers/CGMStalenessMonitor.swift
updateCGMStalenessTimer(expiration:),CGMStalenessMonitor.updateCGMStalenessTimer(expiration:) in Loop/Loop/Managers/CGMStalenessMonitor.swift
checkCGMStaleness(),CGMStalenessMonitor.checkCGMStaleness() in Loop/Loop/Managers/CGMStalenessMonitor.swift
export(now:completion:),CriticalEventLogExporter.export(now:completion:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportDidProgress(_:),CriticalEventLogExporterDelegate.exportDidProgress(_:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportSynchronized(now:),CriticalEventLogSynchronizedExporter.exportSynchronized(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
nextExportHistoricalDate(now:),CriticalEventLogExportManager.nextExportHistoricalDate(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
retryExportHistoricalDate(now:),CriticalEventLogExportManager.retryExportHistoricalDate(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
createExporter(to:),CriticalEventLogExportManager.createExporter(to:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
createHistoricalExporter(),CriticalEventLogExportManager.createHistoricalExporter() in Loop/Loop/Managers/CriticalEventLogExportManager.swift
synchronizeExport(for:cancellingActive:now:),CriticalEventLogExportManager.synchronizeExport(for:cancellingActive:now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
obtainSynchronizeSemaphore(waiting:),CriticalEventLogExportManager.obtainSynchronizeSemaphore(waiting:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
latestExportDate(),CriticalEventLogExportManager.latestExportDate() in Loop/Loop/Managers/CriticalEventLogExportManager.swift
recentDate(from:),CriticalEventLogExportManager.recentDate(from:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportDate(for:),CriticalEventLogExportManager.exportDate(for:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
date(byAddingDays:to:),CriticalEventLogExportManager.date(byAddingDays:to:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
date(from:),CriticalEventLogExportManager.date(from:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
timestamp(from:),CriticalEventLogExportManager.timestamp(from:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportSynchronized(now:),CriticalEventLogBaseExporter.exportSynchronized(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportProgressTotalUnitCount(now:),CriticalEventLogBaseExporter.exportProgressTotalUnitCount(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportProgressTotalUnitCount(through:now:),CriticalEventLogBaseExporter.exportProgressTotalUnitCount(through:now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
export(startDate:endDate:to:progress:),CriticalEventLogBaseExporter.export(startDate:endDate:to:progress:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
export(startDate:endDate:from:to:progress:),CriticalEventLogBaseExporter.export(startDate:endDate:from:to:progress:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
historicalDate(from:),CriticalEventLogBaseExporter.historicalDate(from:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportsFileURL(for:),CriticalEventLogBaseExporter.exportsFileURL(for:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportsFileName(for:),CriticalEventLogBaseExporter.exportsFileName(for:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
createArchiveFile(withPath:compressionMethod:),ZipArchive.createArchiveFile(withPath:compressionMethod:) in Loop/Loop/Models/ZipArchive.swift
close(),ZipArchive.close() in Loop/Loop/Models/ZipArchive.swift
export(now:completion:),CriticalEventLogHistoricalExporter.export(now:completion:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportSynchronized(now:),CriticalEventLogHistoricalExporter.exportSynchronized(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportSynchronized(progress:now:),CriticalEventLogHistoricalExporter.exportSynchronized(progress:now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportProgressTotalUnitCount(now:),CriticalEventLogHistoricalExporter.exportProgressTotalUnitCount(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
purge(now:),CriticalEventLogHistoricalExporter.purge(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
export(now:completion:),CriticalEventLogFullExporter.export(now:completion:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportSynchronized(now:),CriticalEventLogFullExporter.exportSynchronized(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
exportProgressTotalUnitCount(now:),CriticalEventLogFullExporter.exportProgressTotalUnitCount(now:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
beginBackgroundTask(),CriticalEventLogFullExporter.beginBackgroundTask() in Loop/Loop/Managers/CriticalEventLogExportManager.swift
endBackgroundTask(),CriticalEventLogFullExporter.endBackgroundTask() in Loop/Loop/Managers/CriticalEventLogExportManager.swift
willEnterForegroundNotificationReceived(_:),CriticalEventLogFullExporter.willEnterForegroundNotificationReceived(_:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
createArchiveFile(withPath:contentsOf:compressionMethod:),ZipArchive.createArchiveFile(withPath:contentsOf:compressionMethod:) in Loop/Loop/Models/ZipArchive.swift
handle(_:),DeeplinkManager.handle(_:) in Loop/Loop/Managers/DeeplinkManager.swift
handle(_:),DeeplinkManager.handle(_:) in Loop/Loop/Managers/DeeplinkManager.swift
navigate(to:),RootNavigationController.navigate(to:) in Loop/Loop/View Controllers/RootNavigationController.swift
showUncertainDeliveryRecoveryView(),DeliveryUncertaintyAlertManager.showUncertainDeliveryRecoveryView() in Loop/Loop/Managers/DeliveryUncertaintyAlertManager.swift
showAlert(animated:),DeliveryUncertaintyAlertManager.showAlert(animated:) in Loop/Loop/Managers/DeliveryUncertaintyAlertManager.swift
clearAlert(),DeliveryUncertaintyAlertManager.clearAlert() in Loop/Loop/Managers/DeliveryUncertaintyAlertManager.swift
dismissTopMost(animated:completion:),AlertPresenter.dismissTopMost(animated:completion:) in Loop/Loop/Managers/LoopAppManager.swift
setupPumpManager(withIdentifier:initialSettings:prefersToSkipUserInteraction:),DeviceDataManager.setupPumpManager(withIdentifier:initialSettings:prefersToSkipUserInteraction:) in Loop/Loop/Managers/DeviceDataManager.swift
setupPumpManagerUI(withIdentifier:initialSettings:prefersToSkipUserInteraction:),DeviceDataManager.setupPumpManagerUI(withIdentifier:initialSettings:prefersToSkipUserInteraction:) in Loop/Loop/Managers/DeviceDataManager.swift
saveUpdatedBasalRateSchedule(_:),DeviceDataManager.saveUpdatedBasalRateSchedule(_:) in Loop/Loop/Managers/DeviceDataManager.swift
pumpManagerTypeByIdentifier(_:),DeviceDataManager.pumpManagerTypeByIdentifier(_:) in Loop/Loop/Managers/DeviceDataManager.swift
pumpManagerTypeFromRawValue(_:),DeviceDataManager.pumpManagerTypeFromRawValue(_:) in Loop/Loop/Managers/DeviceDataManager.swift
pumpManagerFromRawValue(_:),DeviceDataManager.pumpManagerFromRawValue(_:) in Loop/Loop/Managers/DeviceDataManager.swift
checkPumpDataAndLoop(),DeviceDataManager.checkPumpDataAndLoop() in Loop/Loop/Managers/DeviceDataManager.swift
processCGMReadingResult(_:readingResult:completion:),DeviceDataManager.processCGMReadingResult(_:readingResult:completion:) in Loop/Loop/Managers/DeviceDataManager.swift
setupCGMManager(withIdentifier:prefersToSkipUserInteraction:),DeviceDataManager.setupCGMManager(withIdentifier:prefersToSkipUserInteraction:) in Loop/Loop/Managers/DeviceDataManager.swift
setupCGMManagerUI(withIdentifier:prefersToSkipUserInteraction:),DeviceDataManager.setupCGMManagerUI(withIdentifier:prefersToSkipUserInteraction:) in Loop/Loop/Managers/DeviceDataManager.swift
cgmManagerTypeByIdentifier(_:),DeviceDataManager.cgmManagerTypeByIdentifier(_:) in Loop/Loop/Managers/DeviceDataManager.swift
setupCGMManagerFromPumpManager(withIdentifier:),DeviceDataManager.setupCGMManagerFromPumpManager(withIdentifier:) in Loop/Loop/Managers/DeviceDataManager.swift
cgmManagerTypeFromRawValue(_:),DeviceDataManager.cgmManagerTypeFromRawValue(_:) in Loop/Loop/Managers/DeviceDataManager.swift
cgmManagerFromRawValue(_:),DeviceDataManager.cgmManagerFromRawValue(_:) in Loop/Loop/Managers/DeviceDataManager.swift
checkDeliveryUncertaintyState(),DeviceDataManager.checkDeliveryUncertaintyState() in Loop/Loop/Managers/DeviceDataManager.swift
getHealthStoreAuthorization(_:),DeviceDataManager.getHealthStoreAuthorization(_:) in Loop/Loop/Managers/DeviceDataManager.swift
authorizeHealthStore(_:),DeviceDataManager.authorizeHealthStore(_:) in Loop/Loop/Managers/DeviceDataManager.swift
storeSettings(newLoopSettings:notificationSettings:),SettingsManager.storeSettings(newLoopSettings:notificationSettings:) in Loop/Loop/Managers/SettingsManager.swift
mutateSettings(_:),LoopDataManager.mutateSettings(_:) in Loop/Loop/Managers/LoopDataManager.swift
triggerUpload(for:),RemoteDataServicesManager.triggerUpload(for:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
dosingFinished(),CrashRecoveryManager.dosingFinished() in Loop/Loop/Models/CrashRecoveryManager.swift
enact(recommendation:with:completion:),DoseEnactor.enact(recommendation:with:completion:) in Loop/Loop/Managers/DoseEnactor.swift
dosingStarted(dose:),CrashRecoveryManager.dosingStarted(dose:) in Loop/Loop/Models/CrashRecoveryManager.swift
purgeHistoricalSettingsObjects(completion:),SettingsManager.purgeHistoricalSettingsObjects(completion:) in Loop/Loop/Managers/SettingsManager.swift
notificationReceived(_:),ExtensionDataManager.notificationReceived(_:) in Loop/Loop/Managers/ExtensionDataManager.swift
update(),ExtensionDataManager.update() in Loop/Loop/Managers/ExtensionDataManager.swift
createIntentsContext(_:),ExtensionDataManager.createIntentsContext(_:) in Loop/Loop/Managers/ExtensionDataManager.swift
createStatusContext(glucoseUnit:_:),ExtensionDataManager.createStatusContext(glucoseUnit:_:) in Loop/Loop/Managers/ExtensionDataManager.swift
fetchScenario(from:completion:),LocalTestingScenariosManager.fetchScenario(from:completion:) in Loop/Loop/Managers/LocalTestingScenariosManager.swift
reloadScenarioURLs(),LocalTestingScenariosManager.reloadScenarioURLs() in Loop/Loop/Managers/LocalTestingScenariosManager.swift
testingScenariosManager(_:didUpdateScenarioURLs:),TestingScenariosManagerDelegate.testingScenariosManager(_:didUpdateScenarioURLs:) in Loop/Loop/Managers/TestingScenariosManager.swift
addService(_:),LoggingServicesManager.addService(_:) in Loop/Loop/Managers/LoggingServicesManager.swift
restoreService(_:),LoggingServicesManager.restoreService(_:) in Loop/Loop/Managers/LoggingServicesManager.swift
removeService(_:),LoggingServicesManager.removeService(_:) in Loop/Loop/Managers/LoggingServicesManager.swift
log(_:subsystem:category:type:_:),LoggingServicesManager.log(_:subsystem:category:type:_:) in Loop/Loop/Managers/LoggingServicesManager.swift
resumeLaunch(),LoopAppManager.resumeLaunch() in Loop/Loop/Managers/LoopAppManager.swift
checkProtectedDataAvailable(),LoopAppManager.checkProtectedDataAvailable() in Loop/Loop/Managers/LoopAppManager.swift
launchManagers(),LoopAppManager.launchManagers() in Loop/Loop/Managers/LoopAppManager.swift
launchOnboarding(),LoopAppManager.launchOnboarding() in Loop/Loop/Managers/LoopAppManager.swift
launchHomeScreen(),LoopAppManager.launchHomeScreen() in Loop/Loop/Managers/LoopAppManager.swift
handleRemoteNotificationFromLaunchOptions(),LoopAppManager.handleRemoteNotificationFromLaunchOptions() in Loop/Loop/Managers/LoopAppManager.swift
registerBackgroundTasks(),LoopAppManager.registerBackgroundTasks() in Loop/Loop/Managers/LoopAppManager.swift
scheduleBackgroundTasks(),LoopAppManager.scheduleBackgroundTasks() in Loop/Loop/Managers/LoopAppManager.swift
setWhitelistedDevices(),LoopAppManager.setWhitelistedDevices() in Loop/Loop/Managers/LoopAppManager.swift
isProtectedDataAvailable(),LoopAppManager.isProtectedDataAvailable() in Loop/Loop/Managers/LoopAppManager.swift
handleRemoteNotification(_:),ServicesManager.handleRemoteNotification(_:) in Loop/Loop/Managers/ServicesManager.swift
remoteNotificationRegistrationDidFinish(_:),SettingsManager.remoteNotificationRegistrationDidFinish(_:) in Loop/Loop/Managers/SettingsManager.swift
didBecomeActive(),SettingsManager.didBecomeActive() in Loop/Loop/Managers/SettingsManager.swift
launch(_:),OnboardingManager.launch(_:) in Loop/Loop/Managers/OnboardingManager.swift
askUserToConfirmLoopReset(),ResetLoopManager.askUserToConfirmLoopReset() in Loop/Loop/Managers/ResetLoopManager.swift
presetActivated(context:duration:),PresetActivationObserver.presetActivated(context:duration:) in Loop/Loop/Managers/LoopDataManager.swift
presetDeactivated(context:),PresetActivationObserver.presetDeactivated(context:) in Loop/Loop/Managers/LoopDataManager.swift
clearCachedInsulinEffects(),LoopDataManager.clearCachedInsulinEffects() in Loop/Loop/Managers/LoopDataManager.swift
startBackgroundTask(),LoopDataManager.startBackgroundTask() in Loop/Loop/Managers/LoopDataManager.swift
endBackgroundTask(),LoopDataManager.endBackgroundTask() in Loop/Loop/Managers/LoopDataManager.swift
loopDidComplete(date:dosingDecision:duration:),LoopDataManager.loopDidComplete(date:dosingDecision:duration:) in Loop/Loop/Managers/LoopDataManager.swift
loopDidError(date:error:dosingDecision:duration:),LoopDataManager.loopDidError(date:error:dosingDecision:duration:) in Loop/Loop/Managers/LoopDataManager.swift
storeDosingDecision(_:completion:),DosingDecisionStoreProtocol.storeDosingDecision(_:completion:) in Loop/Loop/Managers/Store Protocols/DosingDecisionStoreProtocol.swift
roundBolusVolume(units:),LoopDataManagerDelegate.roundBolusVolume(units:) in Loop/Loop/Managers/LoopDataManager.swift
loopDataManager(_:didRecommend:completion:),LoopDataManagerDelegate.loopDataManager(_:didRecommend:completion:) in Loop/Loop/Managers/LoopDataManager.swift
calculateDosingFactor(for:correctionRangeSchedule:settings:),ApplicationFactorStrategy.calculateDosingFactor(for:correctionRangeSchedule:settings:) in Loop/Loop/Models/ApplicationFactorStrategy.swift
roundBasalRate(unitsPerHour:),LoopDataManagerDelegate.roundBasalRate(unitsPerHour:) in Loop/Loop/Managers/LoopDataManager.swift
getGlucoseEffects(start:end:effectVelocities:completion:),CarbStoreProtocol.getGlucoseEffects(start:end:effectVelocities:completion:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
counteractionEffects(for:to:),GlucoseStoreProtocol.counteractionEffects(for:to:) in Loop/Loop/Managers/Store Protocols/GlucoseStoreProtocol.swift
getGlucoseSamples(start:end:completion:),GlucoseStoreProtocol.getGlucoseSamples(start:end:completion:) in Loop/Loop/Managers/Store Protocols/GlucoseStoreProtocol.swift
getGlucoseEffects(start:end:basalDosingEnd:completion:),DoseStoreProtocol.getGlucoseEffects(start:end:basalDosingEnd:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
glucoseEffects(of:startingAt:endingAt:effectVelocities:),CarbStoreProtocol.glucoseEffects(of:startingAt:endingAt:effectVelocities:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
insulinOnBoard(at:completion:),DoseStoreProtocol.insulinOnBoard(at:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
carbsOnBoard(at:effectVelocities:completion:),CarbStoreProtocol.carbsOnBoard(at:effectVelocities:completion:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
getCounteractionEffects(start:end:to:_:),GlucoseStoreProtocol.getCounteractionEffects(start:end:to:_:) in Loop/Loop/Managers/Store Protocols/GlucoseStoreProtocol.swift
getRecentMomentumEffect(for:_:),GlucoseStoreProtocol.getRecentMomentumEffect(for:_:) in Loop/Loop/Managers/Store Protocols/GlucoseStoreProtocol.swift
loopDataManager(_:estimateBolusDuration:),LoopDataManagerDelegate.loopDataManager(_:estimateBolusDuration:) in Loop/Loop/Managers/LoopDataManager.swift
generateMissedMealNotificationIfNeeded(glucoseSamples:insulinCounteractionEffects:carbEffects:pendingAutobolusUnits:bolusDurationEstimator:),MealDetectionManager.generateMissedMealNotificationIfNeeded(glucoseSamples:insulinCounteractionEffects:carbEffects:pendingAutobolusUnits:bolusDurationEstimator:) in Loop/Loop/Managers/Missed Meal Detection/MealDetectionManager.swift
addReservoirValue(_:at:completion:),DoseStoreProtocol.addReservoirValue(_:at:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
addDoses(_:from:completion:),DoseStoreProtocol.addDoses(_:from:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
deleteCarbEntry(_:completion:),CarbStoreProtocol.deleteCarbEntry(_:completion:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
addCarbEntry(_:completion:),CarbStoreProtocol.addCarbEntry(_:completion:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
replaceCarbEntry(_:withEntry:completion:),CarbStoreProtocol.replaceCarbEntry(_:withEntry:completion:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
addGlucoseSamples(_:completion:),GlucoseStoreProtocol.addGlucoseSamples(_:completion:) in Loop/Loop/Managers/Store Protocols/GlucoseStoreProtocol.swift
predictGlucose(using:potentialBolus:potentialCarbEntry:replacingCarbEntry:includingPendingInsulin:considerPositiveVelocityAndRC:),LoopState.predictGlucose(using:potentialBolus:potentialCarbEntry:replacingCarbEntry:includingPendingInsulin:considerPositiveVelocityAndRC:) in Loop/Loop/Managers/LoopDataManager.swift
predictGlucoseFromManualGlucose(_:potentialBolus:potentialCarbEntry:replacingCarbEntry:includingPendingInsulin:considerPositiveVelocityAndRC:),LoopState.predictGlucoseFromManualGlucose(_:potentialBolus:potentialCarbEntry:replacingCarbEntry:includingPendingInsulin:considerPositiveVelocityAndRC:) in Loop/Loop/Managers/LoopDataManager.swift
recommendBolus(consideringPotentialCarbEntry:replacingCarbEntry:considerPositiveVelocityAndRC:),LoopState.recommendBolus(consideringPotentialCarbEntry:replacingCarbEntry:considerPositiveVelocityAndRC:) in Loop/Loop/Managers/LoopDataManager.swift
recommendBolusForManualGlucose(_:consideringPotentialCarbEntry:replacingCarbEntry:considerPositiveVelocityAndRC:),LoopState.recommendBolusForManualGlucose(_:consideringPotentialCarbEntry:replacingCarbEntry:considerPositiveVelocityAndRC:) in Loop/Loop/Managers/LoopDataManager.swift
recommendedInsulin(mealCarbs:manualGlucose:activeInsulin:carbRatioSchedule:correctionRangeSchedule:sensitivitySchedule:at:),SimpleBolusCalculator.recommendedInsulin(mealCarbs:manualGlucose:activeInsulin:carbRatioSchedule:correctionRangeSchedule:sensitivitySchedule:at:) in Loop/Loop/Models/SimpleBolusCalculator.swift
predictGlucose(using:potentialBolus:potentialCarbEntry:replacingCarbEntry:includingPendingInsulin:considerPositiveVelocityAndRC:),LoopStateView.predictGlucose(using:potentialBolus:potentialCarbEntry:replacingCarbEntry:includingPendingInsulin:considerPositiveVelocityAndRC:) in Loop/Loop/Managers/LoopDataManager.swift
predictGlucoseFromManualGlucose(_:potentialBolus:potentialCarbEntry:replacingCarbEntry:includingPendingInsulin:considerPositiveVelocityAndRC:),LoopStateView.predictGlucoseFromManualGlucose(_:potentialBolus:potentialCarbEntry:replacingCarbEntry:includingPendingInsulin:considerPositiveVelocityAndRC:) in Loop/Loop/Managers/LoopDataManager.swift
recommendBolus(consideringPotentialCarbEntry:replacingCarbEntry:considerPositiveVelocityAndRC:),LoopStateView.recommendBolus(consideringPotentialCarbEntry:replacingCarbEntry:considerPositiveVelocityAndRC:) in Loop/Loop/Managers/LoopDataManager.swift
recommendBolusForManualGlucose(_:consideringPotentialCarbEntry:replacingCarbEntry:considerPositiveVelocityAndRC:),LoopStateView.recommendBolusForManualGlucose(_:consideringPotentialCarbEntry:replacingCarbEntry:considerPositiveVelocityAndRC:) in Loop/Loop/Managers/LoopDataManager.swift
generateDiagnosticReport(_:),MealDetectionManager.generateDiagnosticReport(_:) in Loop/Loop/Managers/Missed Meal Detection/MealDetectionManager.swift
generateDiagnosticReport(_:),DoseStoreProtocol.generateDiagnosticReport(_:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
generateDiagnosticReport(_:),CarbStoreProtocol.generateDiagnosticReport(_:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
generateDiagnosticReport(_:),GlucoseStoreProtocol.generateDiagnosticReport(_:) in Loop/Loop/Managers/Store Protocols/GlucoseStoreProtocol.swift
currentDate(timeIntervalSinceNow:),MealDetectionManager.currentDate(timeIntervalSinceNow:) in Loop/Loop/Managers/Missed Meal Detection/MealDetectionManager.swift
hasMissedMeal(glucoseSamples:insulinCounteractionEffects:carbEffects:completion:),MealDetectionManager.hasMissedMeal(glucoseSamples:insulinCounteractionEffects:carbEffects:completion:) in Loop/Loop/Managers/Missed Meal Detection/MealDetectionManager.swift
determineCarbs(mealtime:unexpectedDeviation:),MealDetectionManager.determineCarbs(mealtime:unexpectedDeviation:) in Loop/Loop/Managers/Missed Meal Detection/MealDetectionManager.swift
effectThreshold(mealStart:carbsInGrams:),MealDetectionManager.effectThreshold(mealStart:carbsInGrams:) in Loop/Loop/Managers/Missed Meal Detection/MealDetectionManager.swift
manageMealNotifications(for:pendingAutobolusUnits:bolusDurationEstimator:),MealDetectionManager.manageMealNotifications(for:pendingAutobolusUnits:bolusDurationEstimator:) in Loop/Loop/Managers/Missed Meal Detection/MealDetectionManager.swift
continueOnboarding(allowResume:),OnboardingManager.continueOnboarding(allowResume:) in Loop/Loop/Managers/OnboardingManager.swift
displayOnboarding(_:resuming:),OnboardingManager.displayOnboarding(_:resuming:) in Loop/Loop/Managers/OnboardingManager.swift
completeActiveOnboarding(),OnboardingManager.completeActiveOnboarding() in Loop/Loop/Managers/OnboardingManager.swift
ensureAuthorization(_:),OnboardingManager.ensureAuthorization(_:) in Loop/Loop/Managers/OnboardingManager.swift
ensureNotificationAuthorization(_:),OnboardingManager.ensureNotificationAuthorization(_:) in Loop/Loop/Managers/OnboardingManager.swift
ensureHealthStoreAuthorization(_:),OnboardingManager.ensureHealthStoreAuthorization(_:) in Loop/Loop/Managers/OnboardingManager.swift
ensureBluetoothAuthorization(_:),OnboardingManager.ensureBluetoothAuthorization(_:) in Loop/Loop/Managers/OnboardingManager.swift
authorizeAndComplete(),OnboardingManager.authorizeAndComplete() in Loop/Loop/Managers/OnboardingManager.swift
complete(),OnboardingManager.complete() in Loop/Loop/Managers/OnboardingManager.swift
onboardingFromRawValue(_:),OnboardingManager.onboardingFromRawValue(_:) in Loop/Loop/Managers/OnboardingManager.swift
onboardingTypeFromRawValue(_:),OnboardingManager.onboardingTypeFromRawValue(_:) in Loop/Loop/Managers/OnboardingManager.swift
onboardingTypeByIdentifier(_:),OnboardingManager.onboardingTypeByIdentifier(_:) in Loop/Loop/Managers/OnboardingManager.swift
statefulPlugin(withIdentifier:),StatefulPluginManager.statefulPlugin(withIdentifier:) in Loop/Loop/Managers/StatefulPluginManager.swift
setupService(withIdentifier:),ServicesManager.setupService(withIdentifier:) in Loop/Loop/Managers/ServicesManager.swift
addService(_:),RemoteDataServicesManager.addService(_:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
restoreService(_:),RemoteDataServicesManager.restoreService(_:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
removeService(_:),RemoteDataServicesManager.removeService(_:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
dispatchQueue(for:withRemoteDataType:),RemoteDataServicesManager.dispatchQueue(for:withRemoteDataType:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
dispatchQueue(_:),RemoteDataServicesManager.dispatchQueue(_:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
uploadFailed(_:),RemoteDataServicesManager.uploadFailed(_:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
uploadSucceeded(_:),RemoteDataServicesManager.uploadSucceeded(_:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
uploadExistingData(to:),RemoteDataServicesManager.uploadExistingData(to:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
clearQueryAnchors(for:),RemoteDataServicesManager.clearQueryAnchors(for:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
triggerUpload(for:completion:),RemoteDataServicesManager.triggerUpload(for:completion:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
triggerUpload(for:),RemoteDataServicesManager.triggerUpload(for:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
loopWillReset(),ResetLoopManagerDelegate.loopWillReset() in Loop/Loop/Managers/ResetLoopManager.swift
loopDidReset(),ResetLoopManagerDelegate.loopDidReset() in Loop/Loop/Managers/ResetLoopManager.swift
resetTestingData(completion:),ResetLoopManagerDelegate.resetTestingData(completion:) in Loop/Loop/Managers/ResetLoopManager.swift
presentConfirmationAlert(confirmAction:cancelAction:),ResetLoopManagerDelegate.presentConfirmationAlert(confirmAction:cancelAction:) in Loop/Loop/Managers/ResetLoopManager.swift
presentCouldNotResetLoopAlert(error:),ResetLoopManagerDelegate.presentCouldNotResetLoopAlert(error:) in Loop/Loop/Managers/ResetLoopManager.swift
checkIfLoopIsAlreadyReset(),ResetLoopManager.checkIfLoopIsAlreadyReset() in Loop/Loop/Managers/ResetLoopManager.swift
resetLoop(completion:),ResetLoopManager.resetLoop(completion:) in Loop/Loop/Managers/ResetLoopManager.swift
resetLoopUserDefaults(),ResetLoopManager.resetLoopUserDefaults() in Loop/Loop/Managers/ResetLoopManager.swift
resetLoopDocuments(),ResetLoopManager.resetLoopDocuments() in Loop/Loop/Managers/ResetLoopManager.swift
setupServiceUI(withIdentifier:),ServicesManager.setupServiceUI(withIdentifier:) in Loop/Loop/Managers/ServicesManager.swift
serviceUITypeByIdentifier(_:),ServicesManager.serviceUITypeByIdentifier(_:) in Loop/Loop/Managers/ServicesManager.swift
serviceTypeFromRawValue(_:),ServicesManager.serviceTypeFromRawValue(_:) in Loop/Loop/Managers/ServicesManager.swift
serviceFromRawValue(_:),ServicesManager.serviceFromRawValue(_:) in Loop/Loop/Managers/ServicesManager.swift
addActiveService(_:),ServicesManager.addActiveService(_:) in Loop/Loop/Managers/ServicesManager.swift
removeActiveService(_:),ServicesManager.removeActiveService(_:) in Loop/Loop/Managers/ServicesManager.swift
saveState(),ServicesManager.saveState() in Loop/Loop/Managers/ServicesManager.swift
restoreState(),ServicesManager.restoreState() in Loop/Loop/Managers/ServicesManager.swift
beginBackgroundTask(name:),ServicesManager.beginBackgroundTask(name:) in Loop/Loop/Managers/ServicesManager.swift
endBackgroundTask(_:),ServicesManager.endBackgroundTask(_:) in Loop/Loop/Managers/ServicesManager.swift
deliverBolus(amountInUnits:),ServicesManagerDosingDelegate.deliverBolus(amountInUnits:) in Loop/Loop/Managers/ServicesManager.swift
enactOverride(name:duration:remoteAddress:),ServicesManagerDelegate.enactOverride(name:duration:remoteAddress:) in Loop/Loop/Managers/ServicesManager.swift
cancelCurrentOverride(),ServicesManagerDelegate.cancelCurrentOverride() in Loop/Loop/Managers/ServicesManager.swift
deliverCarbs(amountInGrams:absorptionTime:foodType:startDate:),ServicesManagerDelegate.deliverCarbs(amountInGrams:absorptionTime:foodType:startDate:) in Loop/Loop/Managers/ServicesManager.swift
mergeSettings(newLoopSettings:notificationSettings:deviceToken:),SettingsManager.mergeSettings(newLoopSettings:notificationSettings:deviceToken:) in Loop/Loop/Managers/SettingsManager.swift
storeSettingsCheckingNotificationPermissions(),SettingsManager.storeSettingsCheckingNotificationPermissions() in Loop/Loop/Managers/SettingsManager.swift
getAverageSleepStartTime(sampleLimit:_:),SleepStore.getAverageSleepStartTime(sampleLimit:_:) in Loop/Loop/Managers/SleepStore.swift
getAverageSleepStartTime(matching:sampleLimit:_:),SleepStore.getAverageSleepStartTime(matching:sampleLimit:_:) in Loop/Loop/Managers/SleepStore.swift
statefulPluginType(withIdentifier:),StatefulPluginManager.statefulPluginType(withIdentifier:) in Loop/Loop/Managers/StatefulPluginManager.swift
setupStatefulPlugin(withIdentifier:),StatefulPluginManager.setupStatefulPlugin(withIdentifier:) in Loop/Loop/Managers/StatefulPluginManager.swift
statefulPluginTypeFromRawValue(_:),StatefulPluginManager.statefulPluginTypeFromRawValue(_:) in Loop/Loop/Managers/StatefulPluginManager.swift
statefulPluginFromRawValue(_:),StatefulPluginManager.statefulPluginFromRawValue(_:) in Loop/Loop/Managers/StatefulPluginManager.swift
addActiveStatefulPlugin(_:),StatefulPluginManager.addActiveStatefulPlugin(_:) in Loop/Loop/Managers/StatefulPluginManager.swift
removeActiveStatefulPlugin(_:),StatefulPluginManager.removeActiveStatefulPlugin(_:) in Loop/Loop/Managers/StatefulPluginManager.swift
saveState(),StatefulPluginManager.saveState() in Loop/Loop/Managers/StatefulPluginManager.swift
restoreState(),StatefulPluginManager.restoreState() in Loop/Loop/Managers/StatefulPluginManager.swift
getCarbStatus(start:end:effectVelocities:completion:),CarbStoreProtocol.getCarbStatus(start:end:effectVelocities:completion:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
getCarbsOnBoardValues(start:end:effectVelocities:completion:),CarbStoreProtocol.getCarbsOnBoardValues(start:end:effectVelocities:completion:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
getTotalCarbs(since:completion:),CarbStoreProtocol.getTotalCarbs(since:completion:) in Loop/Loop/Managers/Store Protocols/CarbStoreProtocol.swift
addPumpEvents(_:lastReconciliation:replacePendingEvents:completion:),DoseStoreProtocol.addPumpEvents(_:lastReconciliation:replacePendingEvents:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
getNormalizedDoseEntries(start:end:completion:),DoseStoreProtocol.getNormalizedDoseEntries(start:end:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
executePumpEventQuery(fromQueryAnchor:limit:completion:),DoseStoreProtocol.executePumpEventQuery(fromQueryAnchor:limit:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
getInsulinOnBoardValues(start:end:basalDosingEnd:completion:),DoseStoreProtocol.getInsulinOnBoardValues(start:end:basalDosingEnd:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
getTotalUnitsDelivered(since:completion:),DoseStoreProtocol.getTotalUnitsDelivered(since:completion:) in Loop/Loop/Managers/Store Protocols/DoseStoreProtocol.swift
purgeAllGlucoseSamples(healthKitPredicate:completion:),GlucoseStoreProtocol.purgeAllGlucoseSamples(healthKitPredicate:completion:) in Loop/Loop/Managers/Store Protocols/GlucoseStoreProtocol.swift
executeGlucoseQuery(fromQueryAnchor:limit:completion:),GlucoseStoreProtocol.executeGlucoseQuery(fromQueryAnchor:limit:completion:) in Loop/Loop/Managers/Store Protocols/GlucoseStoreProtocol.swift
generateDiagnosticReport(_:),DeviceSupportDelegate.generateDiagnosticReport(_:) in Loop/Loop/Managers/SupportManager.swift
loadScenario(from:completion:),TestingScenariosManager.loadScenario(from:completion:) in Loop/Loop/Managers/TestingScenariosManager.swift
loadScenario(from:advancedByLoopIterations:completion:),TestingScenariosManager.loadScenario(from:advancedByLoopIterations:completion:) in Loop/Loop/Managers/TestingScenariosManager.swift
loadScenario(from:rewoundByLoopIterations:completion:),TestingScenariosManager.loadScenario(from:rewoundByLoopIterations:completion:) in Loop/Loop/Managers/TestingScenariosManager.swift
stepActiveScenarioBackward(completion:),TestingScenariosManager.stepActiveScenarioBackward(completion:) in Loop/Loop/Managers/TestingScenariosManager.swift
stepActiveScenarioForward(completion:),TestingScenariosManager.stepActiveScenarioForward(completion:) in Loop/Loop/Managers/TestingScenariosManager.swift
fetchScenario(from:completion:),TestingScenariosManagerRequirements.fetchScenario(from:completion:) in Loop/Loop/Managers/TestingScenariosManager.swift
checkTrustedTime(),TrustedTimeChecker.checkTrustedTime() in Loop/Loop/Managers/TrustedTimeChecker.swift
issueTimeChangedAlert(),TrustedTimeChecker.issueTimeChangedAlert() in Loop/Loop/Managers/TrustedTimeChecker.swift
retractTimeChangedAlert(),TrustedTimeChecker.retractTimeChangedAlert() in Loop/Loop/Managers/TrustedTimeChecker.swift
updateBedtimeIfNeeded(),WatchDataManager.updateBedtimeIfNeeded() in Loop/Loop/Managers/WatchDataManager.swift
updateWatch(_:),WatchDataManager.updateWatch(_:) in Loop/Loop/Managers/WatchDataManager.swift
sendSettingsIfNeeded(),WatchDataManager.sendSettingsIfNeeded() in Loop/Loop/Managers/WatchDataManager.swift
sendSupportedBolusVolumesIfNeeded(),WatchDataManager.sendSupportedBolusVolumesIfNeeded() in Loop/Loop/Managers/WatchDataManager.swift
sendWatchContextIfNeeded(),WatchDataManager.sendWatchContextIfNeeded() in Loop/Loop/Managers/WatchDataManager.swift
sendWatchContext(_:),WatchDataManager.sendWatchContext(_:) in Loop/Loop/Managers/WatchDataManager.swift
createWatchContext(recommendingBolusFor:_:),WatchDataManager.createWatchContext(recommendingBolusFor:_:) in Loop/Loop/Managers/WatchDataManager.swift
addCarbEntryAndBolusFromWatchMessage(_:),WatchDataManager.addCarbEntryAndBolusFromWatchMessage(_:) in Loop/Loop/Managers/WatchDataManager.swift
calculateDosingFactor(for:correctionRangeSchedule:settings:),ConstantApplicationFactorStrategy.calculateDosingFactor(for:correctionRangeSchedule:settings:) in Loop/Loop/Models/ConstantApplicationFactorStrategy.swift
issueCrashAlert(),CrashRecoveryManager.issueCrashAlert() in Loop/Loop/Models/CrashRecoveryManager.swift
calculateDosingFactor(for:correctionRangeSchedule:settings:),GlucoseBasedApplicationFactorStrategy.calculateDosingFactor(for:correctionRangeSchedule:settings:) in Loop/Loop/Models/GlucoseBasedApplicationFactorStrategy.swift
localized(),ConfigurationErrorDetail.localized() in Loop/Loop/Models/LoopError.swift
localizedDescription(forGlucoseUnit:),PredictionInputEffect.localizedDescription(forGlucoseUnit:) in Loop/Loop/Models/PredictionInputEffect.swift
setError(_:),ZipArchive.setError(_:) in Loop/Loop/Models/ZipArchive.swift
finish(sync:),Stream.finish(sync:) in Loop/Loop/Models/ZipArchive.swift
startProcessing(_:),Stream.startProcessing(_:) in Loop/Loop/Models/ZipArchive.swift
write(_:),Stream.write(_:) in Loop/Loop/Models/ZipArchive.swift
getCGMManagerTypeByIdentifier(_:),PluginManager.getCGMManagerTypeByIdentifier(_:) in Loop/Loop/Plugins/PluginManager.swift
getServiceTypeByIdentifier(_:),PluginManager.getServiceTypeByIdentifier(_:) in Loop/Loop/Plugins/PluginManager.swift
getStatefulPluginTypeByIdentifier(_:),PluginManager.getStatefulPluginTypeByIdentifier(_:) in Loop/Loop/Plugins/PluginManager.swift
getOnboardingTypeByIdentifier(_:),PluginManager.getOnboardingTypeByIdentifier(_:) in Loop/Loop/Plugins/PluginManager.swift
getSupportUITypeByIdentifier(_:),PluginManager.getSupportUITypeByIdentifier(_:) in Loop/Loop/Plugins/PluginManager.swift
viewDidLoad(),CarbAbsorptionViewController.viewDidLoad() in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
didReceiveMemoryWarning(),CarbAbsorptionViewController.didReceiveMemoryWarning() in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
viewWillTransition(to:with:),CarbAbsorptionViewController.viewWillTransition(to:with:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
createChartsManager(),CarbAbsorptionViewController.createChartsManager() in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
glucoseUnitDidChange(),CarbAbsorptionViewController.glucoseUnitDidChange() in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
reloadData(animated:),CarbAbsorptionViewController.reloadData(animated:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
numberOfSections(in:),CarbAbsorptionViewController.numberOfSections(in:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
tableView(_:numberOfRowsInSection:),CarbAbsorptionViewController.tableView(_:numberOfRowsInSection:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
tableView(_:cellForRowAt:),CarbAbsorptionViewController.tableView(_:cellForRowAt:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
updateCell(_:),CarbAbsorptionViewController.updateCell(_:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
tableView(_:canEditRowAt:),CarbAbsorptionViewController.tableView(_:canEditRowAt:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
tableView(_:commit:forRowAt:),CarbAbsorptionViewController.tableView(_:commit:forRowAt:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
tableView(_:estimatedHeightForRowAt:),CarbAbsorptionViewController.tableView(_:estimatedHeightForRowAt:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
tableView(_:willSelectRowAt:),CarbAbsorptionViewController.tableView(_:willSelectRowAt:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
tableView(_:didSelectRowAt:),CarbAbsorptionViewController.tableView(_:didSelectRowAt:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
carbEditWasCanceled(),CarbAbsorptionViewController.carbEditWasCanceled() in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
presentCarbEntryScreen(),CarbAbsorptionViewController.presentCarbEntryScreen() in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
viewDidLoad(),InsulinDeliveryTableViewController.viewDidLoad() in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
viewWillAppear(_:),InsulinDeliveryTableViewController.viewWillAppear(_:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
viewDidAppear(_:),InsulinDeliveryTableViewController.viewDidAppear(_:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
viewWillDisappear(_:),InsulinDeliveryTableViewController.viewWillDisappear(_:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
viewDidDisappear(_:),InsulinDeliveryTableViewController.viewDidDisappear(_:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
setEditing(_:animated:),InsulinDeliveryTableViewController.setEditing(_:animated:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
didTapEnterDoseButton(sender:),InsulinDeliveryTableViewController.didTapEnterDoseButton(sender:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
reloadData(),InsulinDeliveryTableViewController.reloadData() in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
updateTimelyStats(_:),InsulinDeliveryTableViewController.updateTimelyStats(_:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
updateIOB(),InsulinDeliveryTableViewController.updateIOB() in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
updateTotal(),InsulinDeliveryTableViewController.updateTotal() in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
selectedSegmentChanged(_:),InsulinDeliveryTableViewController.selectedSegmentChanged(_:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
confirmDeletion(_:),InsulinDeliveryTableViewController.confirmDeletion(_:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
deleteAllObjects(),InsulinDeliveryTableViewController.deleteAllObjects() in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
numberOfSections(in:),InsulinDeliveryTableViewController.numberOfSections(in:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
tableView(_:numberOfRowsInSection:),InsulinDeliveryTableViewController.tableView(_:numberOfRowsInSection:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
tableView(_:cellForRowAt:),InsulinDeliveryTableViewController.tableView(_:cellForRowAt:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
tableView(_:canEditRowAt:),InsulinDeliveryTableViewController.tableView(_:canEditRowAt:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
tableView(_:commit:forRowAt:),InsulinDeliveryTableViewController.tableView(_:commit:forRowAt:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
tableView(_:didSelectRowAt:),InsulinDeliveryTableViewController.tableView(_:didSelectRowAt:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
viewDidLoad(),PredictionTableViewController.viewDidLoad() in Loop/Loop/View Controllers/PredictionTableViewController.swift
didReceiveMemoryWarning(),PredictionTableViewController.didReceiveMemoryWarning() in Loop/Loop/View Controllers/PredictionTableViewController.swift
viewWillTransition(to:with:),PredictionTableViewController.viewWillTransition(to:with:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
createChartsManager(),PredictionTableViewController.createChartsManager() in Loop/Loop/View Controllers/PredictionTableViewController.swift
glucoseUnitDidChange(),PredictionTableViewController.glucoseUnitDidChange() in Loop/Loop/View Controllers/PredictionTableViewController.swift
reloadData(animated:),PredictionTableViewController.reloadData(animated:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
numberOfSections(in:),PredictionTableViewController.numberOfSections(in:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
tableView(_:numberOfRowsInSection:),PredictionTableViewController.tableView(_:numberOfRowsInSection:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
tableView(_:cellForRowAt:),PredictionTableViewController.tableView(_:cellForRowAt:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
tableView(_:updateTitleFor:at:),PredictionTableViewController.tableView(_:updateTitleFor:at:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
tableView(_:updateTextFor:at:),PredictionTableViewController.tableView(_:updateTextFor:at:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
tableView(_:estimatedHeightForRowAt:),PredictionTableViewController.tableView(_:estimatedHeightForRowAt:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
tableView(_:didSelectRowAt:),PredictionTableViewController.tableView(_:didSelectRowAt:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
restoreUserActivityState(_:),RootNavigationController.restoreUserActivityState(_:) in Loop/Loop/View Controllers/RootNavigationController.swift
restoreUserActivityState(_:),StatusTableViewController.restoreUserActivityState(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentCustomPresets(confirm:),StatusTableViewController.presentCustomPresets(confirm:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentBolusScreen(),StatusTableViewController.presentBolusScreen() in Loop/Loop/View Controllers/StatusTableViewController.swift
togglePreMealMode(confirm:),StatusTableViewController.togglePreMealMode(confirm:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentCarbEntryScreen(_:),StatusTableViewController.presentCarbEntryScreen(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
viewDidLoad(),StatusTableViewController.viewDidLoad() in Loop/Loop/View Controllers/StatusTableViewController.swift
didReceiveMemoryWarning(),StatusTableViewController.didReceiveMemoryWarning() in Loop/Loop/View Controllers/StatusTableViewController.swift
viewWillAppear(_:),StatusTableViewController.viewWillAppear(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
viewDidAppear(_:),StatusTableViewController.viewDidAppear(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
viewWillDisappear(_:),StatusTableViewController.viewWillDisappear(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
viewWillTransition(to:with:),StatusTableViewController.viewWillTransition(to:with:) in Loop/Loop/View Controllers/StatusTableViewController.swift
updateBolusProgress(),StatusTableViewController.updateBolusProgress() in Loop/Loop/View Controllers/StatusTableViewController.swift
updateHUDActive(),StatusTableViewController.updateHUDActive() in Loop/Loop/View Controllers/StatusTableViewController.swift
setupToolbarItems(),StatusTableViewController.setupToolbarItems() in Loop/Loop/View Controllers/StatusTableViewController.swift
updateToolbarItems(),StatusTableViewController.updateToolbarItems() in Loop/Loop/View Controllers/StatusTableViewController.swift
glucoseUnitDidChange(),StatusTableViewController.glucoseUnitDidChange() in Loop/Loop/View Controllers/StatusTableViewController.swift
registerCGMManager(),StatusTableViewController.registerCGMManager() in Loop/Loop/View Controllers/StatusTableViewController.swift
registerPumpManager(),StatusTableViewController.registerPumpManager() in Loop/Loop/View Controllers/StatusTableViewController.swift
createChartsManager(),StatusTableViewController.createChartsManager() in Loop/Loop/View Controllers/StatusTableViewController.swift
updateChartDateRange(),StatusTableViewController.updateChartDateRange() in Loop/Loop/View Controllers/StatusTableViewController.swift
reloadData(animated:),StatusTableViewController.reloadData(animated:) in Loop/Loop/View Controllers/StatusTableViewController.swift
determineStatusRowMode(),StatusTableViewController.determineStatusRowMode() in Loop/Loop/View Controllers/StatusTableViewController.swift
updateBannerRow(animated:),StatusTableViewController.updateBannerRow(animated:) in Loop/Loop/View Controllers/StatusTableViewController.swift
updateBannerAndHUDandStatusRows(statusRowMode:newSize:animated:),StatusTableViewController.updateBannerAndHUDandStatusRows(statusRowMode:newSize:animated:) in Loop/Loop/View Controllers/StatusTableViewController.swift
redrawCharts(),StatusTableViewController.redrawCharts() in Loop/Loop/View Controllers/StatusTableViewController.swift
updatePresetModeAvailability(automaticDosingEnabled:),StatusTableViewController.updatePresetModeAvailability(automaticDosingEnabled:) in Loop/Loop/View Controllers/StatusTableViewController.swift
numberOfSections(in:),StatusTableViewController.numberOfSections(in:) in Loop/Loop/View Controllers/StatusTableViewController.swift
tableView(_:numberOfRowsInSection:),StatusTableViewController.tableView(_:numberOfRowsInSection:) in Loop/Loop/View Controllers/StatusTableViewController.swift
tableView(_:cellForRowAt:),StatusTableViewController.tableView(_:cellForRowAt:) in Loop/Loop/View Controllers/StatusTableViewController.swift
tableView(_:updateSubtitleFor:at:),StatusTableViewController.tableView(_:updateSubtitleFor:at:) in Loop/Loop/View Controllers/StatusTableViewController.swift
tableView(_:heightForRowAt:),StatusTableViewController.tableView(_:heightForRowAt:) in Loop/Loop/View Controllers/StatusTableViewController.swift
tableView(_:didSelectRowAt:),StatusTableViewController.tableView(_:didSelectRowAt:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentUnmuteAlertConfirmation(),StatusTableViewController.presentUnmuteAlertConfirmation() in Loop/Loop/View Controllers/StatusTableViewController.swift
presentErrorCancelingBolus(_:),StatusTableViewController.presentErrorCancelingBolus(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
prepare(for:sender:),StatusTableViewController.prepare(for:sender:) in Loop/Loop/View Controllers/StatusTableViewController.swift
unwindFromEditing(_:),StatusTableViewController.unwindFromEditing(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
unwindFromSettings(_:),StatusTableViewController.unwindFromSettings(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
userTappedAddCarbs(),StatusTableViewController.userTappedAddCarbs() in Loop/Loop/View Controllers/StatusTableViewController.swift
bolusEntryView(enableManualGlucoseEntry:),StatusTableViewController.bolusEntryView(enableManualGlucoseEntry:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentBolusEntryView(enableManualGlucoseEntry:),StatusTableViewController.presentBolusEntryView(enableManualGlucoseEntry:) in Loop/Loop/View Controllers/StatusTableViewController.swift
createPreMealButtonItem(selected:isEnabled:),StatusTableViewController.createPreMealButtonItem(selected:isEnabled:) in Loop/Loop/View Controllers/StatusTableViewController.swift
createWorkoutButtonItem(selected:isEnabled:),StatusTableViewController.createWorkoutButtonItem(selected:isEnabled:) in Loop/Loop/View Controllers/StatusTableViewController.swift
premealButtonTapped(_:),StatusTableViewController.premealButtonTapped(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentPreMealModeAlertController(),StatusTableViewController.presentPreMealModeAlertController() in Loop/Loop/View Controllers/StatusTableViewController.swift
presentWorkoutModeAlertController(),StatusTableViewController.presentWorkoutModeAlertController() in Loop/Loop/View Controllers/StatusTableViewController.swift
toggleWorkoutMode(_:),StatusTableViewController.toggleWorkoutMode(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
onSettingsTapped(_:),StatusTableViewController.onSettingsTapped(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentSettings(),StatusTableViewController.presentSettings() in Loop/Loop/View Controllers/StatusTableViewController.swift
onPumpTapped(),StatusTableViewController.onPumpTapped() in Loop/Loop/View Controllers/StatusTableViewController.swift
onCGMTapped(),StatusTableViewController.onCGMTapped() in Loop/Loop/View Controllers/StatusTableViewController.swift
automaticDosingStatusChanged(_:),StatusTableViewController.automaticDosingStatusChanged(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
configurePumpManagerHUDViews(),StatusTableViewController.configurePumpManagerHUDViews() in Loop/Loop/View Controllers/StatusTableViewController.swift
configureCGMManagerHUDViews(),StatusTableViewController.configureCGMManagerHUDViews() in Loop/Loop/View Controllers/StatusTableViewController.swift
addPumpManagerViewToHUD(_:),StatusTableViewController.addPumpManagerViewToHUD(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
showLoopCompletionMessage(_:),StatusTableViewController.showLoopCompletionMessage(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentLoopCompletionMessage(title:message:),StatusTableViewController.presentLoopCompletionMessage(title:message:) in Loop/Loop/View Controllers/StatusTableViewController.swift
showLastError(_:),StatusTableViewController.showLastError(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
pumpStatusTapped(_:),StatusTableViewController.pumpStatusTapped(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
cgmStatusTapped(_:),StatusTableViewController.cgmStatusTapped(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
executeHUDTapAction(_:),StatusTableViewController.executeHUDTapAction(_:) in Loop/Loop/View Controllers/StatusTableViewController.swift
addNewPumpManager(),StatusTableViewController.addNewPumpManager() in Loop/Loop/View Controllers/StatusTableViewController.swift
addNewCGMManager(),StatusTableViewController.addNewCGMManager() in Loop/Loop/View Controllers/StatusTableViewController.swift
maybeOpenDebugMenu(),StatusTableViewController.maybeOpenDebugMenu() in Loop/Loop/View Controllers/StatusTableViewController.swift
presentDebugMenu(),StatusTableViewController.presentDebugMenu() in Loop/Loop/View Controllers/StatusTableViewController.swift
presentScenarioSelector(),StatusTableViewController.presentScenarioSelector() in Loop/Loop/View Controllers/StatusTableViewController.swift
addScenarioStepGestureRecognizers(),StatusTableViewController.addScenarioStepGestureRecognizers() in Loop/Loop/View Controllers/StatusTableViewController.swift
presentSimulatedCoreDataMenu(),StatusTableViewController.presentSimulatedCoreDataMenu() in Loop/Loop/View Controllers/StatusTableViewController.swift
generateSimulatedHistoricalCoreData(),StatusTableViewController.generateSimulatedHistoricalCoreData() in Loop/Loop/View Controllers/StatusTableViewController.swift
purgeHistoricalCoreData(),StatusTableViewController.purgeHistoricalCoreData() in Loop/Loop/View Controllers/StatusTableViewController.swift
presentConfirmation(actionSheetMessage:actionTitle:handler:),StatusTableViewController.presentConfirmation(actionSheetMessage:actionTitle:handler:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentError(_:handler:),StatusTableViewController.presentError(_:handler:) in Loop/Loop/View Controllers/StatusTableViewController.swift
presentActivityIndicator(title:message:completion:),StatusTableViewController.presentActivityIndicator(title:message:completion:) in Loop/Loop/View Controllers/StatusTableViewController.swift
stepActiveScenarioForward(),StatusTableViewController.stepActiveScenarioForward() in Loop/Loop/View Controllers/StatusTableViewController.swift
stepActiveScenarioBackward(),StatusTableViewController.stepActiveScenarioBackward() in Loop/Loop/View Controllers/StatusTableViewController.swift
generateRecommendationAndStartObserving(),BolusEntryViewModel.generateRecommendationAndStartObserving() in Loop/Loop/View Models/BolusEntryViewModel.swift
restoreUserActivityState(_:),CarbEntryViewModel.restoreUserActivityState(_:) in Loop/Loop/View Models/CarbEntryViewModel.swift
restoreUserActivityState(_:),SimpleBolusViewModel.restoreUserActivityState(_:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
updateConfiguration(using:),MuteAlertsWarningCell.updateConfiguration(using:) in Loop/Loop/View Controllers/StatusTableViewController.swift
updateConfiguration(using:),AlertPermissionsDisabledWarningCell.updateConfiguration(using:) in Loop/Loop/View Controllers/StatusTableViewController.swift
viewDidLoad(),TestingScenariosTableViewController.viewDidLoad() in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
tableView(_:leadingSwipeActionsConfigurationForRowAt:),TestingScenariosTableViewController.tableView(_:leadingSwipeActionsConfigurationForRowAt:) in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
tableView(_:trailingSwipeActionsConfigurationForRowAt:),TestingScenariosTableViewController.tableView(_:trailingSwipeActionsConfigurationForRowAt:) in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
contextualAction(rowTitle:alertTitle:message:loadScenario:),TestingScenariosTableViewController.contextualAction(rowTitle:alertTitle:message:loadScenario:) in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
updateLoadButtonEnabled(),TestingScenariosTableViewController.updateLoadButtonEnabled() in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
loadSelectedScenario(),TestingScenariosTableViewController.loadSelectedScenario() in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
cancel(),TestingScenariosTableViewController.cancel() in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
save(),AddEditFavoriteFoodViewModel.save() in Loop/Loop/View Models/AddEditFavoriteFoodViewModel.swift
clearAlertAndSave(),AddEditFavoriteFoodViewModel.clearAlertAndSave() in Loop/Loop/View Models/AddEditFavoriteFoodViewModel.swift
clearAlert(),AddEditFavoriteFoodViewModel.clearAlert() in Loop/Loop/View Models/AddEditFavoriteFoodViewModel.swift
withLoopState(do:),BolusEntryViewModelDelegate.withLoopState(do:) in Loop/Loop/View Models/BolusEntryViewModel.swift
saveGlucose(sample:),BolusEntryViewModelDelegate.saveGlucose(sample:) in Loop/Loop/View Models/BolusEntryViewModel.swift
addCarbEntry(_:replacing:completion:),BolusEntryViewModelDelegate.addCarbEntry(_:replacing:completion:) in Loop/Loop/View Models/BolusEntryViewModel.swift
storeManualBolusDosingDecision(_:withDate:),BolusEntryViewModelDelegate.storeManualBolusDosingDecision(_:withDate:) in Loop/Loop/View Models/BolusEntryViewModel.swift
enactBolus(units:activationType:completion:),BolusEntryViewModelDelegate.enactBolus(units:activationType:completion:) in Loop/Loop/View Models/BolusEntryViewModel.swift
getGlucoseSamples(start:end:completion:),BolusEntryViewModelDelegate.getGlucoseSamples(start:end:completion:) in Loop/Loop/View Models/BolusEntryViewModel.swift
insulinOnBoard(at:completion:),BolusEntryViewModelDelegate.insulinOnBoard(at:completion:) in Loop/Loop/View Models/BolusEntryViewModel.swift
carbsOnBoard(at:effectVelocities:completion:),BolusEntryViewModelDelegate.carbsOnBoard(at:effectVelocities:completion:) in Loop/Loop/View Models/BolusEntryViewModel.swift
insulinActivityDuration(for:),BolusEntryViewModelDelegate.insulinActivityDuration(for:) in Loop/Loop/View Models/BolusEntryViewModel.swift
roundBolusVolume(units:),BolusEntryViewModelDelegate.roundBolusVolume(units:) in Loop/Loop/View Models/BolusEntryViewModel.swift
updateRemoteRecommendation(),BolusEntryViewModelDelegate.updateRemoteRecommendation() in Loop/Loop/View Models/BolusEntryViewModel.swift
observeLoopUpdates(),BolusEntryViewModel.observeLoopUpdates() in Loop/Loop/View Models/BolusEntryViewModel.swift
observeEnteredBolusChanges(),BolusEntryViewModel.observeEnteredBolusChanges() in Loop/Loop/View Models/BolusEntryViewModel.swift
observeEnteredManualGlucoseChanges(),BolusEntryViewModel.observeEnteredManualGlucoseChanges() in Loop/Loop/View Models/BolusEntryViewModel.swift
observeElapsedTime(),BolusEntryViewModel.observeElapsedTime() in Loop/Loop/View Models/BolusEntryViewModel.swift
saveCarbEntry(_:replacingEntry:),BolusEntryViewModel.saveCarbEntry(_:replacingEntry:) in Loop/Loop/View Models/BolusEntryViewModel.swift
didPressActionButton(),BolusEntryViewModel.didPressActionButton() in Loop/Loop/View Models/BolusEntryViewModel.swift
saveAndDeliver(),BolusEntryViewModel.saveAndDeliver() in Loop/Loop/View Models/BolusEntryViewModel.swift
presentAlert(_:),BolusEntryViewModel.presentAlert(_:) in Loop/Loop/View Models/BolusEntryViewModel.swift
update(),BolusEntryViewModel.update() in Loop/Loop/View Models/BolusEntryViewModel.swift
disableManualGlucoseEntryIfNecessary(),BolusEntryViewModel.disableManualGlucoseEntryIfNecessary() in Loop/Loop/View Models/BolusEntryViewModel.swift
updateStoredGlucoseValues(),BolusEntryViewModel.updateStoredGlucoseValues() in Loop/Loop/View Models/BolusEntryViewModel.swift
updateGlucoseChartValues(),BolusEntryViewModel.updateGlucoseChartValues() in Loop/Loop/View Models/BolusEntryViewModel.swift
updatePredictedGlucoseValues(from:completion:),BolusEntryViewModel.updatePredictedGlucoseValues(from:completion:) in Loop/Loop/View Models/BolusEntryViewModel.swift
getInsulinOnBoard(),BolusEntryViewModel.getInsulinOnBoard() in Loop/Loop/View Models/BolusEntryViewModel.swift
updatePredictionAndRecommendation(),BolusEntryViewModel.updatePredictionAndRecommendation() in Loop/Loop/View Models/BolusEntryViewModel.swift
updateCarbsOnBoard(from:),BolusEntryViewModel.updateCarbsOnBoard(from:) in Loop/Loop/View Models/BolusEntryViewModel.swift
updateRecommendedBolusAndNotice(from:isUpdatingFromUserInput:),BolusEntryViewModel.updateRecommendedBolusAndNotice(from:isUpdatingFromUserInput:) in Loop/Loop/View Models/BolusEntryViewModel.swift
computeBolusRecommendation(from:),BolusEntryViewModel.computeBolusRecommendation(from:) in Loop/Loop/View Models/BolusEntryViewModel.swift
updateSettings(),BolusEntryViewModel.updateSettings() in Loop/Loop/View Models/BolusEntryViewModel.swift
updateChartDateInterval(),BolusEntryViewModel.updateChartDateInterval() in Loop/Loop/View Models/BolusEntryViewModel.swift
formatBolusAmount(_:),BolusEntryViewModel.formatBolusAmount(_:) in Loop/Loop/View Models/BolusEntryViewModel.swift
updateEnteredBolus(_:),BolusEntryViewModel.updateEnteredBolus(_:) in Loop/Loop/View Models/BolusEntryViewModel.swift
updateEnteredBolus(_:),BolusEntryViewModel.updateEnteredBolus(_:) in Loop/Loop/View Models/BolusEntryViewModel.swift
continueToBolus(),CarbEntryViewModel.continueToBolus() in Loop/Loop/View Models/CarbEntryViewModel.swift
validateInputAndContinue(),CarbEntryViewModel.validateInputAndContinue() in Loop/Loop/View Models/CarbEntryViewModel.swift
setBolusViewModel(),CarbEntryViewModel.setBolusViewModel() in Loop/Loop/View Models/CarbEntryViewModel.swift
clearAlert(),CarbEntryViewModel.clearAlert() in Loop/Loop/View Models/CarbEntryViewModel.swift
clearAlertAndContinueToBolus(),CarbEntryViewModel.clearAlertAndContinueToBolus() in Loop/Loop/View Models/CarbEntryViewModel.swift
onFavoriteFoodSave(_:),CarbEntryViewModel.onFavoriteFoodSave(_:) in Loop/Loop/View Models/CarbEntryViewModel.swift
observeFavoriteFoodIndexChange(),CarbEntryViewModel.observeFavoriteFoodIndexChange() in Loop/Loop/View Models/CarbEntryViewModel.swift
observeFavoriteFoodChange(),CarbEntryViewModel.observeFavoriteFoodChange() in Loop/Loop/View Models/CarbEntryViewModel.swift
favoriteFoodSelected(at:),CarbEntryViewModel.favoriteFoodSelected(at:) in Loop/Loop/View Models/CarbEntryViewModel.swift
observeLoopUpdates(),CarbEntryViewModel.observeLoopUpdates() in Loop/Loop/View Models/CarbEntryViewModel.swift
checkIfOverrideEnabled(),CarbEntryViewModel.checkIfOverrideEnabled() in Loop/Loop/View Models/CarbEntryViewModel.swift
observeAbsorptionTimeChange(),CarbEntryViewModel.observeAbsorptionTimeChange() in Loop/Loop/View Models/CarbEntryViewModel.swift
createExporter(to:),CriticalEventLogExporterFactory.createExporter(to:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
export(),CriticalEventLogExportViewModel.export() in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
cancel(),CriticalEventLogExportViewModel.cancel() in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
exportDidProgress(_:),CriticalEventLogExportViewModel.exportDidProgress(_:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
remainingDurationAsString(_:),CriticalEventLogExportViewModel.remainingDurationAsString(_:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
activityViewControllerPlaceholderItem(_:),CriticalEventLogExportActivityItemSource.activityViewControllerPlaceholderItem(_:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
activityViewController(_:itemForActivityType:),CriticalEventLogExportActivityItemSource.activityViewController(_:itemForActivityType:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
activityViewController(_:subjectForActivityType:),CriticalEventLogExportActivityItemSource.activityViewController(_:subjectForActivityType:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
activityViewController(_:dataTypeIdentifierForActivityType:),CriticalEventLogExportActivityItemSource.activityViewController(_:dataTypeIdentifierForActivityType:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
onFoodSave(_:),FavoriteFoodsViewModel.onFoodSave(_:) in Loop/Loop/View Models/FavoriteFoodsViewModel.swift
onFoodDelete(_:),FavoriteFoodsViewModel.onFoodDelete(_:) in Loop/Loop/View Models/FavoriteFoodsViewModel.swift
onFoodReorder(from:to:),FavoriteFoodsViewModel.onFoodReorder(from:to:) in Loop/Loop/View Models/FavoriteFoodsViewModel.swift
addFoodTapped(),FavoriteFoodsViewModel.addFoodTapped() in Loop/Loop/View Models/FavoriteFoodsViewModel.swift
observeFavoriteFoodChange(),FavoriteFoodsViewModel.observeFavoriteFoodChange() in Loop/Loop/View Models/FavoriteFoodsViewModel.swift
withLoopState(do:),ManualDoseViewModelDelegate.withLoopState(do:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
addManuallyEnteredDose(startDate:units:insulinType:),ManualDoseViewModelDelegate.addManuallyEnteredDose(startDate:units:insulinType:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
getGlucoseSamples(start:end:completion:),ManualDoseViewModelDelegate.getGlucoseSamples(start:end:completion:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
insulinOnBoard(at:completion:),ManualDoseViewModelDelegate.insulinOnBoard(at:completion:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
carbsOnBoard(at:effectVelocities:completion:),ManualDoseViewModelDelegate.carbsOnBoard(at:effectVelocities:completion:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
insulinActivityDuration(for:),ManualDoseViewModelDelegate.insulinActivityDuration(for:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
observeLoopUpdates(),ManualEntryDoseViewModel.observeLoopUpdates() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
observeEnteredBolusChanges(),ManualEntryDoseViewModel.observeEnteredBolusChanges() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
observeInsulinModelChanges(),ManualEntryDoseViewModel.observeInsulinModelChanges() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
observeDoseDateChanges(),ManualEntryDoseViewModel.observeDoseDateChanges() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
saveManualDose(onSuccess:),ManualEntryDoseViewModel.saveManualDose(onSuccess:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
continueSaving(onSuccess:),ManualEntryDoseViewModel.continueSaving(onSuccess:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
update(),ManualEntryDoseViewModel.update() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
updateStoredGlucoseValues(),ManualEntryDoseViewModel.updateStoredGlucoseValues() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
updateGlucoseChartValues(),ManualEntryDoseViewModel.updateGlucoseChartValues() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
updatePredictedGlucoseValues(from:completion:),ManualEntryDoseViewModel.updatePredictedGlucoseValues(from:completion:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
updateActiveInsulin(),ManualEntryDoseViewModel.updateActiveInsulin() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
updateFromLoopState(),ManualEntryDoseViewModel.updateFromLoopState() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
updateCarbsOnBoard(from:),ManualEntryDoseViewModel.updateCarbsOnBoard(from:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
updateSettings(),ManualEntryDoseViewModel.updateSettings() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
updateChartDateInterval(),ManualEntryDoseViewModel.updateChartDateInterval() in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
addService(withIdentifier:),ServicesViewModelDelegate.addService(withIdentifier:) in Loop/Loop/View Models/ServicesViewModel.swift
gotoService(withIdentifier:),ServicesViewModelDelegate.gotoService(withIdentifier:) in Loop/Loop/View Models/ServicesViewModel.swift
didTapService(_:),ServicesViewModel.didTapService(_:) in Loop/Loop/View Models/ServicesViewModel.swift
didTapAddService(_:),ServicesViewModel.didTapAddService(_:) in Loop/Loop/View Models/ServicesViewModel.swift
dosingEnabledChanged(_:),SettingsViewModelDelegate.dosingEnabledChanged(_:) in Loop/Loop/View Models/SettingsViewModel.swift
dosingStrategyChanged(_:),SettingsViewModelDelegate.dosingStrategyChanged(_:) in Loop/Loop/View Models/SettingsViewModel.swift
didTapIssueReport(),SettingsViewModelDelegate.didTapIssueReport() in Loop/Loop/View Models/SettingsViewModel.swift
didTapIssueReport(),SettingsViewModel.didTapIssueReport() in Loop/Loop/View Models/SettingsViewModel.swift
addGlucose(_:completion:),SimpleBolusViewModelDelegate.addGlucose(_:completion:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
addCarbEntry(_:replacing:completion:),SimpleBolusViewModelDelegate.addCarbEntry(_:replacing:completion:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
storeManualBolusDosingDecision(_:withDate:),SimpleBolusViewModelDelegate.storeManualBolusDosingDecision(_:withDate:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
enactBolus(units:activationType:),SimpleBolusViewModelDelegate.enactBolus(units:activationType:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
insulinOnBoard(at:completion:),SimpleBolusViewModelDelegate.insulinOnBoard(at:completion:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
computeSimpleBolusRecommendation(at:mealCarbs:manualGlucose:),SimpleBolusViewModelDelegate.computeSimpleBolusRecommendation(at:mealCarbs:manualGlucose:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
updateNotice(),SimpleBolusViewModel.updateNotice() in Loop/Loop/View Models/SimpleBolusViewModel.swift
updateRecommendation(),SimpleBolusViewModel.updateRecommendation() in Loop/Loop/View Models/SimpleBolusViewModel.swift
saveAndDeliver(completion:),SimpleBolusViewModel.saveAndDeliver(completion:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
presentAlert(_:),SimpleBolusViewModel.presentAlert(_:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
footer(appName:),VersionUpdateViewModel.footer(appName:) in Loop/Loop/View Models/VersionUpdateViewModel.swift
update(),VersionUpdateViewModel.update() in Loop/Loop/View Models/VersionUpdateViewModel.swift
alert(for:),AddEditFavoriteFoodView.alert(for:) in Loop/Loop/Views/AddEditFavoriteFoodView.swift
shouldAutoScroll(basedOn:),BolusEntryView.shouldAutoScroll(basedOn:) in Loop/Loop/Views/BolusEntryView.swift
didBeginEditing(),BolusEntryView.didBeginEditing() in Loop/Loop/Views/BolusEntryView.swift
warning(for:),BolusEntryView.warning(for:) in Loop/Loop/Views/BolusEntryView.swift
alert(for:),BolusEntryView.alert(for:) in Loop/Loop/Views/BolusEntryView.swift
body(content:),LabelBackground.body(content:) in Loop/Loop/Views/BolusEntryView.swift
awakeFromNib(),BolusProgressTableViewCell.awakeFromNib() in Loop/Loop/Views/BolusProgressTableViewCell.swift
layoutSubviews(),BolusProgressTableViewCell.layoutSubviews() in Loop/Loop/Views/BolusProgressTableViewCell.swift
tintColorDidChange(),BolusProgressTableViewCell.tintColorDidChange() in Loop/Loop/Views/BolusProgressTableViewCell.swift
traitCollectionDidChange(_:),BolusProgressTableViewCell.traitCollectionDidChange(_:) in Loop/Loop/Views/BolusProgressTableViewCell.swift
updateColors(),BolusProgressTableViewCell.updateColors() in Loop/Loop/Views/BolusProgressTableViewCell.swift
updateProgress(),BolusProgressTableViewCell.updateProgress() in Loop/Loop/Views/BolusProgressTableViewCell.swift
prepareForReuse(),BolusProgressTableViewCell.prepareForReuse() in Loop/Loop/Views/BolusProgressTableViewCell.swift
layoutSubviews(),CarbEntryTableViewCell.layoutSubviews() in Loop/Loop/Views/CarbEntryTableViewCell.swift
awakeFromNib(),CarbEntryTableViewCell.awakeFromNib() in Loop/Loop/Views/CarbEntryTableViewCell.swift
prepareForReuse(),CarbEntryTableViewCell.prepareForReuse() in Loop/Loop/Views/CarbEntryTableViewCell.swift
resetViews(),CarbEntryTableViewCell.resetViews() in Loop/Loop/Views/CarbEntryTableViewCell.swift
clearExpandedRow(),CarbEntryView.clearExpandedRow() in Loop/Loop/Views/CarbEntryView.swift
layoutSubviews(),CircleMaskView.layoutSubviews() in Loop/Loop/Views/CircleMaskView.swift
makeUIViewController(context:),ActivityViewController.makeUIViewController(context:) in Loop/Loop/Views/CriticalEventLogExportView.swift
updateUIViewController(_:context:),ActivityViewController.updateUIViewController(_:context:) in Loop/Loop/Views/CriticalEventLogExportView.swift
createExporter(to:),MockCriticalEventLogExporterFactory.createExporter(to:) in Loop/Loop/Views/CriticalEventLogExportView.swift
export(now:completion:),MockCriticalEventLogExporter.export(now:completion:) in Loop/Loop/Views/CriticalEventLogExportView.swift
onFoodTap(_:),FavoriteFoodsView.onFoodTap(_:) in Loop/Loop/Views/FavoriteFoodsView.swift
layoutSubviews(),IconTitleSubtitleTableViewCell.layoutSubviews() in Loop/Loop/Views/IconTitleSubtitleTableViewCell.swift
awakeFromNib(),IconTitleSubtitleTableViewCell.awakeFromNib() in Loop/Loop/Views/IconTitleSubtitleTableViewCell.swift
traitCollectionDidChange(_:),IconTitleSubtitleTableViewCell.traitCollectionDidChange(_:) in Loop/Loop/Views/IconTitleSubtitleTableViewCell.swift
updateColors(),IconTitleSubtitleTableViewCell.updateColors() in Loop/Loop/Views/IconTitleSubtitleTableViewCell.swift
shouldAutoScroll(basedOn:),ManualEntryDoseView.shouldAutoScroll(basedOn:) in Loop/Loop/Views/ManualEntryDoseView.swift
unitsChanged(),ManualGlucoseEntryRow.unitsChanged() in Loop/Loop/Views/ManualGlucoseEntryRow.swift
navigationContent(),NotificationsCriticalAlertPermissionsView.navigationContent() in Loop/Loop/Views/NotificationsCriticalAlertPermissionsView.swift
content(),NotificationsCriticalAlertPermissionsView.content() in Loop/Loop/Views/NotificationsCriticalAlertPermissionsView.swift
setup(),OverrideBadgeView.setup() in Loop/Loop/Views/OverrideBadgeView.swift
layoutSubviews(),OverrideBadgeView.layoutSubviews() in Loop/Loop/Views/OverrideBadgeView.swift
prepareForInterfaceBuilder(),OverrideBadgeView.prepareForInterfaceBuilder() in Loop/Loop/Views/OverrideBadgeView.swift
layoutSubviews(),PotentialCarbEntryTableViewCell.layoutSubviews() in Loop/Loop/Views/PotentialCarbEntryTableViewCell.swift
awakeFromNib(),PotentialCarbEntryTableViewCell.awakeFromNib() in Loop/Loop/Views/PotentialCarbEntryTableViewCell.swift
prepareForReuse(),PotentialCarbEntryTableViewCell.prepareForReuse() in Loop/Loop/Views/PotentialCarbEntryTableViewCell.swift
resetViews(),PotentialCarbEntryTableViewCell.resetViews() in Loop/Loop/Views/PotentialCarbEntryTableViewCell.swift
makeUIView(context:),PredictedGlucoseChartView.makeUIView(context:) in Loop/Loop/Views/PredictedGlucoseChartView.swift
updateUIView(_:context:),PredictedGlucoseChartView.updateUIView(_:context:) in Loop/Loop/Views/PredictedGlucoseChartView.swift
makeCoordinator(),PredictedGlucoseChartView.makeCoordinator() in Loop/Loop/Views/PredictedGlucoseChartView.swift
handlePan(_:),Coordinator.handlePan(_:) in Loop/Loop/Views/PredictedGlucoseChartView.swift
layoutSubviews(),PredictionInputEffectTableViewCell.layoutSubviews() in Loop/Loop/Views/PredictionInputEffectTableViewCell.swift
menuItemsForSection(name:),SettingsView.menuItemsForSection(name:) in Loop/Loop/Views/SettingsView.swift
formatGlucose(_:),SimpleBolusView.formatGlucose(_:) in Loop/Loop/Views/SimpleBolusView.swift
shouldAutoScroll(basedOn:),SimpleBolusView.shouldAutoScroll(basedOn:) in Loop/Loop/Views/SimpleBolusView.swift
alert(for:),SimpleBolusView.alert(for:) in Loop/Loop/Views/SimpleBolusView.swift
warning(for:),SimpleBolusView.warning(for:) in Loop/Loop/Views/SimpleBolusView.swift
closedLoopOffInformationalModal(),SimpleBolusView.closedLoopOffInformationalModal() in Loop/Loop/Views/SimpleBolusView.swift
addGlucose(_:completion:),MockSimpleBolusViewDelegate.addGlucose(_:completion:) in Loop/Loop/Views/SimpleBolusView.swift
addCarbEntry(_:replacing:completion:),MockSimpleBolusViewDelegate.addCarbEntry(_:replacing:completion:) in Loop/Loop/Views/SimpleBolusView.swift
enactBolus(units:activationType:),MockSimpleBolusViewDelegate.enactBolus(units:activationType:) in Loop/Loop/Views/SimpleBolusView.swift
insulinOnBoard(at:completion:),MockSimpleBolusViewDelegate.insulinOnBoard(at:completion:) in Loop/Loop/Views/SimpleBolusView.swift
computeSimpleBolusRecommendation(at:mealCarbs:manualGlucose:),MockSimpleBolusViewDelegate.computeSimpleBolusRecommendation(at:mealCarbs:manualGlucose:) in Loop/Loop/Views/SimpleBolusView.swift
storeManualBolusDosingDecision(_:withDate:),MockSimpleBolusViewDelegate.storeManualBolusDosingDecision(_:withDate:) in Loop/Loop/Views/SimpleBolusView.swift
layoutSubviews(),TitleSubtitleTableViewCell.layoutSubviews() in Loop/Loop/Views/TitleSubtitleTableViewCell.swift
awakeFromNib(),TitleSubtitleTableViewCell.awakeFromNib() in Loop/Loop/Views/TitleSubtitleTableViewCell.swift
traitCollectionDidChange(_:),TitleSubtitleTableViewCell.traitCollectionDidChange(_:) in Loop/Loop/Views/TitleSubtitleTableViewCell.swift
updateColors(),TitleSubtitleTableViewCell.updateColors() in Loop/Loop/Views/TitleSubtitleTableViewCell.swift
handler(for:),IntentHandler.handler(for:) in Loop/Loop Intent Extension/IntentHandler.swift
provideOverrideNameOptionsCollection(for:with:),OverrideIntentHandler.provideOverrideNameOptionsCollection(for:with:) in Loop/Loop Intent Extension/OverrideIntentHandler.swift
containsOverrideName(name:),OverrideIntentHandler.containsOverrideName(name:) in Loop/Loop Intent Extension/OverrideIntentHandler.swift
handle(intent:completion:),OverrideIntentHandler.handle(intent:completion:) in Loop/Loop Intent Extension/OverrideIntentHandler.swift
resolveOverrideName(for:with:),OverrideIntentHandler.resolveOverrideName(for:with:) in Loop/Loop Intent Extension/OverrideIntentHandler.swift
viewDidLoad(),StatusViewController.viewDidLoad() in Loop/Loop Status Extension/StatusViewController.swift
widgetActiveDisplayModeDidChange(_:withMaximumSize:),StatusViewController.widgetActiveDisplayModeDidChange(_:withMaximumSize:) in Loop/Loop Status Extension/StatusViewController.swift
viewWillTransition(to:with:),StatusViewController.viewWillTransition(to:with:) in Loop/Loop Status Extension/StatusViewController.swift
traitCollectionDidChange(_:),StatusViewController.traitCollectionDidChange(_:) in Loop/Loop Status Extension/StatusViewController.swift
openLoopApp(_:),StatusViewController.openLoopApp(_:) in Loop/Loop Status Extension/StatusViewController.swift
widgetPerformUpdate(completionHandler:),StatusViewController.widgetPerformUpdate(completionHandler:) in Loop/Loop Status Extension/StatusViewController.swift
update(),StatusViewController.update() in Loop/Loop Status Extension/StatusViewController.swift
path(in:),BasalRateView.path(in:) in Loop/Loop Widget Extension/Components/BasalView.swift
getArrowImage(),GlucoseView.getArrowImage() in Loop/Loop Widget Extension/Components/GlucoseView.swift
getLoopColor(freshness:),LoopCircleView.getLoopColor(freshness:) in Loop/Loop Widget Extension/Components/LoopCircleView.swift
foregroundColor(active:),SystemActionLink.foregroundColor(active:) in Loop/Loop Widget Extension/Components/SystemActionLink.swift
backgroundColor(active:),SystemActionLink.backgroundColor(active:) in Loop/Loop Widget Extension/Components/SystemActionLink.swift
placeholder(in:),StatusWidgetTimelineProvider.placeholder(in:) in Loop/Loop Widget Extension/Timeline/StatusWidgetTimelineProvider.swift
getSnapshot(in:completion:),StatusWidgetTimelineProvider.getSnapshot(in:completion:) in Loop/Loop Widget Extension/Timeline/StatusWidgetTimelineProvider.swift
getTimeline(in:completion:),StatusWidgetTimelineProvider.getTimeline(in:completion:) in Loop/Loop Widget Extension/Timeline/StatusWidgetTimelineProvider.swift
update(completion:),StatusWidgetTimelineProvider.update(completion:) in Loop/Loop Widget Extension/Timeline/StatusWidgetTimelineProvider.swift
issueAlert(_:),AlertIssuer.issueAlert(_:) in LoopKit/LoopKit/Alert.swift
retractAlert(identifier:),AlertIssuer.retractAlert(identifier:) in LoopKit/LoopKit/Alert.swift
acknowledgeAlert(alertIdentifier:completion:),AlertResponder.acknowledgeAlert(alertIdentifier:completion:) in LoopKit/LoopKit/Alert.swift
doesIssuedAlertExist(identifier:completion:),PersistedAlertStore.doesIssuedAlertExist(identifier:completion:) in LoopKit/LoopKit/Alert.swift
lookupAllUnretracted(managerIdentifier:completion:),PersistedAlertStore.lookupAllUnretracted(managerIdentifier:completion:) in LoopKit/LoopKit/Alert.swift
lookupAllUnacknowledgedUnretracted(managerIdentifier:completion:),PersistedAlertStore.lookupAllUnacknowledgedUnretracted(managerIdentifier:completion:) in LoopKit/LoopKit/Alert.swift
recordRetractedAlert(_:at:),PersistedAlertStore.recordRetractedAlert(_:at:) in LoopKit/LoopKit/Alert.swift
getSoundBaseURL(),AlertSoundVendor.getSoundBaseURL() in LoopKit/LoopKit/Alert.swift
getSounds(),AlertSoundVendor.getSounds() in LoopKit/LoopKit/Alert.swift
encode(to:),AnyCodableEquatable.encode(to:) in LoopKit/LoopKit/AnyCodableEquatable.swift
==(_:_:),AnyCodableEquatable.==(_:_:) in LoopKit/LoopKit/AnyCodableEquatable.swift
bluetoothDidUpdateState(_:),BluetoothObserver.bluetoothDidUpdateState(_:) in LoopKit/LoopKit/BluetoothProvider.swift
authorizeBluetooth(_:),BluetoothProvider.authorizeBluetooth(_:) in LoopKit/LoopKit/BluetoothProvider.swift
addBluetoothObserver(_:queue:),BluetoothProvider.addBluetoothObserver(_:queue:) in LoopKit/LoopKit/BluetoothProvider.swift
removeBluetoothObserver(_:),BluetoothProvider.removeBluetoothObserver(_:) in LoopKit/LoopKit/BluetoothProvider.swift
awakeFromInsert(),CachedCarbObject.awakeFromInsert() in LoopKit/LoopKit/CarbKit/CachedCarbObject+CoreDataClass.swift
percentAbsorptionAtPercentTime(_:),CarbAbsorptionComputable.percentAbsorptionAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentTimeAtPercentAbsorption(_:),CarbAbsorptionComputable.percentTimeAtPercentAbsorption(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
absorptionTime(forPercentAbsorption:atTime:),CarbAbsorptionComputable.absorptionTime(forPercentAbsorption:atTime:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
absorbedCarbs(of:atTime:absorptionTime:),CarbAbsorptionComputable.absorbedCarbs(of:atTime:absorptionTime:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
unabsorbedCarbs(of:atTime:absorptionTime:),CarbAbsorptionComputable.unabsorbedCarbs(of:atTime:absorptionTime:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentRateAtPercentTime(_:),CarbAbsorptionComputable.percentRateAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentAbsorptionAtPercentTime(_:),ParabolicAbsorption.percentAbsorptionAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentTimeAtPercentAbsorption(_:),ParabolicAbsorption.percentTimeAtPercentAbsorption(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentRateAtPercentTime(_:),ParabolicAbsorption.percentRateAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentAbsorptionAtPercentTime(_:),LinearAbsorption.percentAbsorptionAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentTimeAtPercentAbsorption(_:),LinearAbsorption.percentTimeAtPercentAbsorption(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentRateAtPercentTime(_:),LinearAbsorption.percentRateAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentAbsorptionAtPercentTime(_:),PiecewiseLinearAbsorption.percentAbsorptionAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentTimeAtPercentAbsorption(_:),PiecewiseLinearAbsorption.percentTimeAtPercentAbsorption(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
percentRateAtPercentTime(_:),PiecewiseLinearAbsorption.percentRateAtPercentTime(_:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
addNextEffect(_:start:end:),CarbStatusBuilder.addNextEffect(_:start:end:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
absorptionRateAtTime(t:),CarbStatusBuilder.absorptionRateAtTime(t:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
currentDate(timeIntervalSinceNow:),CarbStore.currentDate(timeIntervalSinceNow:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
migrateLegacyCarbEntryKeys(),CarbStore.migrateLegacyCarbEntryKeys() in LoopKit/LoopKit/CarbKit/CarbStore.swift
save(_:),PersistenceController.save(_:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
setInitialQueryAnchor(_:),HealthKitSampleStore.setInitialQueryAnchor(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
onReady(_:),PersistenceController.onReady(_:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
carbStoreHasUpdatedCarbData(_:),CarbStoreDelegate.carbStoreHasUpdatedCarbData(_:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
carbStore(_:didError:),CarbStoreDelegate.carbStore(_:didError:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
resolvingRecentInsulinSensitivitySchedule(_:relativeTo:),TemporaryScheduleOverrideHistory.resolvingRecentInsulinSensitivitySchedule(_:relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
resolvingRecentCarbRatioSchedule(_:relativeTo:),TemporaryScheduleOverrideHistory.resolvingRecentCarbRatioSchedule(_:relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
deleteObjects(of:predicate:withCompletion:),HKHealthStoreProtocol.deleteObjects(of:predicate:withCompletion:) in LoopKit/LoopKit/HealthKitSampleStore.swift
save(_:withCompletion:),HKHealthStoreProtocol.save(_:withCompletion:) in LoopKit/LoopKit/HealthKitSampleStore.swift
between(start:end:),DailyQuantitySchedule.between(start:end:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
close(),JSONStreamEncoder.close() in LoopKit/LoopKit/JSONStreamEncoder.swift
encode(_:),JSONStreamEncoder.encode(_:) in LoopKit/LoopKit/JSONStreamEncoder.swift
exportProgressTotalUnitCount(startDate:endDate:),CriticalEventLog.exportProgressTotalUnitCount(startDate:endDate:) in LoopKit/LoopKit/CriticalEventLog.swift
export(startDate:endDate:to:progress:),CriticalEventLog.export(startDate:endDate:to:progress:) in LoopKit/LoopKit/CriticalEventLog.swift
scheduleOffset(for:),DailyValueSchedule.scheduleOffset(for:) in LoopKit/LoopKit/DailyValueSchedule.swift
value(at:),DailyQuantitySchedule.value(at:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
between(start:end:),DailyValueSchedule.between(start:end:) in LoopKit/LoopKit/DailyValueSchedule.swift
map(_:),DailyValueSchedule.map(_:) in LoopKit/LoopKit/DailyValueSchedule.swift
zip(_:_:),DailyValueSchedule.zip(_:_:) in LoopKit/LoopKit/DailyValueSchedule.swift
map(_:),RepeatingScheduleValue.map(_:) in LoopKit/LoopKit/DailyValueSchedule.swift
between(start:end:),DailySchedule.between(start:end:) in LoopKit/LoopKit/DailyValueSchedule.swift
value(at:),DailySchedule.value(at:) in LoopKit/LoopKit/DailyValueSchedule.swift
truncatingBetween(start:end:),DailyValueSchedule.truncatingBetween(start:end:) in LoopKit/LoopKit/DailyValueSchedule.swift
write(_:),DataOutputStream.write(_:) in LoopKit/LoopKit/DataOutputStream.swift
finish(sync:),DataOutputStream.finish(sync:) in LoopKit/LoopKit/DataOutputStream.swift
vibrate(),AlertSoundPlayer.vibrate() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
play(url:),AlertSoundPlayer.play(url:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
stopAll(),AlertSoundPlayer.stopAll() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
vibrate(),DeviceAVSoundPlayer.vibrate() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
play(url:),DeviceAVSoundPlayer.play(url:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
stopAll(),DeviceAVSoundPlayer.stopAll() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
audioPlayerDidFinishPlaying(_:successfully:),Delegate.audioPlayerDidFinishPlaying(_:successfully:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
activationTypeFor(recommendedAmount:bolusAmount:),BolusActivationType.activationTypeFor(recommendedAmount:bolusAmount:) in LoopKit/LoopKit/DeviceManager/BolusActivationType.swift
cgmManager(_:didUpdate:),CGMManagerStatusObserver.cgmManager(_:didUpdate:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
fetchNewDataIfNeeded(_:),CGMManager.fetchNewDataIfNeeded(_:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
addStatusObserver(_:queue:),CGMManager.addStatusObserver(_:queue:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
removeStatusObserver(_:),CGMManager.removeStatusObserver(_:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
delete(completion:),CGMManager.delete(completion:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
startDateToFilterNewData(for:),CGMManagerDelegate.startDateToFilterNewData(for:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
cgmManager(_:hasNew:),CGMManagerDelegate.cgmManager(_:hasNew:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
cgmManager(_:hasNew:),CGMManagerDelegate.cgmManager(_:hasNew:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
cgmManagerWantsDeletion(_:),CGMManagerDelegate.cgmManagerWantsDeletion(_:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
cgmManagerDidUpdateState(_:),CGMManagerDelegate.cgmManagerDidUpdateState(_:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
credentialStoragePrefix(for:),CGMManagerDelegate.credentialStoragePrefix(for:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
updateModificationCounter(),DeviceLogEntry.updateModificationCounter() in LoopKit/LoopKit/DeviceManager/DeviceLog/DeviceLogEntry+CoreDataClass.swift
awakeFromInsert(),DeviceLogEntry.awakeFromInsert() in LoopKit/LoopKit/DeviceManager/DeviceLog/DeviceLogEntry+CoreDataClass.swift
willSave(),DeviceLogEntry.willSave() in LoopKit/LoopKit/DeviceManager/DeviceLog/DeviceLogEntry+CoreDataClass.swift
log(managerIdentifier:deviceIdentifier:type:message:completion:),PersistentDeviceLog.log(managerIdentifier:deviceIdentifier:type:message:completion:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
getLogEntries(startDate:endDate:completion:),PersistentDeviceLog.getLogEntries(startDate:endDate:completion:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
purgeExpiredLogEntries(),PersistentDeviceLog.purgeExpiredLogEntries() in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
purgeLogEntries(before:completion:),PersistentDeviceLog.purgeLogEntries(before:completion:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
deviceManager(_:logEventForDeviceIdentifier:type:message:completion:),DeviceManagerDelegate.deviceManager(_:logEventForDeviceIdentifier:type:message:completion:) in LoopKit/LoopKit/DeviceManager/DeviceManager.swift
doseProgressReporterDidUpdate(_:),DoseProgressObserver.doseProgressReporterDidUpdate(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressReporter.swift
addObserver(_:),DoseProgressReporter.addObserver(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressReporter.swift
removeObserver(_:),DoseProgressReporter.removeObserver(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressReporter.swift
addObserver(_:),DoseProgressTimerEstimator.addObserver(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
removeObserver(_:),DoseProgressTimerEstimator.removeObserver(_:) in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
notify(),DoseProgressTimerEstimator.notify() in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
start(),DoseProgressTimerEstimator.start() in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
timerParameters(),DoseProgressTimerEstimator.timerParameters() in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
stop(),DoseProgressTimerEstimator.stop() in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
withLock(_:),UnfairLock.withLock(_:) in LoopKit/LoopKit/UnfairLock.swift
next(),Iterator.next() in LoopKit/LoopKit/WeakSet.swift
next(),Iterator.next() in LoopKit/LoopKit/WeakSet.swift
pumpManager(_:didUpdate:oldStatus:),PumpManagerStatusObserver.pumpManager(_:didUpdate:oldStatus:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
roundToSupportedBasalRate(unitsPerHour:),PumpManager.roundToSupportedBasalRate(unitsPerHour:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
roundToSupportedBolusVolume(units:),PumpManager.roundToSupportedBolusVolume(units:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
addStatusObserver(_:queue:),PumpManager.addStatusObserver(_:queue:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
removeStatusObserver(_:),PumpManager.removeStatusObserver(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
ensureCurrentPumpData(completion:),PumpManager.ensureCurrentPumpData(completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
setMustProvideBLEHeartbeat(_:),PumpManager.setMustProvideBLEHeartbeat(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
createBolusProgressReporter(reportingOn:),PumpManager.createBolusProgressReporter(reportingOn:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
estimatedDuration(toBolus:),PumpManager.estimatedDuration(toBolus:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
enactBolus(units:activationType:completion:),PumpManager.enactBolus(units:activationType:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
cancelBolus(completion:),PumpManager.cancelBolus(completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
enactTempBasal(unitsPerHour:for:completion:),PumpManager.enactTempBasal(unitsPerHour:for:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
suspendDelivery(completion:),PumpManager.suspendDelivery(completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
resumeDelivery(completion:),PumpManager.resumeDelivery(completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
syncBasalRateSchedule(items:completion:),PumpManager.syncBasalRateSchedule(items:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
syncDeliveryLimits(limits:completion:),PumpManager.syncDeliveryLimits(limits:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
prepareForDeactivation(_:),PumpManager.prepareForDeactivation(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerBLEHeartbeatDidFire(_:),PumpManagerDelegate.pumpManagerBLEHeartbeatDidFire(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerMustProvideBLEHeartbeat(_:),PumpManagerDelegate.pumpManagerMustProvideBLEHeartbeat(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerWillDeactivate(_:),PumpManagerDelegate.pumpManagerWillDeactivate(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerPumpWasReplaced(_:),PumpManagerDelegate.pumpManagerPumpWasReplaced(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didUpdatePumpRecordsBasalProfileStartEvents:),PumpManagerDelegate.pumpManager(_:didUpdatePumpRecordsBasalProfileStartEvents:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didError:),PumpManagerDelegate.pumpManager(_:didError:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:hasNewPumpEvents:lastReconciliation:replacePendingEvents:completion:),PumpManagerDelegate.pumpManager(_:hasNewPumpEvents:lastReconciliation:replacePendingEvents:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didReadReservoirValue:at:completion:),PumpManagerDelegate.pumpManager(_:didReadReservoirValue:at:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didAdjustPumpClockBy:),PumpManagerDelegate.pumpManager(_:didAdjustPumpClockBy:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManagerDidUpdateState(_:),PumpManagerDelegate.pumpManagerDidUpdateState(_:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
pumpManager(_:didRequestBasalRateScheduleChange:completion:),PumpManagerDelegate.pumpManager(_:didRequestBasalRateScheduleChange:completion:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
startDateToFilterNewPumpEvents(for:),PumpManagerDelegate.startDateToFilterNewPumpEvents(for:) in LoopKit/LoopKit/DeviceManager/PumpManager.swift
updateModificationCounter(),DosingDecisionObject.updateModificationCounter() in LoopKit/LoopKit/DosingDecisionObject+CoreDataClass.swift
awakeFromInsert(),DosingDecisionObject.awakeFromInsert() in LoopKit/LoopKit/DosingDecisionObject+CoreDataClass.swift
willSave(),DosingDecisionObject.willSave() in LoopKit/LoopKit/DosingDecisionObject+CoreDataClass.swift
dosingDecisionStoreHasUpdatedDosingDecisionData(_:),DosingDecisionStoreDelegate.dosingDecisionStoreHasUpdatedDosingDecisionData(_:) in LoopKit/LoopKit/DosingDecisionStore.swift
storeDosingDecision(_:completion:),DosingDecisionStore.storeDosingDecision(_:completion:) in LoopKit/LoopKit/DosingDecisionStore.swift
purgeExpiredDosingDecisions(),DosingDecisionStore.purgeExpiredDosingDecisions() in LoopKit/LoopKit/DosingDecisionStore.swift
purgeDosingDecisions(before:completion:),DosingDecisionStore.purgeDosingDecisions(before:completion:) in LoopKit/LoopKit/DosingDecisionStore.swift
purgeDosingDecisionObjects(before:completion:),DosingDecisionStore.purgeDosingDecisionObjects(before:completion:) in LoopKit/LoopKit/DosingDecisionStore.swift
fetchLatestDosingDecision(reason:),DosingDecisionStore.fetchLatestDosingDecision(reason:) in LoopKit/LoopKit/DosingDecisionStore.swift
encodeDosingDecision(_:),DosingDecisionStore.encodeDosingDecision(_:) in LoopKit/LoopKit/DosingDecisionStore.swift
decodeDosingDecision(fromData:),DosingDecisionStore.decodeDosingDecision(fromData:) in LoopKit/LoopKit/DosingDecisionStore.swift
minLowerBound(),GlucoseRangeSchedule.minLowerBound() in LoopKit/LoopKit/GlucoseRangeSchedule.swift
executeSampleQuery(for:matching:limit:sortDescriptors:resultsHandler:),HKSampleQueryTestable.executeSampleQuery(for:matching:limit:sortDescriptors:resultsHandler:) in LoopKit/LoopKit/Extensions/HKHealthStore.swift
string(from:includeUnit:),QuantityFormatter.string(from:includeUnit:) in LoopKit/LoopKit/QuantityFormatter.swift
updateModificationCounter(),CachedGlucoseObject.updateModificationCounter() in LoopKit/LoopKit/GlucoseKit/CachedGlucoseObject+CoreDataClass.swift
awakeFromInsert(),CachedGlucoseObject.awakeFromInsert() in LoopKit/LoopKit/GlucoseKit/CachedGlucoseObject+CoreDataClass.swift
willSave(),CachedGlucoseObject.willSave() in LoopKit/LoopKit/GlucoseKit/CachedGlucoseObject+CoreDataClass.swift
fetchRequest(),CgmEvent.fetchRequest() in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
updateModificationCounter(),CgmEvent.updateModificationCounter() in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
awakeFromInsert(),CgmEvent.awakeFromInsert() in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
willSave(),CgmEvent.willSave() in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
cgmEventStoreHasUpdatedData(_:),CgmEventStoreDelegate.cgmEventStoreHasUpdatedData(_:) in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
onReady(_:),CgmEventStore.onReady(_:) in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
simulationDateRangeForSamples(_:from:to:duration:delay:delta:),LoopMath.simulationDateRangeForSamples(_:from:to:duration:delay:delta:) in LoopKit/LoopKit/LoopMath.swift
glucoseStoreHasUpdatedGlucoseData(_:),GlucoseStoreDelegate.glucoseStoreHasUpdatedGlucoseData(_:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
currentDate(timeIntervalSinceNow:),GlucoseStore.currentDate(timeIntervalSinceNow:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
onReady(_:),GlucoseStore.onReady(_:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
save(_:withCompletion:),HKHealthStoreProtocol.save(_:withCompletion:) in LoopKit/LoopKit/HealthKitSampleStore.swift
between(start:end:),GlucoseRangeSchedule.between(start:end:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
truncatingBetween(start:end:),GlucoseRangeSchedule.truncatingBetween(start:end:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
quantityBetween(start:end:),GlucoseRangeSchedule.quantityBetween(start:end:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
value(at:),GlucoseRangeSchedule.value(at:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
quantityRange(at:),GlucoseRangeSchedule.quantityRange(at:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
scheduleRange(),GlucoseRangeSchedule.scheduleRange() in LoopKit/LoopKit/GlucoseRangeSchedule.swift
convertTo(unit:),GlucoseRangeSchedule.convertTo(unit:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
schedule(for:),GlucoseRangeSchedule.schedule(for:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
isActive(at:),Override.isActive(at:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
convertTo(unit:),GlucoseThreshold.convertTo(unit:) in LoopKit/LoopKit/GlucoseThreshold.swift
classification(for:),Guardrail.classification(for:) in LoopKit/LoopKit/Guardrail.swift
stop(_:),HKHealthStoreProtocol.stop(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
execute(_:),HKHealthStoreProtocol.execute(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
enableBackgroundDelivery(for:frequency:),HKHealthStoreProtocol.enableBackgroundDelivery(for:frequency:) in LoopKit/LoopKit/HealthKitSampleStore.swift
authorizationStatus(for:),HKHealthStoreProtocol.authorizationStatus(for:) in LoopKit/LoopKit/HealthKitSampleStore.swift
cachedPreferredUnits(for:),HKHealthStoreProtocol.cachedPreferredUnits(for:) in LoopKit/LoopKit/HealthKitSampleStore.swift
preferredUnit(for:),HealthStoreUnitCache.preferredUnit(for:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
unitCache(for:),HealthStoreUnitCache.unitCache(for:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
storeQueryAnchor(_:),HealthKitSampleStoreDelegate.storeQueryAnchor(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
processResults(from:added:deleted:anchor:completion:),HealthKitSampleStoreDelegate.processResults(from:added:deleted:anchor:completion:) in LoopKit/LoopKit/HealthKitSampleStore.swift
authorizationIsDetermined(),HealthKitSampleStore.authorizationIsDetermined() in LoopKit/LoopKit/HealthKitSampleStore.swift
mutateQueryState(_:),HealthKitSampleStore.mutateQueryState(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
setQueryStateWithResult(_:),HealthKitSampleStore.setQueryStateWithResult(_:) in LoopKit/LoopKit/HealthKitSampleStore.swift
observerQueryHandler(query:observerQueryCompletionHandler:error:),HealthKitSampleStore.observerQueryHandler(query:observerQueryCompletionHandler:error:) in LoopKit/LoopKit/HealthKitSampleStore.swift
executeAnchorQuery(observerQuery:observerQueryCompletionHandler:),HealthKitSampleStore.executeAnchorQuery(observerQuery:observerQueryCompletionHandler:) in LoopKit/LoopKit/HealthKitSampleStore.swift
mutate(_:),Locked.mutate(_:) in LoopKit/LoopKit/Locked.swift
getHealthStoreUnitAndUpdateCache(for:),HealthStoreUnitCache.getHealthStoreUnitAndUpdateCache(for:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
updateCachedUnits(),HealthStoreUnitCache.updateCachedUnits() in LoopKit/LoopKit/HealthStoreUnitCache.swift
updateCache(for:with:),HealthStoreUnitCache.updateCache(for:with:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
percentEffectRemaining(at:),InsulinModel.percentEffectRemaining(at:) in LoopKit/LoopKit/InsulinKit/InsulinModel.swift
model(for:),InsulinModelProvider.model(for:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
model(for:),PresetInsulinModelProvider.model(for:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
model(for:),StaticInsulinModelProvider.model(for:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
updateModificationCounter(),CachedInsulinDeliveryObject.updateModificationCounter() in LoopKit/LoopKit/InsulinKit/CachedInsulinDeliveryObject+CoreDataClass.swift
awakeFromInsert(),CachedInsulinDeliveryObject.awakeFromInsert() in LoopKit/LoopKit/InsulinKit/CachedInsulinDeliveryObject+CoreDataClass.swift
willSave(),CachedInsulinDeliveryObject.willSave() in LoopKit/LoopKit/InsulinKit/CachedInsulinDeliveryObject+CoreDataClass.swift
doseStoreHasUpdatedPumpEventData(_:),DoseStoreDelegate.doseStoreHasUpdatedPumpEventData(_:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
resetPumpData(completion:),DoseStore.resetPumpData(completion:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
currentDate(timeIntervalSinceNow:),DoseStore.currentDate(timeIntervalSinceNow:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
clearReservoirNormalizedDoseCache(),DoseStore.clearReservoirNormalizedDoseCache() in LoopKit/LoopKit/InsulinKit/DoseStore.swift
currentDate(timeIntervalSinceNow:),InsulinDeliveryStore.currentDate(timeIntervalSinceNow:) in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
resolvingRecentBasalSchedule(_:relativeTo:),TemporaryScheduleOverrideHistory.resolvingRecentBasalSchedule(_:relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
insulinDeliveryStoreHasUpdatedDoseData(_:),InsulinDeliveryStoreDelegate.insulinDeliveryStoreHasUpdatedDoseData(_:) in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
updateModificationCounter(),PumpEvent.updateModificationCounter() in LoopKit/LoopKit/InsulinKit/PumpEvent+CoreDataClass.swift
awakeFromInsert(),PumpEvent.awakeFromInsert() in LoopKit/LoopKit/InsulinKit/PumpEvent+CoreDataClass.swift
willSave(),PumpEvent.willSave() in LoopKit/LoopKit/InsulinKit/PumpEvent+CoreDataClass.swift
awakeFromInsert(),Reservoir.awakeFromInsert() in LoopKit/LoopKit/InsulinKit/Reservoir.swift
query(by:),KeychainManager.query(by:) in LoopKit/LoopKit/KeychainManager.swift
queryForGenericPassword(by:),KeychainManager.queryForGenericPassword(by:) in LoopKit/LoopKit/KeychainManager.swift
queryForInternetPassword(account:url:label:),KeychainManager.queryForInternetPassword(account:url:label:) in LoopKit/LoopKit/KeychainManager.swift
updatedQuery(_:withPassword:),KeychainManager.updatedQuery(_:withPassword:) in LoopKit/LoopKit/KeychainManager.swift
updatedQuery(_:withPassword:),KeychainManager.updatedQuery(_:withPassword:) in LoopKit/LoopKit/KeychainManager.swift
delete(_:),KeychainManager.delete(_:) in LoopKit/LoopKit/KeychainManager.swift
deleteGenericPassword(forService:),KeychainManager.deleteGenericPassword(forService:) in LoopKit/LoopKit/KeychainManager.swift
replaceGenericPassword(_:forService:),KeychainManager.replaceGenericPassword(_:forService:) in LoopKit/LoopKit/KeychainManager.swift
replaceGenericPassword(_:forService:),KeychainManager.replaceGenericPassword(_:forService:) in LoopKit/LoopKit/KeychainManager.swift
getGenericPasswordForServiceAsData(_:),KeychainManager.getGenericPasswordForServiceAsData(_:) in LoopKit/LoopKit/KeychainManager.swift
getGenericPasswordForService(_:),KeychainManager.getGenericPasswordForService(_:) in LoopKit/LoopKit/KeychainManager.swift
setInternetPassword(_:account:atURL:label:),KeychainManager.setInternetPassword(_:account:atURL:label:) in LoopKit/LoopKit/KeychainManager.swift
replaceInternetCredentials(_:forAccount:),KeychainManager.replaceInternetCredentials(_:forAccount:) in LoopKit/LoopKit/KeychainManager.swift
replaceInternetCredentials(_:forLabel:),KeychainManager.replaceInternetCredentials(_:forLabel:) in LoopKit/LoopKit/KeychainManager.swift
replaceInternetCredentials(_:forURL:),KeychainManager.replaceInternetCredentials(_:forURL:) in LoopKit/LoopKit/KeychainManager.swift
getInternetCredentials(account:url:label:),KeychainManager.getInternetCredentials(account:url:label:) in LoopKit/LoopKit/KeychainManager.swift
generatePrediction(input:startDate:),GlucosePredictionAlgorithm.generatePrediction(input:startDate:) in LoopKit/LoopKit/LoopAlgorithm/GlucosePredictionAlgorithm.swift
generatePrediction(input:startDate:),LoopAlgorithm.generatePrediction(input:startDate:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
predictGlucose(startingAt:momentum:effects:),LoopMath.predictGlucose(startingAt:momentum:effects:) in LoopKit/LoopKit/LoopMath.swift
computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:),RetrospectiveCorrection.computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:) in LoopKit/LoopKit/RetrospectiveCorrection/RetrospectiveCorrection.swift
simulationDateRange(from:to:delta:),LoopMath.simulationDateRange(from:to:delta:) in LoopKit/LoopKit/LoopMath.swift
predictGlucose(startingAt:momentum:effects:),LoopMath.predictGlucose(startingAt:momentum:effects:) in LoopKit/LoopKit/LoopMath.swift
createDestinationInstances(forSource:in:manager:),CachedCarbObjectv3EntityMigrationPolicy.createDestinationInstances(forSource:in:manager:) in LoopKit/LoopKit/Persistence/Modelv3EntityMigrationPolicy.swift
createDestinationInstances(forSource:in:manager:),DeletedCarbObjectv3EntityMigrationPolicy.createDestinationInstances(forSource:in:manager:) in LoopKit/LoopKit/Persistence/Modelv3EntityMigrationPolicy.swift
persistenceControllerWillSave(_:),PersistenceControllerDelegate.persistenceControllerWillSave(_:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
persistenceControllerDidSave(_:error:),PersistenceControllerDelegate.persistenceControllerDidSave(_:error:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
model(),PersistenceController.model() in LoopKit/LoopKit/Persistence/PersistenceController.swift
saveInternal(),PersistenceController.saveInternal() in LoopKit/LoopKit/Persistence/PersistenceController.swift
updateMetadata(key:value:),PersistenceController.updateMetadata(key:value:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
fetchMetadata(key:),PersistenceController.fetchMetadata(key:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
initializeStack(inDirectory:model:),PersistenceController.initializeStack(inDirectory:model:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
initializationComplete(for:),Pluggable.initializationComplete(for:) in LoopKit/LoopKit/Pluggable.swift
updateUnit(to:),QuantityFormatter.updateUnit(to:) in LoopKit/LoopKit/QuantityFormatter.swift
configureNumberFormatter(),QuantityFormatter.configureNumberFormatter() in LoopKit/LoopKit/QuantityFormatter.swift
localizedUnitStringWithPlurality(forQuantity:avoidLineBreaking:),QuantityFormatter.localizedUnitStringWithPlurality(forQuantity:avoidLineBreaking:) in LoopKit/LoopKit/QuantityFormatter.swift
localizedUnitStringWithPlurality(forValue:avoidLineBreaking:),QuantityFormatter.localizedUnitStringWithPlurality(forValue:avoidLineBreaking:) in LoopKit/LoopKit/QuantityFormatter.swift
computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:),IntegralRetrospectiveCorrection.computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:) in LoopKit/LoopKit/RetrospectiveCorrection/IntegralRetrospectiveCorrection.swift
computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:),StandardRetrospectiveCorrection.computeEffect(startingAt:retrospectiveGlucoseDiscrepanciesSummed:recencyInterval:insulinSensitivity:basalRate:correctionRange:retrospectiveCorrectionGroupingInterval:) in LoopKit/LoopKit/RetrospectiveCorrection/StandardRetrospectiveCorrection.swift
recordAnalyticsEvent(_:withProperties:outOfSession:),AnalyticsService.recordAnalyticsEvent(_:withProperties:outOfSession:) in LoopKit/LoopKit/Service/AnalyticsService.swift
recordIdentify(_:value:),AnalyticsService.recordIdentify(_:value:) in LoopKit/LoopKit/Service/AnalyticsService.swift
recordIdentify(_:array:),AnalyticsService.recordIdentify(_:array:) in LoopKit/LoopKit/Service/AnalyticsService.swift
log(_:subsystem:category:type:_:),Logging.log(_:subsystem:category:type:_:) in LoopKit/LoopKit/Service/LoggingService.swift
enactRemoteOverride(name:durationTime:remoteAddress:),RemoteActionDelegate.enactRemoteOverride(name:durationTime:remoteAddress:) in LoopKit/LoopKit/Service/Remote/RemoteActionDelegate.swift
cancelRemoteOverride(),RemoteActionDelegate.cancelRemoteOverride() in LoopKit/LoopKit/Service/Remote/RemoteActionDelegate.swift
deliverRemoteCarbs(amountInGrams:absorptionTime:foodType:startDate:),RemoteActionDelegate.deliverRemoteCarbs(amountInGrams:absorptionTime:foodType:startDate:) in LoopKit/LoopKit/Service/Remote/RemoteActionDelegate.swift
deliverRemoteBolus(amountInUnits:),RemoteActionDelegate.deliverRemoteBolus(amountInUnits:) in LoopKit/LoopKit/Service/Remote/RemoteActionDelegate.swift
uploadAlertData(_:completion:),RemoteDataService.uploadAlertData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadCarbData(created:updated:deleted:completion:),RemoteDataService.uploadCarbData(created:updated:deleted:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadTemporaryOverrideData(updated:deleted:completion:),RemoteDataService.uploadTemporaryOverrideData(updated:deleted:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadDoseData(created:deleted:completion:),RemoteDataService.uploadDoseData(created:deleted:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadDosingDecisionData(_:completion:),RemoteDataService.uploadDosingDecisionData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadGlucoseData(_:completion:),RemoteDataService.uploadGlucoseData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadPumpEventData(_:completion:),RemoteDataService.uploadPumpEventData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadSettingsData(_:completion:),RemoteDataService.uploadSettingsData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
uploadCgmEventData(_:completion:),RemoteDataService.uploadCgmEventData(_:completion:) in LoopKit/LoopKit/Service/RemoteDataService.swift
remoteNotificationWasReceived(_:),RemoteDataService.remoteNotificationWasReceived(_:) in LoopKit/LoopKit/Service/RemoteDataService.swift
pluginDidUpdateState(_:),StatefulPluggableDelegate.pluginDidUpdateState(_:) in LoopKit/LoopKit/Service/StatefulPluggable.swift
pluginWantsDeletion(_:),StatefulPluggableDelegate.pluginWantsDeletion(_:) in LoopKit/LoopKit/Service/StatefulPluggable.swift
statefulPlugin(withIdentifier:),StatefulPluggableProvider.statefulPlugin(withIdentifier:) in LoopKit/LoopKit/Service/StatefulPluggable.swift
verify(_:),ServiceAuthentication.verify(_:) in LoopKit/LoopKit/ServiceAuthentication.swift
reset(),ServiceAuthentication.reset() in LoopKit/LoopKit/ServiceAuthentication.swift
updateModificationCounter(),SettingsObject.updateModificationCounter() in LoopKit/LoopKit/SettingsObject+CoreDataClass.swift
awakeFromInsert(),SettingsObject.awakeFromInsert() in LoopKit/LoopKit/SettingsObject+CoreDataClass.swift
willSave(),SettingsObject.willSave() in LoopKit/LoopKit/SettingsObject+CoreDataClass.swift
settingsStoreHasUpdatedSettingsData(_:),SettingsStoreDelegate.settingsStoreHasUpdatedSettingsData(_:) in LoopKit/LoopKit/SettingsStore.swift
storeSettings(_:),SettingsStore.storeSettings(_:) in LoopKit/LoopKit/SettingsStore.swift
storeSettings(_:completion:),SettingsStore.storeSettings(_:completion:) in LoopKit/LoopKit/SettingsStore.swift
purgeExpiredSettings(),SettingsStore.purgeExpiredSettings() in LoopKit/LoopKit/SettingsStore.swift
purgeSettings(before:completion:),SettingsStore.purgeSettings(before:completion:) in LoopKit/LoopKit/SettingsStore.swift
purgeSettingsObjects(before:completion:),SettingsStore.purgeSettingsObjects(before:completion:) in LoopKit/LoopKit/SettingsStore.swift
encodeSettings(_:),SettingsStore.encodeSettings(_:) in LoopKit/LoopKit/SettingsStore.swift
decodeSettings(fromData:),SettingsStore.decodeSettings(fromData:) in LoopKit/LoopKit/SettingsStore.swift
hasFinished(relativeTo:),TemporaryScheduleOverride.hasFinished(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
isActive(at:),TemporaryScheduleOverride.isActive(at:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
<(_:_:),Duration.<(_:_:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
encode(to:),End.encode(to:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
temporaryScheduleOverrideHistoryDidUpdate(_:),TemporaryScheduleOverrideHistoryDelegate.temporaryScheduleOverrideHistoryDidUpdate(_:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
recordOverride(_:at:),TemporaryScheduleOverrideHistory.recordOverride(_:at:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
deleteEventsStartingOnOrAfter(_:),TemporaryScheduleOverrideHistory.deleteEventsStartingOnOrAfter(_:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
record(_:at:),TemporaryScheduleOverrideHistory.record(_:at:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
cancelActiveOverride(at:),TemporaryScheduleOverrideHistory.cancelActiveOverride(at:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
getEvents(relativeTo:),TemporaryScheduleOverrideHistory.getEvents(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
relevantPeriod(relativeTo:),TemporaryScheduleOverrideHistory.relevantPeriod(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
filterRecentEvents(relativeTo:),TemporaryScheduleOverrideHistory.filterRecentEvents(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
overridesReflectingEnabledDuration(relativeTo:),TemporaryScheduleOverrideHistory.overridesReflectingEnabledDuration(relativeTo:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
validateOverridesReflectingEnabledDuration(_:),TemporaryScheduleOverrideHistory.validateOverridesReflectingEnabledDuration(_:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
wipeHistory(),TemporaryScheduleOverrideHistory.wipeHistory() in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
queryByAnchor(_:),TemporaryScheduleOverrideHistory.queryByAnchor(_:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
createOverride(enactTrigger:beginningAt:),TemporaryScheduleOverridePreset.createOverride(enactTrigger:beginningAt:) in LoopKit/LoopKit/TemporaryScheduleOverridePreset.swift
withLockIfAvailable(_:),UnfairLock.withLockIfAvailable(_:) in LoopKit/LoopKit/UnfairLock.swift
assertOwned(),UnfairLock.assertOwned() in LoopKit/LoopKit/UnfairLock.swift
assertNotOwned(),UnfairLock.assertNotOwned() in LoopKit/LoopKit/UnfairLock.swift
cleanupDeallocatedElements(),WeakSet.cleanupDeallocatedElements() in LoopKit/LoopKit/WeakSet.swift
notify(_:),WeakSynchronizedDelegate.notify(_:) in LoopKit/LoopKit/WeakSynchronizedDelegate.swift
notifyDelayed(by:_:),WeakSynchronizedDelegate.notifyDelayed(by:_:) in LoopKit/LoopKit/WeakSynchronizedDelegate.swift
call(_:),WeakSynchronizedDelegate.call(_:) in LoopKit/LoopKit/WeakSynchronizedDelegate.swift
insert(_:queue:),WeakSynchronizedSet.insert(_:queue:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
cleanupDeallocatedElements(),WeakSynchronizedSet.cleanupDeallocatedElements() in LoopKit/LoopKit/WeakSynchronizedSet.swift
contains(_:),WeakSynchronizedSet.contains(_:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
forEach(_:),WeakSynchronizedSet.forEach(_:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
removeElement(_:),WeakSynchronizedSet.removeElement(_:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
call(_:),ElementDispatchContainer.call(_:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
body(content:),CustomInsetGroupedListStyle.body(content:) in LoopKit/LoopKitUI/Extensions/View+InsetGroupedListStyle.swift
body(content:),KeyboardAware.body(content:) in LoopKit/LoopKitUI/Extensions/View+KeyboardAware.swift
body(content:),ActionButton.body(content:) in LoopKit/LoopKitUI/Views/ActionButton.swift
makeBody(configuration:),ActionButtonStyle.makeBody(configuration:) in LoopKit/LoopKitUI/Views/ActionButtonStyle.swift
body(availableWidth:),FractionalQuantityPicker.body(availableWidth:) in LoopKit/LoopKitUI/Views/FractionalQuantityPicker.swift
body(availableWidth:),GlucoseRangePicker.body(availableWidth:) in LoopKit/LoopKitUI/Views/GlucoseRangePicker.swift
section(for:),CorrectionRangeOverrideInformationView.section(for:) in LoopKit/LoopKitUI/Views/Information Screens/CorrectionRangeOverrideInformationView.swift
description(for:),CorrectionRangeOverrideInformationView.description(for:) in LoopKit/LoopKitUI/Views/Information Screens/CorrectionRangeOverrideInformationView.swift
instructionView(_:),InstructionList.instructionView(_:) in LoopKit/LoopKitUI/Views/InstructionList.swift
makeBody(configuration:),ListButtonStyle.makeBody(configuration:) in LoopKit/LoopKitUI/Views/ListButtonStyle.swift
detailView(for:),OverrideSelectionHistory.detailView(for:) in LoopKit/LoopKitUI/Views/OverrideSelectionHistory.swift
popoverButton(),PopoverLink.popoverButton() in LoopKit/LoopKitUI/Views/PopoverLink.swift
unitLabel(positionedFrom:),QuantityPicker.unitLabel(positionedFrom:) in LoopKit/LoopKitUI/Views/QuantityPicker.swift
itemView(for:at:),ScheduleEditor.itemView(for:at:) in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
supportMenuItem(supportInfoProvider:urlHandler:),MockSupport.supportMenuItem(supportInfoProvider:urlHandler:) in LoopKit/MockKitUI/MockSupport.swift
body(content:),OpenMockCGMSettingsOnLongPressGesture.body(content:) in LoopKit/MockKitUI/ViewModifier/OpenMockCGMSettingsOnLongPressGesture.swift
modifiedContent(content:),OpenMockCGMSettingsOnLongPressGesture.modifiedContent(content:) in LoopKit/MockKitUI/ViewModifier/OpenMockCGMSettingsOnLongPressGesture.swift
body(content:),OpenMockPumpSettingsOnLongPressGesture.body(content:) in LoopKit/MockKitUI/ViewModifier/OpenMockPumpSettingsOnLongPressGesture.swift
modifiedContent(content:),OpenMockPumpSettingsOnLongPressGesture.modifiedContent(content:) in LoopKit/MockKitUI/ViewModifier/OpenMockPumpSettingsOnLongPressGesture.swift
basalRateView(_:),InsulinStatusView.basalRateView(_:) in LoopKit/MockKitUI/Views/InsulinStatusView.swift
hostingController(rootView:),OnboardingUICoordinator.hostingController(rootView:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
hostingController(rootView:),MinimedUICoordinator.hostingController(rootView:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
hostingController(rootView:),ServiceUICoordinator.hostingController(rootView:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
hostingController(rootView:onDisappear:),DashUICoordinator.hostingController(rootView:onDisappear:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
scheduledReminderRow(scheduledDate:allowedDates:),NotificationSettingsView.scheduledReminderRow(scheduledDate:allowedDates:) in OmniBLE/OmniBLE/PumpManagerUI/Views/NotificationSettingsView.swift
scheduledReminderRowContents(disclosure:),NotificationSettingsView.scheduledReminderRowContents(disclosure:) in OmniBLE/OmniBLE/PumpManagerUI/Views/NotificationSettingsView.swift
timeComponent(value:units:),OmniBLESettingsView.timeComponent(value:units:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
reservoir(filledPercent:fillColor:),OmniBLESettingsView.reservoir(filledPercent:fillColor:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
suspendResumeRow(),OmniBLESettingsView.suspendResumeRow() in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
row(_:value:),PodDetailsView.row(_:value:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDetailsView.swift
hostingController(rootView:onDisappear:),OmnipodUICoordinator.hostingController(rootView:onDisappear:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
scheduledReminderRow(scheduledDate:allowedDates:),NotificationSettingsView.scheduledReminderRow(scheduledDate:allowedDates:) in OmniKit/OmniKitUI/Views/NotificationSettingsView.swift
scheduledReminderRowContents(disclosure:),NotificationSettingsView.scheduledReminderRowContents(disclosure:) in OmniKit/OmniKitUI/Views/NotificationSettingsView.swift
timeComponent(value:units:),OmnipodSettingsView.timeComponent(value:units:) in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
reservoir(filledPercent:fillColor:),OmnipodSettingsView.reservoir(filledPercent:fillColor:) in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
suspendResumeRow(),OmnipodSettingsView.suspendResumeRow() in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
row(_:value:),PodDetailsView.row(_:value:) in OmniKit/OmniKitUI/Views/PodDetailsView.swift
FrameworkBundle.init(),FrameworkBundle.init() in AmplitudeService/Common/LocalizedString.swift
AmplitudeService.init(),AmplitudeService.init() in AmplitudeService/AmplitudeServiceKit/AmplitudeService.swift
AmplitudeService.init(rawState:),AmplitudeService.init(rawState:) in AmplitudeService/AmplitudeServiceKit/AmplitudeService.swift
AmplitudeServiceTableViewController.init(service:for:),AmplitudeServiceTableViewController.init(service:for:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
AmplitudeServiceTableViewController.init(coder:),AmplitudeServiceTableViewController.init(coder:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
AmplitudeServiceTableViewController.init(style:),AmplitudeServiceTableViewController.init(style:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
AmplitudeServiceTableViewController.init(nibName:bundle:),AmplitudeServiceTableViewController.init(nibName:bundle:) in AmplitudeService/AmplitudeServiceKitUI/AmplitudeServiceTableViewController.swift
FrameworkBundle.init(),FrameworkBundle.init() in CGMBLEKit/Common/LocalizedString.swift
TransmitterVersionTxMessage.init(),TransmitterVersionTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/TransmitterVersionTxMessage.swift
TransmitterVersionRxMessage.init(data:),TransmitterVersionRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/TransmitterVersionRxMessage.swift
Self.init(data:),TransmitterRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/TransmitterMessage.swift
Calibration.init(calibrationMessage:activationDate:),Calibration.init(calibrationMessage:activationDate:) in CGMBLEKit/CGMBLEKit/Calibration.swift
CalibrationDataRxMessage.init(data:),CalibrationDataRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/CalibrationDataRxMessage.swift
CalibrationState.init(rawValue:),CalibrationState.init(rawValue:) in CGMBLEKit/CGMBLEKit/CalibrationState.swift
CalibrationDataTxMessage.init(),CalibrationDataTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/CalibrationDataTxMessage.swift
TransmitterTimeRxMessage.init(data:),TransmitterTimeRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/TransmitterTimeRxMessage.swift
GlucoseSubMessage.init(data:),GlucoseSubMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/GlucoseRxMessage.swift
GlucoseRxMessage.init(data:),GlucoseRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/GlucoseRxMessage.swift
TransmitterStatus.init(rawValue:),TransmitterStatus.init(rawValue:) in CGMBLEKit/CGMBLEKit/TransmitterStatus.swift
BondRequestTxMessage.init(),BondRequestTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/BondRequestTxMessage.swift
PeripheralManager.init(),PeripheralManager.init() in CGMBLEKit/CGMBLEKit/PeripheralManager.swift
AuthRequestRxMessage.init(data:),AuthRequestRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/AuthRequestRxMessage.swift
AuthChallengeRxMessage.init(data:),AuthChallengeRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/AuthChallengeRxMessage.swift
GlucoseHistoryTxMessage.init(),GlucoseHistoryTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/GlucoseHistoryTxMessage.swift
TransmitterManagerState.init(transmitterID:shouldSyncToRemoteService:transmitterStartDate:sensorStartOffset:),TransmitterManagerState.init(transmitterID:shouldSyncToRemoteService:transmitterStartDate:sensorStartOffset:) in CGMBLEKit/CGMBLEKit/TransmitterManagerState.swift
TransmitterManagerState.init(rawValue:),TransmitterManagerState.init(rawValue:) in CGMBLEKit/CGMBLEKit/TransmitterManagerState.swift
SessionStopTxMessage.init(stopTime:),SessionStopTxMessage.init(stopTime:) in CGMBLEKit/CGMBLEKit/Messages/SessionStopTxMessage.swift
SessionStopRxMessage.init(data:),SessionStopRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/SessionStopRxMessage.swift
GlucoseTxMessage.init(),GlucoseTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/GlucoseTxMessage.swift
ResetTxMessage.init(),ResetTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/ResetMessage.swift
ResetRxMessage.init(data:),ResetRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/ResetMessage.swift
FirmwareVersionTxMessage.init(),FirmwareVersionTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/FirmwareVersionTxMessage.swift
BatteryStatusTxMessage.init(),BatteryStatusTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/BatteryStatusTxMessage.swift
Locked<T>.init(_:),Locked.init(_:) in CGMBLEKit/Common/Locked.swift
SessionStartTxMessage.init(startTime:secondsSince1970:),SessionStartTxMessage.init(startTime:secondsSince1970:) in CGMBLEKit/CGMBLEKit/Messages/SessionStartTxMessage.swift
SessionStartRxMessage.init(data:),SessionStartRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/SessionStartRxMessage.swift
GlucoseBackfillTxMessage.init(byte1:byte2:identifier:startTime:endTime:),GlucoseBackfillTxMessage.init(byte1:byte2:identifier:startTime:endTime:) in CGMBLEKit/CGMBLEKit/Messages/GlucoseBackfillMessage.swift
GlucoseBackfillRxMessage.init(data:),GlucoseBackfillRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/GlucoseBackfillMessage.swift
GlucoseBackfillFrameBuffer.init(identifier:),GlucoseBackfillFrameBuffer.init(identifier:) in CGMBLEKit/CGMBLEKit/Messages/GlucoseBackfillMessage.swift
TransmitterTimeTxMessage.init(),TransmitterTimeTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/TransmitterTimeTxMessage.swift
Glucose.init(transmitterID:glucoseMessage:timeMessage:calibrationMessage:activationDate:),Glucose.init(transmitterID:glucoseMessage:timeMessage:calibrationMessage:activationDate:) in CGMBLEKit/CGMBLEKit/Glucose.swift
Glucose.init(transmitterID:status:glucoseMessage:timeMessage:calibrationMessage:activationDate:),Glucose.init(transmitterID:status:glucoseMessage:timeMessage:calibrationMessage:activationDate:) in CGMBLEKit/CGMBLEKit/Glucose.swift
CalibrateGlucoseRxMessage.init(data:),CalibrateGlucoseRxMessage.init(data:) in CGMBLEKit/CGMBLEKit/Messages/CalibrateGlucoseRxMessage.swift
Transmitter.init(id:activationDate:peripheralIdentifier:passiveModeEnabled:),Transmitter.init(id:activationDate:peripheralIdentifier:passiveModeEnabled:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
BluetoothManager.init(),BluetoothManager.init() in CGMBLEKit/CGMBLEKit/BluetoothManager.swift
Command.init(rawValue:),Command.init(rawValue:) in CGMBLEKit/CGMBLEKit/Command.swift
TransmitterID.init(id:),TransmitterID.init(id:) in CGMBLEKit/CGMBLEKit/Transmitter.swift
DisconnectTxMessage.init(),DisconnectTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/DisconnectTxMessage.swift
TransmitterManager.init(state:),TransmitterManager.init(state:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
TransmitterManager.init(rawState:),TransmitterManager.init(rawState:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
G5CGMManager.init(state:),G5CGMManager.init(state:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
G6CGMManager.init(state:),G6CGMManager.init(state:) in CGMBLEKit/CGMBLEKit/TransmitterManager.swift
KeepAliveTxMessage.init(time:),KeepAliveTxMessage.init(time:) in CGMBLEKit/CGMBLEKit/Messages/KeepAliveTxMessage.swift
AuthChallengeTxMessage.init(challengeHash:),AuthChallengeTxMessage.init(challengeHash:) in CGMBLEKit/CGMBLEKit/Messages/AuthChallengeTxMessage.swift
CalibrateGlucoseTxMessage.init(time:glucose:),CalibrateGlucoseTxMessage.init(time:glucose:) in CGMBLEKit/CGMBLEKit/Messages/CalibrateGlucoseTxMessage.swift
AuthRequestTxMessage.init(),AuthRequestTxMessage.init() in CGMBLEKit/CGMBLEKit/Messages/AuthRequestTxMessage.swift
TransmitterSettingsViewController.init(cgmManager:displayGlucosePreference:),TransmitterSettingsViewController.init(cgmManager:displayGlucosePreference:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
TransmitterSettingsViewController.init(coder:),TransmitterSettingsViewController.init(coder:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
TransmitterSettingsViewController.init(style:),TransmitterSettingsViewController.init(style:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
TransmitterSettingsViewController.init(nibName:bundle:),TransmitterSettingsViewController.init(nibName:bundle:) in CGMBLEKit/CGMBLEKitUI/TransmitterSettingsViewController.swift
TransmitterIDSetupViewController.init(style:),TransmitterIDSetupViewController.init(style:) in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
TransmitterIDSetupViewController.init(nibName:bundle:),TransmitterIDSetupViewController.init(nibName:bundle:) in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
TransmitterIDSetupViewController.init(coder:),TransmitterIDSetupViewController.init(coder:) in CGMBLEKit/CGMBLEKitUI/TransmitterIDSetupViewController.swift
TransmitterSetupViewController.init(navigationBarClass:toolbarClass:),TransmitterSetupViewController.init(navigationBarClass:toolbarClass:) in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
TransmitterSetupViewController.init(rootViewController:),TransmitterSetupViewController.init(rootViewController:) in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
TransmitterSetupViewController.init(nibName:bundle:),TransmitterSetupViewController.init(nibName:bundle:) in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
TransmitterSetupViewController.init(coder:),TransmitterSetupViewController.init(coder:) in CGMBLEKit/CGMBLEKitUI/TransmitterSetupViewController.swift
G7CGMManagerState.init(),G7CGMManagerState.init() in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManagerState.swift
G7CGMManagerState.init(rawValue:),G7CGMManagerState.init(rawValue:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManagerState.swift
G7GlucoseMessage.init(data:),G7GlucoseMessage.init(data:) in G7SensorKit/G7SensorKit/Messages/G7GlucoseMessage.swift
Self.init(data:),SensorMessage.init(data:) in G7SensorKit/G7SensorKit/Messages/SensorMessage.swift
AlgorithmState.init(rawValue:),AlgorithmState.init(rawValue:) in G7SensorKit/G7SensorKit/AlgorithmState.swift
G7CGMManager.init(),G7CGMManager.init() in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
G7CGMManager.init(rawState:),G7CGMManager.init(rawState:) in G7SensorKit/G7SensorKit/G7CGMManager/G7CGMManager.swift
G7Sensor.init(sensorID:),G7Sensor.init(sensorID:) in G7SensorKit/G7SensorKit/G7CGMManager/G7Sensor.swift
G7PeripheralManager.init(),G7PeripheralManager.init() in G7SensorKit/G7SensorKit/G7CGMManager/G7PeripheralManager.swift
G7BluetoothManager.init(),G7BluetoothManager.init() in G7SensorKit/G7SensorKit/G7CGMManager/G7BluetoothManager.swift
G7BackfillMessage.init(data:),G7BackfillMessage.init(data:) in G7SensorKit/G7SensorKit/G7CGMManager/G7BackfillMessage.swift
Locked<T>.init(_:),Locked.init(_:) in G7SensorKit/Common/Locked.swift
AuthChallengeRxMessage.init(data:),AuthChallengeRxMessage.init(data:) in G7SensorKit/G7SensorKit/Messages/AuthChallengeRxMessage.swift
G7DeviceStatusHighlight.init(localizedMessage:imageName:state:),G7DeviceStatusHighlight.init(localizedMessage:imageName:state:) in G7SensorKit/G7SensorKit/G7CGMManager/G7DeviceStatus.swift
G7LastReading.init(glucose:timestamp:sensorTimestamp:),G7LastReading.init(glucose:timestamp:sensorTimestamp:) in G7SensorKit/G7SensorKit/G7CGMManager/G7LastReading.swift
FrameworkBundle.init(),FrameworkBundle.init() in G7SensorKit/Common/LocalizedString.swift
G7SettingsView.init(didFinish:deleteCGM:viewModel:),G7SettingsView.init(didFinish:deleteCGM:viewModel:) in G7SensorKit/G7SensorKitUI/Views/G7SettingsView.swift
G7SettingsViewModel.init(cgmManager:displayGlucosePreference:),G7SettingsViewModel.init(cgmManager:displayGlucosePreference:) in G7SensorKit/G7SensorKitUI/Views/G7SettingsViewModel.swift
FrameworkBundle.init(),FrameworkBundle.init() in G7SensorKit/G7SensorKitUI/LocalizedString.swift
G7UICoordinator.init(cgmManager:colorPalette:displayGlucosePreference:allowDebugFeatures:),G7UICoordinator.init(cgmManager:colorPalette:displayGlucosePreference:allowDebugFeatures:) in G7SensorKit/G7SensorKitUI/G7CGMManager/G7UICoordinator.swift
G7UICoordinator.init(coder:),G7UICoordinator.init(coder:) in G7SensorKit/G7SensorKitUI/G7CGMManager/G7UICoordinator.swift
G7UICoordinator.init(navigationBarClass:toolbarClass:),G7UICoordinator.init(navigationBarClass:toolbarClass:) in G7SensorKit/G7SensorKitUI/G7CGMManager/G7UICoordinator.swift
G7UICoordinator.init(rootViewController:),G7UICoordinator.init(rootViewController:) in G7SensorKit/G7SensorKitUI/G7CGMManager/G7UICoordinator.swift
G7UICoordinator.init(nibName:bundle:),G7UICoordinator.init(nibName:bundle:) in G7SensorKit/G7SensorKitUI/G7CGMManager/G7UICoordinator.swift
G7DeviceStatusHighlight.init(localizedMessage:imageName:state:),G7DeviceStatusHighlight.init(localizedMessage:imageName:state:) in G7SensorKit/G7SensorKitUI/G7CGMManager/G7CGMManager+UI.swift
G7DeviceStatusBadge.init(image:state:),G7DeviceStatusBadge.init(image:state:) in G7SensorKit/G7SensorKitUI/G7CGMManager/G7CGMManager+UI.swift
G7LifecycleProgress.init(percentComplete:progressState:),G7LifecycleProgress.init(percentComplete:progressState:) in G7SensorKit/G7SensorKitUI/G7CGMManager/G7CGMManager+UI.swift
G7StartupView.init(),G7StartupView.init() in G7SensorKit/G7SensorKitUI/Views/G7StartupView.swift
G7StartupView.init(didContinue:didCancel:),G7StartupView.init(didContinue:didCancel:) in G7SensorKit/G7SensorKitUI/Views/G7StartupView.swift
WelcomeView_Previews.init(),WelcomeView_Previews.init() in G7SensorKit/G7SensorKitUI/Views/G7StartupView.swift
FrameworkBundle.init(),FrameworkBundle.init() in LibreTransmitter/Common/LocalizedString.swift
LibreGlucose.init(unsmoothedGlucose:glucoseDouble:error:timestamp:),LibreGlucose.init(unsmoothedGlucose:glucoseDouble:error:timestamp:) in LibreTransmitter/LibreTransmitter/LibreGlucose.swift
SensorData.CalibrationInfo.init(from:),CalibrationInfo.init(from:) in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
SensorData.CalibrationInfo.init(i1:i2:i3:i4:i5:i6:isValidForFooterWithReverseCRCs:),CalibrationInfo.init(i1:i2:i3:i4:i5:i6:isValidForFooterWithReverseCRCs:) in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
SensorData.init(bytes:date:),SensorData.init(bytes:date:) in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
SensorData.init(uuid:bytes:date:),SensorData.init(uuid:bytes:date:) in LibreTransmitter/LibreSensor/SensorContents/SensorData.swift
SensorState.init(),SensorState.init() in LibreTransmitter/LibreSensor/SensorContents/SensorState.swift
SensorState.init(stateByte:),SensorState.init(stateByte:) in LibreTransmitter/LibreSensor/SensorContents/SensorState.swift
Measurement.init(date:rawGlucose:rawTemperature:rawTemperatureAdjustment:idValue:),Measurement.init(date:rawGlucose:rawTemperature:rawTemperatureAdjustment:idValue:) in LibreTransmitter/LibreSensor/SensorContents/Measurement.swift
Measurement.init(bytes:slope:offset:counter:date:idValue:),Measurement.init(bytes:slope:offset:counter:date:idValue:) in LibreTransmitter/LibreSensor/SensorContents/Measurement.swift
UUIDContainer.init(value:),UUIDContainer.init(value:) in LibreTransmitter/Bluetooth/Transmitter/UUIDContainer.swift
UUIDContainer.init(stringLiteral:),UUIDContainer.init(stringLiteral:) in LibreTransmitter/Bluetooth/Transmitter/UUIDContainer.swift
MockSensorPairingService.init(),MockSensorPairingService.init() in LibreTransmitter/LibreTransmitter/Mocks/MockSensorPairingService.swift
SensorPairingInfo.init(from:),SensorPairingInfo.init(from:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairing.swift
SensorPairingInfo.init(uuid:patchInfo:fram:streamingEnabled:sensorName:),SensorPairingInfo.init(uuid:patchInfo:fram:streamingEnabled:sensorName:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairing.swift
Libre2DirectTransmitter.init(delegate:advertisementData:),Libre2DirectTransmitter.init(delegate:advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/Libre2DirectTransmitter.swift
Self.init(delegate:advertisementData:),LibreTransmitterProxyProtocol.init(delegate:advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyProtocol.swift
LimitedQueue<T>.init(),LimitedQueue.init() in LibreTransmitter/LibreSensor/LimitedQueue.swift
LimitedQueue<T>.init(array:limit:),LimitedQueue.init(array:limit:) in LibreTransmitter/LibreSensor/LimitedQueue.swift
LibreTransmitterMetadata.init(hardware:firmware:battery:name:macAddress:patchInfo:uid:),LibreTransmitterMetadata.init(hardware:firmware:battery:name:macAddress:patchInfo:uid:) in LibreTransmitter/Bluetooth/LibreTransmitterMetadata.swift
SensorType.init(patchInfo:),SensorType.init(patchInfo:) in LibreTransmitter/Bluetooth/LibreTransmitterMetadata.swift
LibreTransmitterManagerV3.init(rawState:),LibreTransmitterManagerV3.init(rawState:) in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
LibreTransmitterManagerV3.init(),LibreTransmitterManagerV3.init() in LibreTransmitter/LibreTransmitter/LibreTransmitterManagerV3.swift
RSSIInfo.init(bledeviceID:signalStrength:),RSSIInfo.init(bledeviceID:signalStrength:) in LibreTransmitter/Bluetooth/BluetoothSearch.swift
GenericThrottler<T, U>.init(identificator:interval:),GenericThrottler.init(identificator:interval:) in LibreTransmitter/Bluetooth/GenericThrottler.swift
GlucoseInfo.init(),GlucoseInfo.init() in LibreTransmitter/LibreTransmitter/Observables/GlucoseInfo.swift
SensorInfo.init(),SensorInfo.init() in LibreTransmitter/LibreTransmitter/Observables/SensorInfo.swift
TransmitterInfo.init(),TransmitterInfo.init() in LibreTransmitter/LibreTransmitter/Observables/TransmitterInfo.swift
LibreTransmitterProxyManager.init(),LibreTransmitterProxyManager.init() in LibreTransmitter/Bluetooth/Transmitter/LibreTransmitterProxyManager.swift
AlarmStatus.init(),AlarmStatus.init() in LibreTransmitter/LibreTransmitter/Observables/AlarmStatus.swift
SelectionState.init(),SelectionState.init() in LibreTransmitter/LibreTransmitter/Observables/SelectionState.swift
GlucoseScheduleList.init(),GlucoseScheduleList.init() in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
GlucoseSchedule.init(),GlucoseSchedule.init() in LibreTransmitter/Common/Settings/GlucoseSchedules.swift
BluetoothSearchManager.init(),BluetoothSearchManager.init() in LibreTransmitter/Bluetooth/BluetoothSearch.swift
MiaoMiaoTransmitter.init(delegate:advertisementData:),MiaoMiaoTransmitter.init(delegate:advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/MiaomiaoTransmitter.swift
BubbleTransmitter.init(delegate:advertisementData:),BubbleTransmitter.init(delegate:advertisementData:) in LibreTransmitter/Bluetooth/Transmitter/BubbleTransmitter.swift
CalibrationToSensorMapping.init(uuid:reverseFooterCRC:),CalibrationToSensorMapping.init(uuid:reverseFooterCRC:) in LibreTransmitter/LibreSensor/SensorContents/Sensor.swift
Sensor.init(uuid:patchInfo:maxAge:unlockCount:sensorName:),Sensor.init(uuid:patchInfo:maxAge:unlockCount:sensorName:) in LibreTransmitter/LibreSensor/SensorContents/Sensor.swift
ConcreteGlucoseDisplayable.init(glucoseRangeCategory:isStateValid:trendType:isLocal:),ConcreteGlucoseDisplayable.init(glucoseRangeCategory:isStateValid:trendType:isLocal:) in LibreTransmitter/LibreTransmitter/ConcreteGlucoseDisplayable.swift
MockBluetoothSearcher.init(),MockBluetoothSearcher.init() in LibreTransmitter/LibreTransmitter/Mocks/MockBluetoothSearcher.swift
MockedPeripheral.init(name:),MockedPeripheral.init(name:) in LibreTransmitter/LibreTransmitter/Mocks/MockBluetoothSearcher.swift
SensorPairingService.init(),SensorPairingService.init() in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
NFCCommand.init(code:parameters:),NFCCommand.init(code:parameters:) in LibreTransmitter/LibreSensor/SensorPairing/SensorPairingService.swift
SensorSerialNumber.init(withUID:sensorFamily:),SensorSerialNumber.init(withUID:sensorFamily:) in LibreTransmitter/LibreSensor/SensorContents/SensorSerialNumber.swift
FakeSensorPairingData.init(),FakeSensorPairingData.init() in LibreTransmitter/LibreTransmitter/Mocks/FakeSensorPairingData.swift
MockSensorData.init(minutesSinceStart:maxMinutesWearTime:state:serialNumber:footerCrc:date:),MockSensorData.init(minutesSinceStart:maxMinutesWearTime:state:serialNumber:footerCrc:date:) in LibreTransmitter/LibreTransmitter/Mocks/MockSensorData.swift
Crc.init(),Crc.init() in LibreTransmitter/LibreSensor/SensorContents/CRC.swift
BytesSequence.init(chunkSize:data:),BytesSequence.init(chunkSize:data:) in LibreTransmitter/LibreSensor/SensorContents/CRC.swift
Features.init(),Features.init() in LibreTransmitter/Features.swift
CriticalAlarmsVolumeView.init(),CriticalAlarmsVolumeView.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CriticalAlarmsVolumeView.swift
CriticalAlarmsVolumeView.init(mmCriticalAlarmsVolume:),CriticalAlarmsVolumeView.init(mmCriticalAlarmsVolume:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CriticalAlarmsVolumeView.swift
CriticalAlarmsVolumeView_Previews.init(),CriticalAlarmsVolumeView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CriticalAlarmsVolumeView.swift
Libre2DirectSetup.init(cancelNotifier:saveNotifier:pairingService:),Libre2DirectSetup.init(cancelNotifier:saveNotifier:pairingService:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/Libre2DirectSetup.swift
GenericObservableObject.init(),GenericObservableObject.init() in LibreTransmitter/LibreTransmitterUI/Views/Utilities/GenericObservableObject.swift
StatusMessage.init(title:message:),StatusMessage.init(title:message:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/StatusMessage.swift
Libre2DirectSetup_Previews.init(),Libre2DirectSetup_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Setup/Libre2DirectSetup.swift
LibreTransmitterSetupViewController.init(displayGlucosePreference:cgmManager:),LibreTransmitterSetupViewController.init(displayGlucosePreference:cgmManager:) in LibreTransmitter/LibreTransmitterUI/Controllers/LibreTransmitterSetupViewController.swift
LibreTransmitterSetupViewController.init(navigationBarClass:toolbarClass:),LibreTransmitterSetupViewController.init(navigationBarClass:toolbarClass:) in LibreTransmitter/LibreTransmitterUI/Controllers/LibreTransmitterSetupViewController.swift
LibreTransmitterSetupViewController.init(rootViewController:),LibreTransmitterSetupViewController.init(rootViewController:) in LibreTransmitter/LibreTransmitterUI/Controllers/LibreTransmitterSetupViewController.swift
LibreTransmitterSetupViewController.init(nibName:bundle:),LibreTransmitterSetupViewController.init(nibName:bundle:) in LibreTransmitter/LibreTransmitterUI/Controllers/LibreTransmitterSetupViewController.swift
SettingsItem.init(title:detail:),SettingsItem.init(title:detail:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/SettingsView.swift
SettingsItem.init(title:detail:),SettingsItem.init(title:detail:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/SettingsView.swift
SettingsView.init(transmitterInfo:sensorInfo:glucoseMeasurement:notifyComplete:notifyDelete:notifyReset:notifyReconnect:alarmStatus:pairingService:bluetoothSearcher:),SettingsView.init(transmitterInfo:sensorInfo:glucoseMeasurement:notifyComplete:notifyDelete:notifyReset:notifyReconnect:alarmStatus:pairingService:bluetoothSearcher:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/SettingsView.swift
SettingsOverview_Previews.init(),SettingsOverview_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/SettingsView.swift
GlucoseSettingsView.init(),GlucoseSettingsView.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/GlucoseSettingsView.swift
GlucoseSettingsView.init(mmSyncToNS:mmBackfillFromHistory:shouldPersistSensorData:),GlucoseSettingsView.init(mmSyncToNS:mmBackfillFromHistory:shouldPersistSensorData:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/GlucoseSettingsView.swift
GlucoseSettingsView_Previews.init(),GlucoseSettingsView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/GlucoseSettingsView.swift
AuthView.init(completeNotifier:notifyReset:notifyReconnect:cancelNotifier:saveNotifier:pairingService:bluetoothSearcher:isNavigationActive:),AuthView.init(completeNotifier:notifyReset:notifyReconnect:cancelNotifier:saveNotifier:pairingService:bluetoothSearcher:isNavigationActive:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/AuthView.swift
AuthView_Previews.init(),AuthView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Setup/AuthView.swift
SnoozeView.init(pickerTimes:formatter:isAlarming:activeAlarms:),SnoozeView.init(pickerTimes:formatter:isAlarming:activeAlarms:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/SnoozeView.swift
TestView_Previews.init(),TestView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/SnoozeView.swift
AlarmScheduleState.init(),AlarmScheduleState.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
AlarmTimeCellExternalState.init(),AlarmTimeCellExternalState.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
AlarmSettingsState.init(),AlarmSettingsState.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
AlarmDateRow.init(schedule:tag:subviewSelection:),AlarmDateRow.init(schedule:tag:subviewSelection:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
AlarmLowRow.init(schedule:glucoseUnit:glucoseUnitDesc:errorReporter:),AlarmLowRow.init(schedule:glucoseUnit:glucoseUnitDesc:errorReporter:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
FormErrorState.init(),FormErrorState.init() in LibreTransmitter/LibreTransmitterUI/Views/Utilities/NumericTextField.swift
AlarmHighRow.init(schedule:glucoseUnit:glucoseUnitDesc:errorReporter:),AlarmHighRow.init(schedule:glucoseUnit:glucoseUnitDesc:errorReporter:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
AlarmSettingsView.init(glucoseUnit:alarmState:errorReporter:),AlarmSettingsView.init(glucoseUnit:alarmState:errorReporter:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
AlarmSettingsView_Previews.init(),AlarmSettingsView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/AlarmSettingsView.swift
Defaults.init(),Defaults.init() in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
SignalStrengthIndicator.init(bars:totalBars:),SignalStrengthIndicator.init(bars:totalBars:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
Divided<S>.init(amount:shape:),Divided.init(amount:shape:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
ListFooter.init(),ListFooter.init() in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
ListFooter.init(devicesCount:),ListFooter.init(devicesCount:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
DeviceItem.init(device:requiresSetup:requiresPhoneNFC:details:rssi:),DeviceItem.init(device:requiresSetup:requiresPhoneNFC:details:rssi:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
BluetoothSelection.init(cancelNotifier:saveNotifier:searcher:),BluetoothSelection.init(cancelNotifier:saveNotifier:searcher:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
BluetoothSelection_Previews.init(),BluetoothSelection_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Setup/BluetoothSelection.swift
NotificationSettingsView.init(),NotificationSettingsView.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/NotificationSettingsView.swift
NotificationSettingsView.init(glucoseSegmentStrings:mmAlwaysDisplayGlucose:mmNotifyEveryXTimes:mmShowPhoneBattery:mmShowTransmitterBattery:mmAlertLowBatteryWarning:mmAlertInvalidSensorDetected:mmAlertNewSensorDetected:mmAlertNoSensorDetected:mmAlertSensorSoonExpire:mmGlucoseUnit:notifyErrorState:),NotificationSettingsView.init(glucoseSegmentStrings:mmAlwaysDisplayGlucose:mmNotifyEveryXTimes:mmShowPhoneBattery:mmShowTransmitterBattery:mmAlertLowBatteryWarning:mmAlertInvalidSensorDetected:mmAlertNewSensorDetected:mmAlertNoSensorDetected:mmAlertSensorSoonExpire:mmGlucoseUnit:notifyErrorState:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/NotificationSettingsView.swift
NotificationSettingsView_Previews.init(),NotificationSettingsView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/NotificationSettingsView.swift
NotificationView.init(text:),NotificationView.init(text:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/CalibrationEditView.swift
CalibrationEditView.init(debugMode:),CalibrationEditView.init(debugMode:) in LibreTransmitter/LibreTransmitterUI/Views/Settings/CalibrationEditView.swift
CalibrationEditView_Previews.init(),CalibrationEditView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/CalibrationEditView.swift
ModeSelectionView.init(cancelNotifier:saveNotifier:pairingService:bluetoothSearcher:),ModeSelectionView.init(cancelNotifier:saveNotifier:pairingService:bluetoothSearcher:) in LibreTransmitter/LibreTransmitterUI/Views/Setup/ModeSelectionView.swift
ModeSelectionView_Previews.init(),ModeSelectionView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Setup/ModeSelectionView.swift
ErrorTextFieldStyle.init(),ErrorTextFieldStyle.init() in LibreTransmitter/LibreTransmitterUI/Views/Styles/ErrorTextFieldStyle.swift
CustomDataPickerView.init(),CustomDataPickerView.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
CustomDataPickerView_Previews.init(),CustomDataPickerView_Previews.init() in LibreTransmitter/LibreTransmitterUI/Views/Settings/AlarmSettings/CustomDataPickerView.swift
LibreLifecycleProgress.init(percentComplete:progressState:),LibreLifecycleProgress.init(percentComplete:progressState:) in LibreTransmitter/LibreTransmitterUI/LibreTransmitterManager+UI.swift
BlueButtonStyle.init(),BlueButtonStyle.init() in LibreTransmitter/LibreTransmitterUI/Views/Styles/BlueButtonStyle.swift
LeadingImage.init(_:),LeadingImage.init(_:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/ViewExtensions.swift
NumericTextField.init(description:showDescription:numericValue:isReadOnly:formErrorState:),NumericTextField.init(description:showDescription:numericValue:isReadOnly:formErrorState:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/NumericTextField.swift
NumericTextField.init(description:showDescription:numericValue:isReadOnly:formErrorState:),NumericTextField.init(description:showDescription:numericValue:isReadOnly:formErrorState:) in LibreTransmitter/LibreTransmitterUI/Views/Utilities/NumericTextField.swift
FrameworkBundle.init(),FrameworkBundle.init() in LogglyService/Common/LocalizedString.swift
LogglyService.init(),LogglyService.init() in LogglyService/LogglyServiceKit/LogglyService.swift
LogglyService.init(rawState:),LogglyService.init(rawState:) in LogglyService/LogglyServiceKit/LogglyService.swift
LogglyClient.init(customerToken:),LogglyClient.init(customerToken:) in LogglyService/LogglyServiceKit/LogglyService.swift
LogglyServiceTableViewController.init(service:for:),LogglyServiceTableViewController.init(service:for:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
LogglyServiceTableViewController.init(coder:),LogglyServiceTableViewController.init(coder:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
LogglyServiceTableViewController.init(style:),LogglyServiceTableViewController.init(style:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
LogglyServiceTableViewController.init(nibName:bundle:),LogglyServiceTableViewController.init(nibName:bundle:) in LogglyService/LogglyServiceKitUI/LogglyServiceTableViewController.swift
LoopSettings.init(dosingEnabled:glucoseTargetRangeSchedule:insulinSensitivitySchedule:basalRateSchedule:carbRatioSchedule:preMealTargetRange:legacyWorkoutTargetRange:overridePresets:scheduleOverride:preMealOverride:maximumBasalRatePerHour:maximumBolus:suspendThreshold:automaticDosingStrategy:defaultRapidActingModel:),LoopSettings.init(dosingEnabled:glucoseTargetRangeSchedule:insulinSensitivitySchedule:basalRateSchedule:carbRatioSchedule:preMealTargetRange:legacyWorkoutTargetRange:overridePresets:scheduleOverride:preMealOverride:maximumBasalRatePerHour:maximumBolus:suspendThreshold:automaticDosingStrategy:defaultRapidActingModel:) in Loop/LoopCore/LoopSettings.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/LoopCore/LocalizedString.swift
LoopCompletionFreshness.init(age:),LoopCompletionFreshness.init(age:) in Loop/LoopCore/LoopCompletionFreshness.swift
LoopCompletionFreshness.init(lastCompletion:at:),LoopCompletionFreshness.init(lastCompletion:at:) in Loop/LoopCore/LoopCompletionFreshness.swift
PersistedProperty<Value>.init(key:shared:),PersistedProperty.init(key:shared:) in Loop/LoopCore/PersistedProperty.swift
MissedMealNotification.init(deliveryTime:carbAmount:),MissedMealNotification.init(deliveryTime:carbAmount:) in Loop/LoopCore/MissedMealNotification.swift
PotentialCarbEntryUserInfo.init(carbEntry:),PotentialCarbEntryUserInfo.init(carbEntry:) in Loop/LoopCore/PotentialCarbEntryUserInfo.swift
CgmEventStore.init(cacheStore:cacheLength:),CgmEventStore.init(cacheStore:cacheLength:) in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
PersistenceController.init(directoryURL:isReadOnly:),PersistenceController.init(directoryURL:isReadOnly:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
PersistedCgmEvent.init(date:type:deviceIdentifier:expectedLifetime:warmupPeriod:failureMessage:),PersistedCgmEvent.init(date:type:deviceIdentifier:expectedLifetime:warmupPeriod:failureMessage:) in LoopKit/LoopKit/GlucoseKit/PersistedCgmEvent.swift
Self.init(rawState:),StatefulPluggable.init(rawState:) in LoopKit/LoopKit/Service/StatefulPluggable.swift
NewFavoriteFood.init(name:carbsQuantity:foodType:absorptionTime:),NewFavoriteFood.init(name:carbsQuantity:foodType:absorptionTime:) in LoopKit/LoopKit/FavoriteFood/NewFavoriteFood.swift
NewCarbEntry.init(date:quantity:startDate:foodType:absorptionTime:),NewCarbEntry.init(date:quantity:startDate:foodType:absorptionTime:) in LoopKit/LoopKit/CarbKit/NewCarbEntry.swift
NewCarbEntry.init(rawValue:),NewCarbEntry.init(rawValue:) in LoopKit/LoopKit/CarbKit/NewCarbEntry.swift
GlucoseMath.init(),GlucoseMath.init() in LoopKit/LoopKit/GlucoseKit/GlucoseMath.swift
GlucoseEffect.init(startDate:quantity:),GlucoseEffect.init(startDate:quantity:) in LoopKit/LoopKit/GlucoseEffect.swift
GlucoseEffectVelocity.init(startDate:endDate:quantity:),GlucoseEffectVelocity.init(startDate:endDate:quantity:) in LoopKit/LoopKit/GlucoseEffectVelocity.swift
GlucoseRange.init(minValue:maxValue:unit:),GlucoseRange.init(minValue:maxValue:unit:) in LoopKit/LoopKit/GlucoseRange.swift
GlucoseRange.init(range:unit:),GlucoseRange.init(range:unit:) in LoopKit/LoopKit/GlucoseRange.swift
DoubleRange.init(minValue:maxValue:),DoubleRange.init(minValue:maxValue:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
DailyQuantitySchedule<T>.init(unit:dailyItems:timeZone:),DailyQuantitySchedule.init(unit:dailyItems:timeZone:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
DailyQuantitySchedule<T>.init(unit:valueSchedule:),DailyQuantitySchedule.init(unit:valueSchedule:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
DailyQuantitySchedule<T>.init(rawValue:),DailyQuantitySchedule.init(rawValue:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
AbsoluteScheduleValue<T>.init(startDate:endDate:value:),AbsoluteScheduleValue.init(startDate:endDate:value:) in LoopKit/LoopKit/DailyValueSchedule.swift
RepeatingScheduleValue<T>.init(startTime:value:),RepeatingScheduleValue.init(startTime:value:) in LoopKit/LoopKit/DailyValueSchedule.swift
DailyValueSchedule<T>.init(dailyItems:timeZone:),DailyValueSchedule.init(dailyItems:timeZone:) in LoopKit/LoopKit/DailyValueSchedule.swift
GlucoseThreshold.init(unit:value:),GlucoseThreshold.init(unit:value:) in LoopKit/LoopKit/GlucoseThreshold.swift
GlucoseThreshold.init(rawValue:),GlucoseThreshold.init(rawValue:) in LoopKit/LoopKit/GlucoseThreshold.swift
PumpEventType.init(rawValue:),PumpEventType.init(rawValue:) in LoopKit/LoopKit/InsulinKit/PumpEventType.swift
PersistentContainer.init(name:managedObjectModel:),PersistentContainer.init(name:managedObjectModel:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
PersistentDeviceLog.init(storageFile:maxEntryAge:),PersistentDeviceLog.init(storageFile:maxEntryAge:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
StoredDeviceLogEntry.init(type:managerIdentifier:deviceIdentifier:message:timestamp:),StoredDeviceLogEntry.init(type:managerIdentifier:deviceIdentifier:message:timestamp:) in LoopKit/LoopKit/DeviceManager/DeviceLog/StoredDeviceLogEntry.swift
StoredDeviceLogEntry.init(managedObject:),StoredDeviceLogEntry.init(managedObject:) in LoopKit/LoopKit/DeviceManager/DeviceLog/StoredDeviceLogEntry.swift
DeviceLogEntry.init(entity:insertInto:),DeviceLogEntry.init(entity:insertInto:) in LoopKit/LoopKit/DeviceManager/DeviceLog/DeviceLogEntry+CoreDataClass.swift
CachedCarbObject.init(entity:insertInto:),CachedCarbObject.init(entity:insertInto:) in LoopKit/LoopKit/CarbKit/CachedCarbObject+CoreDataClass.swift
SyncCarbObject.init(absorptionTime:createdByCurrentApp:foodType:grams:startDate:uuid:provenanceIdentifier:syncIdentifier:syncVersion:userCreatedDate:userUpdatedDate:userDeletedDate:operation:addedDate:supercededDate:),SyncCarbObject.init(absorptionTime:createdByCurrentApp:foodType:grams:startDate:uuid:provenanceIdentifier:syncIdentifier:syncVersion:userCreatedDate:userUpdatedDate:userDeletedDate:operation:addedDate:supercededDate:) in LoopKit/LoopKit/CarbKit/SyncCarbObject.swift
StoredCarbEntry.init(startDate:quantity:uuid:provenanceIdentifier:syncIdentifier:syncVersion:foodType:absorptionTime:createdByCurrentApp:userCreatedDate:userUpdatedDate:),StoredCarbEntry.init(startDate:quantity:uuid:provenanceIdentifier:syncIdentifier:syncVersion:foodType:absorptionTime:createdByCurrentApp:userCreatedDate:userUpdatedDate:) in LoopKit/LoopKit/CarbKit/StoredCarbEntry.swift
NewPumpEvent.init(date:dose:raw:title:type:alarmType:),NewPumpEvent.init(date:dose:raw:title:type:alarmType:) in LoopKit/LoopKit/InsulinKit/NewPumpEvent.swift
DoseEntry.init(suspendDate:automatic:isMutable:wasProgrammedByPumpUI:),DoseEntry.init(suspendDate:automatic:isMutable:wasProgrammedByPumpUI:) in LoopKit/LoopKit/InsulinKit/DoseEntry.swift
DoseEntry.init(resumeDate:insulinType:automatic:isMutable:wasProgrammedByPumpUI:),DoseEntry.init(resumeDate:insulinType:automatic:isMutable:wasProgrammedByPumpUI:) in LoopKit/LoopKit/InsulinKit/DoseEntry.swift
DoseEntry.init(type:startDate:endDate:value:unit:deliveredUnits:description:syncIdentifier:scheduledBasalRate:insulinType:automatic:manuallyEntered:isMutable:wasProgrammedByPumpUI:),DoseEntry.init(type:startDate:endDate:value:unit:deliveredUnits:description:syncIdentifier:scheduledBasalRate:insulinType:automatic:manuallyEntered:isMutable:wasProgrammedByPumpUI:) in LoopKit/LoopKit/InsulinKit/DoseEntry.swift
HealthKitSampleStore.init(healthStore:observeHealthKitSamplesFromCurrentApp:observeHealthKitSamplesFromOtherApps:type:observationStart:observationEnabled:),HealthKitSampleStore.init(healthStore:observeHealthKitSamplesFromCurrentApp:observeHealthKitSamplesFromOtherApps:type:observationStart:observationEnabled:) in LoopKit/LoopKit/HealthKitSampleStore.swift
Locked<T>.init(_:),Locked.init(_:) in LoopKit/LoopKit/Locked.swift
UnfairLock.init(),UnfairLock.init() in LoopKit/LoopKit/UnfairLock.swift
HealthKitSampleStore.QueryState.init(anchorState:authorizationDetermined:),QueryState.init(anchorState:authorizationDetermined:) in LoopKit/LoopKit/HealthKitSampleStore.swift
CachedInsulinDeliveryObject.init(entity:insertInto:),CachedInsulinDeliveryObject.init(entity:insertInto:) in LoopKit/LoopKit/InsulinKit/CachedInsulinDeliveryObject+CoreDataClass.swift
SimpleGlucoseValue.init(startDate:endDate:quantity:),SimpleGlucoseValue.init(startDate:endDate:quantity:) in LoopKit/LoopKit/GlucoseValue.swift
SimpleGlucoseValue.init(_:),SimpleGlucoseValue.init(_:) in LoopKit/LoopKit/GlucoseValue.swift
ManualBolusRecommendation.init(amount:pendingInsulin:notice:),ManualBolusRecommendation.init(amount:pendingInsulin:notice:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
PumpStatusHighlight.init(localizedMessage:imageName:state:),PumpStatusHighlight.init(localizedMessage:imageName:state:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpLifecycleProgress.init(percentComplete:progressState:),PumpLifecycleProgress.init(percentComplete:progressState:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.init(timeZone:device:pumpBatteryChargeRemaining:basalDeliveryState:bolusState:insulinType:deliveryIsUncertain:),PumpManagerStatus.init(timeZone:device:pumpBatteryChargeRemaining:basalDeliveryState:bolusState:insulinType:deliveryIsUncertain:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
CarbMath.init(),CarbMath.init() in LoopKit/LoopKit/CarbKit/CarbMath.swift
CarbModelSettings.init(absorptionModel:initialAbsorptionTimeOverrun:adaptiveAbsorptionRateEnabled:adaptiveRateStandbyIntervalFraction:),CarbModelSettings.init(absorptionModel:initialAbsorptionTimeOverrun:adaptiveAbsorptionRateEnabled:adaptiveRateStandbyIntervalFraction:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
ParabolicAbsorption.init(),ParabolicAbsorption.init() in LoopKit/LoopKit/CarbKit/CarbMath.swift
LinearAbsorption.init(),LinearAbsorption.init() in LoopKit/LoopKit/CarbKit/CarbMath.swift
PiecewiseLinearAbsorption.init(),PiecewiseLinearAbsorption.init() in LoopKit/LoopKit/CarbKit/CarbMath.swift
CarbValue.init(startDate:endDate:value:),CarbValue.init(startDate:endDate:value:) in LoopKit/LoopKit/CarbKit/CarbValue.swift
CarbStatus<T>.init(entry:absorption:observedTimeline:),CarbStatus.init(entry:absorption:observedTimeline:) in LoopKit/LoopKit/CarbKit/CarbStatus.swift
AbsorbedCarbValue.init(observed:clamped:total:remaining:observedDate:estimatedTimeRemaining:timeToAbsorbObservedCarbs:),AbsorbedCarbValue.init(observed:clamped:total:remaining:observedDate:estimatedTimeRemaining:timeToAbsorbObservedCarbs:) in LoopKit/LoopKit/CarbKit/AbsorbedCarbValue.swift
CarbStatusBuilder<T>.init(entry:carbUnit:carbohydrateSensitivityFactor:initialAbsorptionTime:maxAbsorptionTime:delay:lastEffectDate:absorptionModel:adaptiveAbsorptionRateEnabled:adaptiveRateStandbyIntervalFraction:initialObservedEffect:),CarbStatusBuilder.init(entry:carbUnit:carbohydrateSensitivityFactor:initialAbsorptionTime:maxAbsorptionTime:delay:lastEffectDate:absorptionModel:adaptiveAbsorptionRateEnabled:adaptiveRateStandbyIntervalFraction:initialObservedEffect:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
ExponentialInsulinModel.init(actionDuration:peakActivityTime:delay:),ExponentialInsulinModel.init(actionDuration:peakActivityTime:delay:) in LoopKit/LoopKit/InsulinKit/ExponentialInsulinModel.swift
TherapySettings.init(glucoseTargetRangeSchedule:correctionRangeOverrides:overridePresets:maximumBasalRatePerHour:maximumBolus:suspendThreshold:insulinSensitivitySchedule:carbRatioSchedule:basalRateSchedule:defaultRapidActingModel:),TherapySettings.init(glucoseTargetRangeSchedule:correctionRangeOverrides:overridePresets:maximumBasalRatePerHour:maximumBolus:suspendThreshold:insulinSensitivitySchedule:carbRatioSchedule:basalRateSchedule:defaultRapidActingModel:) in LoopKit/LoopKit/TherapySettings.swift
TemporaryScheduleOverridePreset.init(id:symbol:name:settings:duration:),TemporaryScheduleOverridePreset.init(id:symbol:name:settings:duration:) in LoopKit/LoopKit/TemporaryScheduleOverridePreset.swift
TemporaryScheduleOverride.init(context:settings:startDate:duration:enactTrigger:syncIdentifier:actualEnd:),TemporaryScheduleOverride.init(context:settings:startDate:duration:enactTrigger:syncIdentifier:actualEnd:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
End.init(from:),End.init(from:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
TemporaryScheduleOverrideSettings.init(unit:targetRange:insulinNeedsScaleFactor:),TemporaryScheduleOverrideSettings.init(unit:targetRange:insulinNeedsScaleFactor:) in LoopKit/LoopKit/TemporaryScheduleOverrideSettings.swift
TemporaryScheduleOverrideSettings.init(targetRange:insulinNeedsScaleFactor:),TemporaryScheduleOverrideSettings.init(targetRange:insulinNeedsScaleFactor:) in LoopKit/LoopKit/TemporaryScheduleOverrideSettings.swift
CorrectionRangeOverrides.init(preMeal:workout:unit:),CorrectionRangeOverrides.init(preMeal:workout:unit:) in LoopKit/LoopKit/CorrectionRangeOverrides.swift
CorrectionRangeOverrides.init(preMeal:workout:),CorrectionRangeOverrides.init(preMeal:workout:) in LoopKit/LoopKit/CorrectionRangeOverrides.swift
CorrectionRangeOverrides.init(preMeal:workout:),CorrectionRangeOverrides.init(preMeal:workout:) in LoopKit/LoopKit/CorrectionRangeOverrides.swift
GlucoseRangeSchedule.init(rangeSchedule:override:),GlucoseRangeSchedule.init(rangeSchedule:override:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
GlucoseRangeSchedule.init(unit:dailyItems:timeZone:),GlucoseRangeSchedule.init(unit:dailyItems:timeZone:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
GlucoseRangeSchedule.init(rawValue:),GlucoseRangeSchedule.init(rawValue:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
GlucoseRangeSchedule.Override.init(value:start:end:),Override.init(value:start:end:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
DoseProgressTimerEstimator.init(reportingQueue:),DoseProgressTimerEstimator.init(reportingQueue:) in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
DoseProgress.init(deliveredUnits:percentComplete:),DoseProgress.init(deliveredUnits:percentComplete:) in LoopKit/LoopKit/DeviceManager/DoseProgressReporter.swift
WeakSet<Element>.init(_:),WeakSet.init(_:) in LoopKit/LoopKit/WeakSet.swift
Weak<Value>.init(_:),Weak.init(_:) in LoopKit/LoopKit/WeakSet.swift
DosingDecisionStore.init(store:expireAfter:),DosingDecisionStore.init(store:expireAfter:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.init(date:controllerTimeZone:reason:settings:scheduleOverride:controllerStatus:pumpManagerStatus:pumpStatusHighlight:cgmManagerStatus:lastReservoirValue:historicalGlucose:originalCarbEntry:carbEntry:manualGlucoseSample:carbsOnBoard:insulinOnBoard:glucoseTargetRangeSchedule:predictedGlucose:automaticDoseRecommendation:manualBolusRecommendation:manualBolusRequested:warnings:errors:syncIdentifier:),StoredDosingDecision.init(date:controllerTimeZone:reason:settings:scheduleOverride:controllerStatus:pumpManagerStatus:pumpStatusHighlight:cgmManagerStatus:lastReservoirValue:historicalGlucose:originalCarbEntry:carbEntry:manualGlucoseSample:carbsOnBoard:insulinOnBoard:glucoseTargetRangeSchedule:predictedGlucose:automaticDoseRecommendation:manualBolusRecommendation:manualBolusRequested:warnings:errors:syncIdentifier:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.Issue.init(id:details:),Issue.init(id:details:) in LoopKit/LoopKit/DosingDecisionStore.swift
ManualBolusRecommendationWithDate.init(recommendation:date:),ManualBolusRecommendationWithDate.init(recommendation:date:) in LoopKit/LoopKit/DosingDecisionStore.swift
AutomaticDoseRecommendation.init(basalAdjustment:bolusUnits:),AutomaticDoseRecommendation.init(basalAdjustment:bolusUnits:) in LoopKit/LoopKit/InsulinKit/AutomaticDoseRecommendation.swift
TempBasalRecommendation.init(unitsPerHour:duration:),TempBasalRecommendation.init(unitsPerHour:duration:) in LoopKit/LoopKit/InsulinKit/TempBasalRecommendation.swift
InsulinValue.init(startDate:value:),InsulinValue.init(startDate:value:) in LoopKit/LoopKit/InsulinKit/InsulinValue.swift
StoredGlucoseSample.init(sample:),StoredGlucoseSample.init(sample:) in LoopKit/LoopKit/GlucoseKit/StoredGlucoseSample.swift
StoredGlucoseSample.init(uuid:provenanceIdentifier:syncIdentifier:syncVersion:startDate:quantity:condition:trend:trendRate:isDisplayOnly:wasUserEntered:device:healthKitEligibleDate:),StoredGlucoseSample.init(uuid:provenanceIdentifier:syncIdentifier:syncVersion:startDate:quantity:condition:trend:trendRate:isDisplayOnly:wasUserEntered:device:healthKitEligibleDate:) in LoopKit/LoopKit/GlucoseKit/StoredGlucoseSample.swift
PredictedGlucoseValue.init(startDate:quantity:),PredictedGlucoseValue.init(startDate:quantity:) in LoopKit/LoopKit/GlucoseValue.swift
StoredDosingDecision.LastReservoirValue.init(startDate:unitVolume:),LastReservoirValue.init(startDate:unitVolume:) in LoopKit/LoopKit/DosingDecisionStore.swift
CGMManagerStatus.init(hasValidSensorSession:lastCommunicationDate:device:),CGMManagerStatus.init(hasValidSensorSession:lastCommunicationDate:device:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
StoredDosingDecision.StoredDeviceHighlight.init(localizedMessage:imageName:state:),StoredDeviceHighlight.init(localizedMessage:imageName:state:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.ControllerStatus.init(batteryState:batteryLevel:),ControllerStatus.init(batteryState:batteryLevel:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.Settings.init(syncIdentifier:),Settings.init(syncIdentifier:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecisionData.init(date:data:),StoredDosingDecisionData.init(date:data:) in LoopKit/LoopKit/DosingDecisionStore.swift
CachedCarbObjectv3EntityMigrationPolicy.init(),CachedCarbObjectv3EntityMigrationPolicy.init() in LoopKit/LoopKit/Persistence/Modelv3EntityMigrationPolicy.swift
DeletedCarbObjectv3EntityMigrationPolicy.init(),DeletedCarbObjectv3EntityMigrationPolicy.init() in LoopKit/LoopKit/Persistence/Modelv3EntityMigrationPolicy.swift
InsulinDeliveryStore.init(healthKitSampleStore:storeSamplesToHealthKit:cacheStore:observationEnabled:cacheLength:provenanceIdentifier:test_currentDate:),InsulinDeliveryStore.init(healthKitSampleStore:storeSamplesToHealthKit:cacheStore:observationEnabled:cacheLength:provenanceIdentifier:test_currentDate:) in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
DoseStore.DoseStoreError.init(error:),DoseStoreError.init(error:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
DoseStore.init(healthKitSampleStore:cacheStore:cacheLength:insulinModelProvider:longestEffectDuration:basalProfile:insulinSensitivitySchedule:overrideHistory:syncVersion:lastPumpEventsReconciliation:provenanceIdentifier:onReady:test_currentDate:),DoseStore.init(healthKitSampleStore:cacheStore:cacheLength:insulinModelProvider:longestEffectDuration:basalProfile:insulinSensitivitySchedule:overrideHistory:syncVersion:lastPumpEventsReconciliation:provenanceIdentifier:onReady:test_currentDate:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
StoredReservoirValue.init(startDate:unitVolume:objectIDURL:),StoredReservoirValue.init(startDate:unitVolume:objectIDURL:) in LoopKit/LoopKit/InsulinKit/ReservoirValue.swift
TemporaryScheduleOverrideHistory.init(),TemporaryScheduleOverrideHistory.init() in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
OverrideEvent.init(override:modificationCounter:),OverrideEvent.init(override:modificationCounter:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
TemporaryScheduleOverrideHistory.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
TemporaryScheduleOverrideHistory.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
Alert.Identifier.init(managerIdentifier:alertIdentifier:),Identifier.init(managerIdentifier:alertIdentifier:) in LoopKit/LoopKit/Alert.swift
Alert.init(identifier:foregroundContent:backgroundContent:trigger:interruptionLevel:sound:metadata:),Alert.init(identifier:foregroundContent:backgroundContent:trigger:interruptionLevel:sound:metadata:) in LoopKit/LoopKit/Alert.swift
AnyCodableEquatable.init(_:),AnyCodableEquatable.init(_:) in LoopKit/LoopKit/AnyCodableEquatable.swift
AnyCodableEquatable.init(from:),AnyCodableEquatable.init(from:) in LoopKit/LoopKit/AnyCodableEquatable.swift
Alert.Content.init(title:body:acknowledgeActionButtonLabel:),Content.init(title:body:acknowledgeActionButtonLabel:) in LoopKit/LoopKit/Alert.swift
NotificationSettings.init(authorizationStatus:soundSetting:badgeSetting:alertSetting:notificationCenterSetting:lockScreenSetting:carPlaySetting:alertStyle:showPreviewsSetting:criticalAlertSetting:providesAppNotificationSettings:announcementSetting:timeSensitiveSetting:scheduledDeliverySetting:temporaryMuteAlertsSetting:),NotificationSettings.init(authorizationStatus:soundSetting:badgeSetting:alertSetting:notificationCenterSetting:lockScreenSetting:carPlaySetting:alertStyle:showPreviewsSetting:criticalAlertSetting:providesAppNotificationSettings:announcementSetting:timeSensitiveSetting:scheduledDeliverySetting:temporaryMuteAlertsSetting:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.TemporaryMuteAlertSetting.init(enabled:duration:),TemporaryMuteAlertSetting.init(enabled:duration:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.ShowPreviewsSetting.init(_:),ShowPreviewsSetting.init(_:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.AlertStyle.init(_:),AlertStyle.init(_:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.NotificationSetting.init(_:),NotificationSetting.init(_:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.AuthorizationStatus.init(_:),AuthorizationStatus.init(_:) in LoopKit/LoopKit/NotificationSettings.swift
StoredInsulinModel.init(modelType:delay:actionDuration:peakActivity:),StoredInsulinModel.init(modelType:delay:actionDuration:peakActivity:) in LoopKit/LoopKit/StoredInsulinModel.swift
PersistedPumpEvent.init(date:persistedDate:dose:isUploaded:objectIDURL:raw:title:type:automatic:alarmType:),PersistedPumpEvent.init(date:persistedDate:dose:isUploaded:objectIDURL:raw:title:type:automatic:alarmType:) in LoopKit/LoopKit/InsulinKit/PersistedPumpEvent.swift
SyncAlertObject.init(identifier:trigger:interruptionLevel:foregroundContent:backgroundContent:sound:metadata:issuedDate:acknowledgedDate:retractedDate:syncIdentifier:),SyncAlertObject.init(identifier:trigger:interruptionLevel:foregroundContent:backgroundContent:sound:metadata:issuedDate:acknowledgedDate:retractedDate:syncIdentifier:) in LoopKit/LoopKit/SyncAlertObject.swift
PersistedAlert.init(alert:issuedDate:retractedDate:acknowledgedDate:),PersistedAlert.init(alert:issuedDate:retractedDate:acknowledgedDate:) in LoopKit/LoopKit/Alert.swift
Self.init(rawState:),DeviceManager.init(rawState:) in LoopKit/LoopKit/DeviceManager/DeviceManager.swift
Guardrail<Value>.init(absoluteBounds:recommendedBounds:startingSuggestion:),Guardrail.init(absoluteBounds:recommendedBounds:startingSuggestion:) in LoopKit/LoopKit/Guardrail.swift
DosingDecisionObject.init(entity:insertInto:),DosingDecisionObject.init(entity:insertInto:) in LoopKit/LoopKit/DosingDecisionObject+CoreDataClass.swift
EncodableDosingDecisionObject.init(_:),EncodableDosingDecisionObject.init(_:) in LoopKit/LoopKit/DosingDecisionObject+CoreDataProperties.swift
KeychainManager.init(),KeychainManager.init() in LoopKit/LoopKit/KeychainManager.swift
KeychainManager.InternetCredentials.init(username:password:url:),InternetCredentials.init(username:password:url:) in LoopKit/LoopKit/KeychainManager.swift
SecurityProtocol.init(scheme:),SecurityProtocol.init(scheme:) in LoopKit/LoopKit/KeychainManager.swift
SecurityProtocol.init(secAttrProtocol:),SecurityProtocol.init(secAttrProtocol:) in LoopKit/LoopKit/KeychainManager.swift
DeliveryLimits.init(maximumBasalRate:maximumBolus:),DeliveryLimits.init(maximumBasalRate:maximumBolus:) in LoopKit/LoopKit/DeliveryLimits.swift
BasalScheduleValidationResult.init(scheduleError:itemErrors:),BasalScheduleValidationResult.init(scheduleError:itemErrors:) in LoopKit/LoopKit/BasalRateSchedule.swift
Reservoir.init(entity:insertInto:),Reservoir.init(entity:insertInto:) in LoopKit/LoopKit/InsulinKit/Reservoir.swift
PumpEvent.init(entity:insertInto:),PumpEvent.init(entity:insertInto:) in LoopKit/LoopKit/InsulinKit/PumpEvent+CoreDataClass.swift
IntegralRetrospectiveCorrection.init(effectDuration:),IntegralRetrospectiveCorrection.init(effectDuration:) in LoopKit/LoopKit/RetrospectiveCorrection/IntegralRetrospectiveCorrection.swift
GlucoseChange.init(startDate:endDate:quantity:),GlucoseChange.init(startDate:endDate:quantity:) in LoopKit/LoopKit/GlucoseChange.swift
StoredFavoriteFood.init(id:name:carbsQuantity:foodType:absorptionTime:),StoredFavoriteFood.init(id:name:carbsQuantity:foodType:absorptionTime:) in LoopKit/LoopKit/FavoriteFood/StoredFavoriteFood.swift
LoopPredictionInput.init(glucoseHistory:doses:carbEntries:settings:),LoopPredictionInput.init(glucoseHistory:doses:carbEntries:settings:) in LoopKit/LoopKit/LoopAlgorithm/LoopPredictionInput.swift
LoopAlgorithmSettings.init(basal:sensitivity:carbRatio:target:delta:insulinActivityDuration:algorithmEffectsOptions:maximumBasalRatePerHour:maximumBolus:suspendThreshold:useIntegralRetrospectiveCorrection:),LoopAlgorithmSettings.init(basal:sensitivity:carbRatio:target:delta:insulinActivityDuration:algorithmEffectsOptions:maximumBasalRatePerHour:maximumBolus:suspendThreshold:useIntegralRetrospectiveCorrection:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithmSettings.swift
AlgorithmEffectsOptions.init(rawValue:),AlgorithmEffectsOptions.init(rawValue:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
StandardRetrospectiveCorrection.init(effectDuration:),StandardRetrospectiveCorrection.init(effectDuration:) in LoopKit/LoopKit/RetrospectiveCorrection/StandardRetrospectiveCorrection.swift
QuantityFormatter.init(for:),QuantityFormatter.init(for:) in LoopKit/LoopKit/QuantityFormatter.swift
NewGlucoseSample.init(date:quantity:condition:trend:trendRate:isDisplayOnly:wasUserEntered:syncIdentifier:syncVersion:device:),NewGlucoseSample.init(date:quantity:condition:trend:trendRate:isDisplayOnly:wasUserEntered:syncIdentifier:syncVersion:device:) in LoopKit/LoopKit/GlucoseKit/NewGlucoseSample.swift
NewGlucoseSample.init(rawValue:),NewGlucoseSample.init(rawValue:) in LoopKit/LoopKit/GlucoseKit/NewGlucoseSample.swift
InsulinMath.init(),InsulinMath.init() in LoopKit/LoopKit/InsulinKit/InsulinMath.swift
HealthStoreUnitCache.init(healthStore:),HealthStoreUnitCache.init(healthStore:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
SettingsObject.init(entity:insertInto:),SettingsObject.init(entity:insertInto:) in LoopKit/LoopKit/SettingsObject+CoreDataClass.swift
LoopAlgorithmInput.init(predictionInput:predictionDate:doseRecommendationType:),LoopAlgorithmInput.init(predictionInput:predictionDate:doseRecommendationType:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithmInput.swift
CodableDevice.init(_:),CodableDevice.init(_:) in LoopKit/LoopKit/DeviceManager/CodableDevice.swift
CgmEvent.init(entity:insertInto:),CgmEvent.init(entity:insertInto:) in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
LoopAlgorithm.init(),LoopAlgorithm.init() in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
LoopPrediction.init(glucose:effects:),LoopPrediction.init(glucose:effects:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
LoopAlgorithmEffects.init(insulin:carbs:retrospectiveCorrection:momentum:insulinCounteraction:),LoopAlgorithmEffects.init(insulin:carbs:retrospectiveCorrection:momentum:insulinCounteraction:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
CachedGlucoseObject.init(entity:insertInto:),CachedGlucoseObject.init(entity:insertInto:) in LoopKit/LoopKit/GlucoseKit/CachedGlucoseObject+CoreDataClass.swift
DeviceAVSoundPlayer.init(baseURL:),DeviceAVSoundPlayer.init(baseURL:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
DeviceAVSoundPlayer.Delegate.init(parent:),Delegate.init(parent:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
DeviceAVSoundPlayer.Delegate.init(),Delegate.init() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
WeakSynchronizedSet<Element>.init(),WeakSynchronizedSet.init() in LoopKit/LoopKit/WeakSynchronizedSet.swift
WeakSynchronizedSet<Element>.ElementDispatchContainer.init(element:queue:),ElementDispatchContainer.init(element:queue:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
EncodableSettingsObject.init(_:),EncodableSettingsObject.init(_:) in LoopKit/LoopKit/SettingsObject+CoreDataProperties.swift
LoopAlgorithmOutput.init(predictedGlucose:doseRecommendation:),LoopAlgorithmOutput.init(predictedGlucose:doseRecommendation:) in LoopKit/LoopKit/LoopAlgorithm/LoopPredictionOutput.swift
SettingsStore.init(store:expireAfter:),SettingsStore.init(store:expireAfter:) in LoopKit/LoopKit/SettingsStore.swift
StoredSettingsData.init(date:data:),StoredSettingsData.init(date:data:) in LoopKit/LoopKit/SettingsStore.swift
CarbStore.CarbStoreError.init(error:),CarbStoreError.init(error:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
CarbStore.init(healthKitSampleStore:cacheStore:cacheLength:defaultAbsorptionTimes:carbRatioSchedule:insulinSensitivitySchedule:overrideHistory:syncVersion:absorptionTimeOverrun:calculationDelta:effectDelay:carbAbsorptionModel:provenanceIdentifier:test_currentDate:),CarbStore.init(healthKitSampleStore:cacheStore:cacheLength:defaultAbsorptionTimes:carbRatioSchedule:insulinSensitivitySchedule:overrideHistory:syncVersion:absorptionTimeOverrun:calculationDelta:effectDelay:carbAbsorptionModel:provenanceIdentifier:test_currentDate:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
JSONStreamEncoder.init(stream:),JSONStreamEncoder.init(stream:) in LoopKit/LoopKit/JSONStreamEncoder.swift
PresetInsulinModelProvider.init(defaultRapidActingModel:),PresetInsulinModelProvider.init(defaultRapidActingModel:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
StaticInsulinModelProvider.init(_:),StaticInsulinModelProvider.init(_:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
WalshInsulinModel.init(actionDuration:delay:),WalshInsulinModel.init(actionDuration:delay:) in LoopKit/LoopKit/InsulinKit/WalshInsulinModel.swift
DoseRecommendation.init(basalAdjustment:bolusUnits:),DoseRecommendation.init(basalAdjustment:bolusUnits:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
GlucoseStore.init(healthKitSampleStore:cacheStore:cacheLength:momentumDataInterval:provenanceIdentifier:),GlucoseStore.init(healthKitSampleStore:cacheStore:cacheLength:momentumDataInterval:provenanceIdentifier:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
WeakSynchronizedDelegate<Delegate>.init(queue:),WeakSynchronizedDelegate.init(queue:) in LoopKit/LoopKit/WeakSynchronizedDelegate.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKit/LocalizedString.swift
ChartPointsScatterDownTrianglesLayer<T>.init(xAxis:yAxis:chartPoints:displayDelay:itemSize:itemFillColor:optimized:tapSettings:),ChartPointsScatterDownTrianglesLayer.init(xAxis:yAxis:chartPoints:displayDelay:itemSize:itemFillColor:optimized:tapSettings:) in LoopKit/LoopKitUI/Views/ChartPointsScatterDownTrianglesLayer.swift
GlucoseTherapySettingInformationView<Content>.init(therapySetting:preferredUnit:onExit:mode:appName:text:),GlucoseTherapySettingInformationView.init(therapySetting:preferredUnit:onExit:mode:appName:text:) in LoopKit/LoopKitUI/Views/Information Screens/GlucoseTherapySettingInformationView.swift
GlucoseTherapySettingInformationView<EmptyView>.init(therapySetting:preferredUnit:onExit:mode:appName:text:),GlucoseTherapySettingInformationView.init(therapySetting:preferredUnit:onExit:mode:appName:text:) in LoopKit/LoopKitUI/Views/Information Screens/GlucoseTherapySettingInformationView.swift
PopoverLink<Text, Destination>.init(_:destination:),PopoverLink.init(_:destination:) in LoopKit/LoopKitUI/Views/PopoverLink.swift
PopoverLink<Label, Destination>.init(destination:label:),PopoverLink.init(destination:label:) in LoopKit/LoopKitUI/Views/PopoverLink.swift
PopoverLink<Label, Destination>.init(destination:isActive:label:),PopoverLink.init(destination:isActive:label:) in LoopKit/LoopKitUI/Views/PopoverLink.swift
PopoverLink<Label, Destination>.init(_:isFullScreen:),PopoverLink.init(_:isFullScreen:) in LoopKit/LoopKitUI/Views/PopoverLink.swift
SuspendResumeTableViewCell.init(style:reuseIdentifier:),SuspendResumeTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/SuspendResumeTableViewCell.swift
SuspendResumeTableViewCell.init(coder:),SuspendResumeTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/SuspendResumeTableViewCell.swift
TextButtonTableViewCell.init(style:reuseIdentifier:),TextButtonTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/TextButtonTableViewCell.swift
TextButtonTableViewCell.init(coder:),TextButtonTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/TextButtonTableViewCell.swift
LoadingTableViewCell.init(style:reuseIdentifier:),LoadingTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/LoadingTableViewCell.swift
LoadingTableViewCell.init(coder:),LoadingTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/LoadingTableViewCell.swift
GuidePage<Content, ActionAreaContent>.init(content:actionAreaContent:),GuidePage.init(content:actionAreaContent:) in LoopKit/LoopKitUI/Views/GuidePage.swift
GuidePage_Previews.init(),GuidePage_Previews.init() in LoopKit/LoopKitUI/Views/GuidePage.swift
GuardrailConstrainedQuantityRangeView.init(range:unit:guardrail:isEditing:forceDisableAnimations:),GuardrailConstrainedQuantityRangeView.init(range:unit:guardrail:isEditing:forceDisableAnimations:) in LoopKit/LoopKitUI/Views/GuardrailConstrainedQuantityRangeView.swift
OverrideHistoryViewModel.init(overrides:glucoseUnit:),OverrideHistoryViewModel.init(overrides:glucoseUnit:) in LoopKit/LoopKitUI/Views/OverrideSelectionHistory.swift
OverrideSelectionHistory.init(model:),OverrideSelectionHistory.init(model:) in LoopKit/LoopKitUI/Views/OverrideSelectionHistory.swift
OverrideViewCell.init(symbol:name:targetRange:duration:subtitle:insulinNeedsScaleFactor:),OverrideViewCell.init(symbol:name:targetRange:duration:subtitle:insulinNeedsScaleFactor:) in LoopKit/LoopKitUI/Views/OverrideViewCell.swift
BatteryLevelHUDView.init(frame:),BatteryLevelHUDView.init(frame:) in LoopKit/LoopKitUI/Views/BatteryLevelHUDView.swift
BatteryLevelHUDView.init(coder:),BatteryLevelHUDView.init(coder:) in LoopKit/LoopKitUI/Views/BatteryLevelHUDView.swift
LevelHUDView.init(frame:),LevelHUDView.init(frame:) in LoopKit/LoopKitUI/Views/LevelHUDView.swift
LevelHUDView.init(coder:),LevelHUDView.init(coder:) in LoopKit/LoopKitUI/Views/LevelHUDView.swift
BaseHUDView.init(frame:),BaseHUDView.init(frame:) in LoopKit/LoopKitUI/Views/BaseHUDView.swift
BaseHUDView.init(coder:),BaseHUDView.init(coder:) in LoopKit/LoopKitUI/Views/BaseHUDView.swift
StateColorPalette.init(unknown:normal:warning:error:),StateColorPalette.init(unknown:normal:warning:error:) in LoopKit/LoopKitUI/StateColorPalette.swift
LevelMaskView.init(frame:),LevelMaskView.init(frame:) in LoopKit/LoopKitUI/Views/LevelMaskView.swift
LevelMaskView.init(coder:),LevelMaskView.init(coder:) in LoopKit/LoopKitUI/Views/LevelMaskView.swift
OrientationLock.init(_:),OrientationLock.init(_:) in LoopKit/LoopKitUI/Extensions/OrientationLock.swift
OrientationLocked<Content>.init(supportedInterfaceOrientations:content:),OrientationLocked.init(supportedInterfaceOrientations:content:) in LoopKit/LoopKitUI/Extensions/OrientationLock.swift
GuardrailConstrainedQuantityView.init(value:unit:guardrail:isEditing:isSupportedValue:iconSpacing:isUnitLabelVisible:forceDisableAnimations:),GuardrailConstrainedQuantityView.init(value:unit:guardrail:isEditing:isSupportedValue:iconSpacing:isUnitLabelVisible:forceDisableAnimations:) in LoopKit/LoopKitUI/Views/GuardrailConstraintedQuantityView.swift
GuidanceColors.init(acceptable:warning:critical:),GuidanceColors.init(acceptable:warning:critical:) in LoopKit/LoopKitUI/Models/GuidanceColors.swift
GuidanceColors.init(),GuidanceColors.init() in LoopKit/LoopKitUI/Models/GuidanceColors.swift
InsulinSensitivityScalingTableViewCell.init(style:reuseIdentifier:),InsulinSensitivityScalingTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
InsulinSensitivityScalingTableViewCell.init(coder:),InsulinSensitivityScalingTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/InsulinSensitivityScalingTableViewCell.swift
SegmentedGaugeBarView.init(frame:),SegmentedGaugeBarView.init(frame:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
SegmentedGaugeBarView.init(coder:),SegmentedGaugeBarView.init(coder:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarView.swift
ThumbView.init(frame:),ThumbView.init(frame:) in LoopKit/LoopKitUI/Views/ThumbView.swift
ThumbView.init(coder:),ThumbView.init(coder:) in LoopKit/LoopKitUI/Views/ThumbView.swift
SegmentedGaugeBarLayer.init(),SegmentedGaugeBarLayer.init() in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
SegmentedGaugeBarLayer.init(layer:),SegmentedGaugeBarLayer.init(layer:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
SegmentedGaugeBarLayer.init(coder:),SegmentedGaugeBarLayer.init(coder:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBarLayer.swift
CorrectionRangeInformationView.init(onExit:mode:),CorrectionRangeInformationView.init(onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/CorrectionRangeInformationView.swift
CorrectionRangeInformationView_Previews.init(),CorrectionRangeInformationView_Previews.init() in LoopKit/LoopKitUI/Views/Information Screens/CorrectionRangeInformationView.swift
UnknownError.init(),UnknownError.init() in LoopKit/LoopKitUI/Extensions/Environment+Authenticate.swift
LocalAuthentication.init(),LocalAuthentication.init() in LoopKit/LoopKitUI/Extensions/Environment+Authenticate.swift
AuthenticationChallengeKey.init(),AuthenticationChallengeKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Authenticate.swift
MultipleSelectionList<Item>.init(items:selectedItems:itemToDisplayableString:),MultipleSelectionList.init(items:selectedItems:itemToDisplayableString:) in LoopKit/LoopKitUI/Views/MultipleSelectionList.swift
MultipleSelectionRow<Item>.init(item:selectedItems:itemToDisplayableString:),MultipleSelectionRow.init(item:selectedItems:itemToDisplayableString:) in LoopKit/LoopKitUI/Views/MultipleSelectionList.swift
SelectableList_Previews.init(),SelectableList_Previews.init() in LoopKit/LoopKitUI/Views/MultipleSelectionList.swift
SelectableList_Previews.PreviewWrapper.init(),PreviewWrapper.init() in LoopKit/LoopKitUI/Views/MultipleSelectionList.swift
SelectableList_Previews.PreviewWrapper.init(selectedFruit:),PreviewWrapper.init(selectedFruit:) in LoopKit/LoopKitUI/Views/MultipleSelectionList.swift
LabeledValueView.init(label:value:highlightValue:),LabeledValueView.init(label:value:highlightValue:) in LoopKit/LoopKitUI/Views/LabeledValueView.swift
LabeledValueView_Previews.init(),LabeledValueView_Previews.init() in LoopKit/LoopKitUI/Views/LabeledValueView.swift
RadioSelectionTableViewController.init(),RadioSelectionTableViewController.init() in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
RadioSelectionTableViewController.init(style:),RadioSelectionTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
RadioSelectionTableViewController.init(nibName:bundle:),RadioSelectionTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
RadioSelectionTableViewController.init(coder:),RadioSelectionTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/RadioSelectionTableViewController.swift
TextFieldTableViewCell.init(style:reuseIdentifier:),TextFieldTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
TextFieldTableViewCell.init(coder:),TextFieldTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/TextFieldTableViewCell.swift
GuardrailWarning.init(therapySetting:title:threshold:caption:),GuardrailWarning.init(therapySetting:title:threshold:caption:) in LoopKit/LoopKitUI/Views/GuardrailWarning.swift
GuardrailWarning.init(therapySetting:title:thresholds:caption:),GuardrailWarning.init(therapySetting:title:thresholds:caption:) in LoopKit/LoopKitUI/Views/GuardrailWarning.swift
EmojiRow.init(text:isFocused:emojiType:title:),EmojiRow.init(text:isFocused:emojiType:title:) in LoopKit/LoopKitUI/CarbKit/EmojiRow.swift
EmojiSection.init(title:items:indexSymbol:),EmojiSection.init(title:items:indexSymbol:) in LoopKit/LoopKitUI/Views/EmojiDataSource.swift
InstructionList.init(instructions:startingIndex:instructionColor:),InstructionList.init(instructions:startingIndex:instructionColor:) in LoopKit/LoopKitUI/Views/InstructionList.swift
InstructionList.init(instructions:startingIndex:instructionColor:),InstructionList.init(instructions:startingIndex:instructionColor:) in LoopKit/LoopKitUI/Views/InstructionList.swift
InstructionList.Instruction.init(text:subtext:),Instruction.init(text:subtext:) in LoopKit/LoopKitUI/Views/InstructionList.swift
InstructionList_Previews.init(),InstructionList_Previews.init() in LoopKit/LoopKitUI/Views/InstructionList.swift
GlucoseEntryTableViewController.init(glucoseUnit:),GlucoseEntryTableViewController.init(glucoseUnit:) in LoopKit/LoopKitUI/View Controllers/GlucoseEntryTableViewController.swift
GlucoseEntryTableViewController.init(coder:),GlucoseEntryTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/GlucoseEntryTableViewController.swift
GlucoseEntryTableViewController.init(style:),GlucoseEntryTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/GlucoseEntryTableViewController.swift
GlucoseEntryTableViewController.init(nibName:bundle:),GlucoseEntryTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/GlucoseEntryTableViewController.swift
TextFieldTableViewController.init(),TextFieldTableViewController.init() in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
TextFieldTableViewController.init(style:),TextFieldTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
TextFieldTableViewController.init(nibName:bundle:),TextFieldTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
TextFieldTableViewController.init(coder:),TextFieldTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/TextFieldTableViewController.swift
AuthenticationViewController<T>.init(authentication:),AuthenticationViewController.init(authentication:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
AuthenticationViewController<T>.init(coder:),AuthenticationViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
AuthenticationViewController<T>.init(style:),AuthenticationViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
AuthenticationViewController<T>.init(nibName:bundle:),AuthenticationViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/AuthenticationViewController.swift
ServiceCredential.init(title:placeholder:isSecret:keyboardType:options:),ServiceCredential.init(title:placeholder:isSecret:keyboardType:options:) in LoopKit/LoopKitUI/ServiceCredential.swift
ActionButton.init(_:),ActionButton.init(_:) in LoopKit/LoopKitUI/Views/ActionButton.swift
OverrideSelectionHeaderView.init(frame:),OverrideSelectionHeaderView.init(frame:) in LoopKit/LoopKitUI/Views/OverrideSelectionHeaderView.swift
OverrideSelectionHeaderView.init(coder:),OverrideSelectionHeaderView.init(coder:) in LoopKit/LoopKitUI/Views/OverrideSelectionHeaderView.swift
ConfigurationPageScrollView<Content, ActionArea>.init(content:actionArea:),ConfigurationPageScrollView.init(content:actionArea:) in LoopKit/LoopKitUI/Views/ConfigurationPageScrollView.swift
FractionalQuantityPicker.init(value:unit:guardrail:selectableValues:usageContext:),FractionalQuantityPicker.init(value:unit:guardrail:selectableValues:usageContext:) in LoopKit/LoopKitUI/Views/FractionalQuantityPicker.swift
CustomInsetGroupedListStyle.init(),CustomInsetGroupedListStyle.init() in LoopKit/LoopKitUI/Extensions/View+InsetGroupedListStyle.swift
ValidatingIndicatorView.init(frame:),ValidatingIndicatorView.init(frame:) in LoopKit/LoopKitUI/Views/ValidatingIndicatorView.swift
ValidatingIndicatorView.init(coder:),ValidatingIndicatorView.init(coder:) in LoopKit/LoopKitUI/Views/ValidatingIndicatorView.swift
WebView.init(url:),WebView.init(url:) in LoopKit/LoopKitUI/Views/WebView.swift
ActivityIndicator.init(isAnimating:style:color:),ActivityIndicator.init(isAnimating:style:color:) in LoopKit/LoopKitUI/Views/ActivityIndicator.swift
SingleSelectionCheckList<Item>.init(header:footer:items:selectedItem:formatter:),SingleSelectionCheckList.init(header:footer:items:selectedItem:formatter:) in LoopKit/LoopKitUI/Views/SingleSelectionCheckList.swift
CheckSelectionRow<Item>.init(item:selectedItem:),CheckSelectionRow.init(item:selectedItem:) in LoopKit/LoopKitUI/Views/SingleSelectionCheckList.swift
SingleSelectionCheckList_Previews.init(),SingleSelectionCheckList_Previews.init() in LoopKit/LoopKitUI/Views/SingleSelectionCheckList.swift
SingleSelectionCheckList_Previews.PreviewWrapper.init(),PreviewWrapper.init() in LoopKit/LoopKitUI/Views/SingleSelectionCheckList.swift
SingleSelectionCheckList_Previews.PreviewWrapper.init(selectedFruit:),PreviewWrapper.init(selectedFruit:) in LoopKit/LoopKitUI/Views/SingleSelectionCheckList.swift
ScheduleItemPicker<Value, ValuePicker>.init(item:isTimeSelectable:valuePicker:),ScheduleItemPicker.init(item:isTimeSelectable:valuePicker:) in LoopKit/LoopKitUI/Views/ScheduleItemPicker.swift
PumpSupportedIncrements.init(basalRates:bolusVolumes:maximumBolusVolumes:maximumBasalScheduleEntryCount:),PumpSupportedIncrements.init(basalRates:bolusVolumes:maximumBolusVolumes:maximumBasalScheduleEntryCount:) in LoopKit/LoopKitUI/Views/Settings Editors/PumpSupportedIncrements.swift
TherapySettingsViewModel.init(therapySettings:pumpSupportedIncrements:sensitivityOverridesEnabled:adultChildInsulinModelSelectionEnabled:prescription:delegate:),TherapySettingsViewModel.init(therapySettings:pumpSupportedIncrements:sensitivityOverridesEnabled:adultChildInsulinModelSelectionEnabled:prescription:delegate:) in LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
AuthenticationTableViewCell.init(style:reuseIdentifier:),AuthenticationTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
AuthenticationTableViewCell.init(coder:),AuthenticationTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
CredentialOptionPicker.init(options:),CredentialOptionPicker.init(options:) in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
CredentialOptionPicker.init(),CredentialOptionPicker.init() in LoopKit/LoopKitUI/Views/AuthenticationTableViewCell.swift
CorrectionRangeOverridesEditor.init(mode:therapySettingsViewModel:preset:didSave:),CorrectionRangeOverridesEditor.init(mode:therapySettingsViewModel:preset:didSave:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
Card.init(parts:backgroundColor:),Card.init(parts:backgroundColor:) in LoopKit/LoopKitUI/Views/CardList/Card.swift
CorrectionRangeOverridesEditorViewModel.init(therapySettingsViewModel:preset:didSave:),CorrectionRangeOverridesEditorViewModel.init(therapySettingsViewModel:preset:didSave:) in LoopKit/LoopKitUI/ViewModels/CorrectionRangeOverridesEditorViewModel.swift
DisplayGlucosePreference.init(displayGlucoseUnit:),DisplayGlucosePreference.init(displayGlucoseUnit:) in LoopKit/LoopKitUI/ViewModels/DisplayGlucosePreference.swift
CorrectionRangeOverridesGuardrailWarning.init(crossedThresholds:preset:),CorrectionRangeOverridesGuardrailWarning.init(crossedThresholds:preset:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesEditor.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/LocalizedString.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/UIColor.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Image.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/UIImage.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Color.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/LocalizedString.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/UIColor.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Image.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/UIImage.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Color.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/LocalizedString.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/UIColor.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Image.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/UIImage.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Color.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/LocalizedString.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/UIColor.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Image.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/UIImage.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Color.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/LocalizedString.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/UIColor.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Image.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/UIImage.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKitUI/Extensions/Color.swift
LabeledTextField.init(label:placeholder:value:),LabeledTextField.init(label:placeholder:value:) in LoopKit/LoopKitUI/Views/LabeledTextField.swift
LabelTextField_Previews.init(),LabelTextField_Previews.init() in LoopKit/LoopKitUI/Views/LabeledTextField.swift
LabelTextField_Previews.PreviewWrapper.init(),PreviewWrapper.init() in LoopKit/LoopKitUI/Views/LabeledTextField.swift
LabelTextField_Previews.PreviewWrapper.init(value:),PreviewWrapper.init(value:) in LoopKit/LoopKitUI/Views/LabeledTextField.swift
LabeledNumberInput.init(value:font:label:placeholder:allowFractions:shouldBecomeFirstResponder:),LabeledNumberInput.init(value:font:label:placeholder:allowFractions:shouldBecomeFirstResponder:) in LoopKit/LoopKitUI/Views/LabeledNumberInput.swift
LabeledNumberInput_Previews.init(),LabeledNumberInput_Previews.init() in LoopKit/LoopKitUI/Views/LabeledNumberInput.swift
InsulinTypeChooser.init(insulinType:supportedInsulinTypes:allowUnsetInsulinType:),InsulinTypeChooser.init(insulinType:supportedInsulinTypes:allowUnsetInsulinType:) in LoopKit/LoopKitUI/Views/InsulinTypeChooser.swift
InsulinTypeChooser_Previews.init(),InsulinTypeChooser_Previews.init() in LoopKit/LoopKitUI/Views/InsulinTypeChooser.swift
ChartsManager.init(colors:settings:axisLabelFont:charts:traitCollection:),ChartsManager.init(colors:settings:axisLabelFont:charts:traitCollection:) in LoopKit/LoopKitUI/View Controllers/ChartsManager.swift
ChartColorPalette.init(axisLine:axisLabel:grid:glucoseTint:insulinTint:carbTint:),ChartColorPalette.init(axisLine:axisLabel:grid:glucoseTint:insulinTint:carbTint:) in LoopKit/LoopKitUI/ChartColorPalette.swift
ChartAxisValueDoubleUnit.init(_:unitString:formatter:),ChartAxisValueDoubleUnit.init(_:unitString:formatter:) in LoopKit/LoopKitUI/Models/ChartAxisValueDoubleUnit.swift
ChartAxisValueDoubleUnit.init(_:unitString:),ChartAxisValueDoubleUnit.init(_:unitString:) in LoopKit/LoopKitUI/Models/ChartAxisValueDoubleUnit.swift
ChartAxisValueDoubleUnit.init(_:formatter:labelSettings:),ChartAxisValueDoubleUnit.init(_:formatter:labelSettings:) in LoopKit/LoopKitUI/Models/ChartAxisValueDoubleUnit.swift
SettingsTableViewCell.init(style:reuseIdentifier:),SettingsTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/SettingsTableViewCell.swift
SettingsTableViewCell.init(coder:),SettingsTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/SettingsTableViewCell.swift
CorrectionRangeScheduleEditor.init(mode:therapySettingsViewModel:didSave:),CorrectionRangeScheduleEditor.init(mode:therapySettingsViewModel:didSave:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeScheduleEditor.swift
AlertContent.init(title:message:cancel:ok:),AlertContent.init(title:message:cancel:ok:) in LoopKit/LoopKitUI/Views/AlertContent.swift
CorrectionRangeScheduleEditorViewModel.init(mode:therapySettingsViewModel:didSave:),CorrectionRangeScheduleEditorViewModel.init(mode:therapySettingsViewModel:didSave:) in LoopKit/LoopKitUI/ViewModels/CorrectionRangeScheduleEditorViewModel.swift
CorrectionRangeGuardrailWarning.init(crossedThresholds:),CorrectionRangeGuardrailWarning.init(crossedThresholds:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeScheduleEditor.swift
ChartPointsFill.init(chartPoints:fillColor:createContainerPoints:blendMode:),ChartPointsFill.init(chartPoints:fillColor:createContainerPoints:blendMode:) in LoopKit/LoopKitUI/Views/ChartPointsContextFillLayer.swift
ChartPointsFillsLayer.init(xAxis:yAxis:fills:),ChartPointsFillsLayer.init(xAxis:yAxis:fills:) in LoopKit/LoopKitUI/Views/ChartPointsContextFillLayer.swift
ChartPointsFillsLayer.init(xAxis:yAxis:),ChartPointsFillsLayer.init(xAxis:yAxis:) in LoopKit/LoopKitUI/Views/ChartPointsContextFillLayer.swift
ChartPointsFillsView.init(frame:chartPointsFills:),ChartPointsFillsView.init(frame:chartPointsFills:) in LoopKit/LoopKitUI/Views/ChartPointsContextFillLayer.swift
ChartPointsFillsView.init(coder:),ChartPointsFillsView.init(coder:) in LoopKit/LoopKitUI/Views/ChartPointsContextFillLayer.swift
ChartPointsFillsView.init(frame:),ChartPointsFillsView.init(frame:) in LoopKit/LoopKitUI/Views/ChartPointsContextFillLayer.swift
DemoPlaceHolderView.init(appName:),DemoPlaceHolderView.init(appName:) in LoopKit/LoopKitUI/Views/DemoPlaceHolderView.swift
DemoPlaceHolderView_Previews.init(),DemoPlaceHolderView_Previews.init() in LoopKit/LoopKitUI/Views/DemoPlaceHolderView.swift
InsulinModelInformationView.init(onExit:mode:),InsulinModelInformationView.init(onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/InsulinModelInformationView.swift
EmojiInputHeaderView.init(frame:),EmojiInputHeaderView.init(frame:) in LoopKit/LoopKitUI/Views/EmojiInputHeaderView.swift
EmojiInputHeaderView.init(coder:),EmojiInputHeaderView.init(coder:) in LoopKit/LoopKitUI/Views/EmojiInputHeaderView.swift
OverrideSelectionFooterView.init(frame:),OverrideSelectionFooterView.init(frame:) in LoopKit/LoopKitUI/Views/OverrideSelectionFooterView.swift
OverrideSelectionFooterView.init(coder:),OverrideSelectionFooterView.init(coder:) in LoopKit/LoopKitUI/Views/OverrideSelectionFooterView.swift
Splat.init(_:id:rowContent:),Splat.init(_:id:rowContent:) in LoopKit/LoopKitUI/Views/CardList/Splat.swift
Splat.init(_:rowContent:),Splat.init(_:rowContent:) in LoopKit/LoopKitUI/Views/CardList/Splat.swift
CardBuilder.init(),CardBuilder.init() in LoopKit/LoopKitUI/Views/CardList/CardBuilder.swift
NewScheduleItemEditor<Value, ValuePicker>.init(isPresented:initialItem:selectableTimes:valuePicker:onSave:),NewScheduleItemEditor.init(isPresented:initialItem:selectableTimes:valuePicker:onSave:) in LoopKit/LoopKitUI/Views/NewScheduleItemEditor.swift
Keyboard.State.init(),State.init() in LoopKit/LoopKitUI/Extensions/Keyboard.swift
Keyboard.State.init(height:animationDuration:),State.init(height:animationDuration:) in LoopKit/LoopKitUI/Extensions/Keyboard.swift
Keyboard.init(),Keyboard.init() in LoopKit/LoopKitUI/Extensions/Keyboard.swift
KeyboardAware.init(),KeyboardAware.init() in LoopKit/LoopKitUI/Extensions/View+KeyboardAware.swift
KeyboardAware.init(keyboardHeight:),KeyboardAware.init(keyboardHeight:) in LoopKit/LoopKitUI/Extensions/View+KeyboardAware.swift
CarbRatioScheduleEditor.init(schedule:onSave:mode:),CarbRatioScheduleEditor.init(schedule:onSave:mode:) in LoopKit/LoopKitUI/Views/Settings Editors/CarbRatioScheduleEditor.swift
CarbRatioScheduleEditor.init(mode:therapySettingsViewModel:didSave:),CarbRatioScheduleEditor.init(mode:therapySettingsViewModel:didSave:) in LoopKit/LoopKitUI/Views/Settings Editors/CarbRatioScheduleEditor.swift
CarbRatioGuardrailWarning.init(crossedThresholds:),CarbRatioGuardrailWarning.init(crossedThresholds:) in LoopKit/LoopKitUI/Views/Settings Editors/CarbRatioScheduleEditor.swift
PaddedTextField.init(frame:),PaddedTextField.init(frame:) in LoopKit/LoopKitUI/Views/PaddedTextField.swift
PaddedTextField.init(coder:),PaddedTextField.init(coder:) in LoopKit/LoopKitUI/Views/PaddedTextField.swift
ServiceNavigationController.init(navigationBarClass:toolbarClass:),ServiceNavigationController.init(navigationBarClass:toolbarClass:) in LoopKit/LoopKitUI/View Controllers/ServiceNavigationController.swift
ServiceNavigationController.init(rootViewController:),ServiceNavigationController.init(rootViewController:) in LoopKit/LoopKitUI/View Controllers/ServiceNavigationController.swift
ServiceNavigationController.init(nibName:bundle:),ServiceNavigationController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/ServiceNavigationController.swift
ServiceNavigationController.init(coder:),ServiceNavigationController.init(coder:) in LoopKit/LoopKitUI/View Controllers/ServiceNavigationController.swift
LoopUIColorPalette.init(guidanceColors:carbTintColor:glucoseTintColor:insulinTintColor:loopStatusColorPalette:chartColorPalette:),LoopUIColorPalette.init(guidanceColors:carbTintColor:glucoseTintColor:insulinTintColor:loopStatusColorPalette:chartColorPalette:) in LoopKit/LoopKitUI/LoopUIColorPalette.swift
ResizeablePicker<SelectionValue>.init(selection:data:formatter:colorer:),ResizeablePicker.init(selection:data:formatter:colorer:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
ResizeablePicker<SelectionValue>.Coordinator.init(_:),Coordinator.init(_:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
ResizeablePicker<SelectionValue>.Coordinator.init(),Coordinator.init() in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
UIPickerViewResizeable.init(frame:),UIPickerViewResizeable.init(frame:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
UIPickerViewResizeable.init(coder:),UIPickerViewResizeable.init(coder:) in LoopKit/LoopKitUI/Views/ResizeablePicker.swift
SetupButton.init(frame:),SetupButton.init(frame:) in LoopKit/LoopKitUI/Views/SetupButton.swift
SetupButton.init(coder:),SetupButton.init(coder:) in LoopKit/LoopKitUI/Views/SetupButton.swift
LegacyInsulinDeliveryTableViewController.init(style:),LegacyInsulinDeliveryTableViewController.init(style:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
LegacyInsulinDeliveryTableViewController.init(nibName:bundle:),LegacyInsulinDeliveryTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
LegacyInsulinDeliveryTableViewController.init(coder:),LegacyInsulinDeliveryTableViewController.init(coder:) in LoopKit/LoopKitUI/InsulinKit/LegacyInsulinDeliveryTableViewController.swift
ErrorBackgroundView.init(frame:),ErrorBackgroundView.init(frame:) in LoopKit/LoopKitUI/InsulinKit/ErrorBackgroundView.swift
ErrorBackgroundView.init(coder:),ErrorBackgroundView.init(coder:) in LoopKit/LoopKitUI/InsulinKit/ErrorBackgroundView.swift
PredictedGlucoseChart.init(),PredictedGlucoseChart.init() in LoopKit/LoopKitUI/Charts/PredictedGlucoseChart.swift
GlucoseChart.init(),GlucoseChart.init() in LoopKit/LoopKitUI/Charts/GlucoseChart.swift
ChartPointsTouchHighlightLayerViewCache.init(xAxisLayer:yAxisLayer:axisLabelSettings:chartPoints:tintColor:gestureRecognizer:onCompleteHighlight:),ChartPointsTouchHighlightLayerViewCache.init(xAxisLayer:yAxisLayer:axisLabelSettings:chartPoints:tintColor:gestureRecognizer:onCompleteHighlight:) in LoopKit/LoopKitUI/Views/ChartPointsTouchHighlightLayerViewCache.swift
TargetChartBar.init(points:isOverride:),TargetChartBar.init(points:isOverride:) in LoopKit/LoopKitUI/Extensions/ChartPoint.swift
PercentageTextFieldTableViewController.init(),PercentageTextFieldTableViewController.init() in LoopKit/LoopKitUI/View Controllers/PercentageTextFieldTableViewController.swift
PercentageTextFieldTableViewController.init(style:),PercentageTextFieldTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/PercentageTextFieldTableViewController.swift
PercentageTextFieldTableViewController.init(nibName:bundle:),PercentageTextFieldTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/PercentageTextFieldTableViewController.swift
PercentageTextFieldTableViewController.init(coder:),PercentageTextFieldTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/PercentageTextFieldTableViewController.swift
SetupTableViewController.init(style:),SetupTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
SetupTableViewController.init(nibName:bundle:),SetupTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
SetupTableViewController.init(coder:),SetupTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
SetupTableFooterView.init(frame:),SetupTableFooterView.init(frame:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
SetupTableFooterView.init(coder:),SetupTableFooterView.init(coder:) in LoopKit/LoopKitUI/View Controllers/SetupTableViewController.swift
SingleValueScheduleTableViewController.init(style:),SingleValueScheduleTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
SingleValueScheduleTableViewController.init(nibName:bundle:),SingleValueScheduleTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
SingleValueScheduleTableViewController.init(coder:),SingleValueScheduleTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/SingleValueScheduleTableViewController.swift
DailyValueScheduleTableViewController.init(),DailyValueScheduleTableViewController.init() in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
DailyValueScheduleTableViewController.init(style:),DailyValueScheduleTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
DailyValueScheduleTableViewController.init(nibName:bundle:),DailyValueScheduleTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
DailyValueScheduleTableViewController.init(coder:),DailyValueScheduleTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/DailyValueScheduleTableViewController.swift
RepeatingScheduleValueTableViewCell.init(style:reuseIdentifier:),RepeatingScheduleValueTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/RepeatingScheduleValueTableViewCell.swift
RepeatingScheduleValueTableViewCell.init(coder:),RepeatingScheduleValueTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/RepeatingScheduleValueTableViewCell.swift
DatePickerTableViewCell.init(style:reuseIdentifier:),DatePickerTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/DatePickerTableViewCell.swift
DatePickerTableViewCell.init(coder:),DatePickerTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/DatePickerTableViewCell.swift
ExpandablePicker<SelectionType>.init(with:selectedValue:label:),ExpandablePicker.init(with:selectedValue:label:) in LoopKit/LoopKitUI/Views/ExpandablePicker.swift
SetConstrainedScheduleEntryTableViewCell.init(style:reuseIdentifier:),SetConstrainedScheduleEntryTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
SetConstrainedScheduleEntryTableViewCell.init(coder:),SetConstrainedScheduleEntryTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/SetConstrainedScheduleEntryTableViewCell.swift
InsulinSensitivityScheduleEditor.init(mode:therapySettingsViewModel:didSave:),InsulinSensitivityScheduleEditor.init(mode:therapySettingsViewModel:didSave:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinSensitivityScheduleEditor.swift
InsulinSensitivityScheduleEditorViewModel.init(therapySettingsViewModel:didSave:),InsulinSensitivityScheduleEditorViewModel.init(therapySettingsViewModel:didSave:) in LoopKit/LoopKitUI/ViewModels/InsulinSensitivityScheduleEditorViewModel.swift
InsulinSensitivityGuardrailWarning.init(crossedThresholds:),InsulinSensitivityGuardrailWarning.init(crossedThresholds:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinSensitivityScheduleEditor.swift
BasalRatesInformationView.init(onExit:mode:maximumScheduleEntryCount:),BasalRatesInformationView.init(onExit:mode:maximumScheduleEntryCount:) in LoopKit/LoopKitUI/Views/Information Screens/BasalRatesInformationView.swift
BasalRatesInformationView_Previews.init(),BasalRatesInformationView_Previews.init() in LoopKit/LoopKitUI/Views/Information Screens/BasalRatesInformationView.swift
EmojiInputController.init(nibName:bundle:),EmojiInputController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
EmojiInputController.init(coder:),EmojiInputController.init(coder:) in LoopKit/LoopKitUI/View Controllers/EmojiInputController.swift
CommandResponseViewController.init(command:),CommandResponseViewController.init(command:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
CommandResponseViewController.init(coder:),CommandResponseViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
CommandResponseViewController.init(nibName:bundle:),CommandResponseViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
SharedResponse.init(text:title:),SharedResponse.init(text:title:) in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
SharedResponse.init(),SharedResponse.init() in LoopKit/LoopKitUI/View Controllers/CommandResponseViewController.swift
InsulinSensitivityScheduleViewController.init(allowedValues:unit:minimumTimeInterval:),InsulinSensitivityScheduleViewController.init(allowedValues:unit:minimumTimeInterval:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
InsulinSensitivityScheduleViewController.init(coder:),InsulinSensitivityScheduleViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
InsulinSensitivityScheduleViewController.init(style:),InsulinSensitivityScheduleViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
InsulinSensitivityScheduleViewController.init(nibName:bundle:),InsulinSensitivityScheduleViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/InsulinSensitivityScheduleViewController.swift
DoubleRangeTableViewCell.init(style:reuseIdentifier:),DoubleRangeTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/DoubleRangeTableViewCell.swift
DoubleRangeTableViewCell.init(coder:),DoubleRangeTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/DoubleRangeTableViewCell.swift
ChartsTableViewController.init(style:),ChartsTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
ChartsTableViewController.init(nibName:bundle:),ChartsTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
ChartsTableViewController.init(coder:),ChartsTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/ChartsTableViewController.swift
GlucoseRangeScheduleTableViewController.init(allowedValues:unit:minimumTimeInterval:),GlucoseRangeScheduleTableViewController.init(allowedValues:unit:minimumTimeInterval:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
GlucoseRangeScheduleTableViewController.init(coder:),GlucoseRangeScheduleTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
GlucoseRangeScheduleTableViewController.init(style:),GlucoseRangeScheduleTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
GlucoseRangeScheduleTableViewController.init(nibName:bundle:),GlucoseRangeScheduleTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
EditableRange.init(minValue:maxValue:),EditableRange.init(minValue:maxValue:) in LoopKit/LoopKitUI/View Controllers/GlucoseRangeScheduleTableViewController.swift
GlucoseRangeTableViewCell.init(style:reuseIdentifier:),GlucoseRangeTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
GlucoseRangeTableViewCell.init(coder:),GlucoseRangeTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/GlucoseRangeTableViewCell.swift
SectionHeader.init(label:style:),SectionHeader.init(label:style:) in LoopKit/LoopKitUI/Views/SectionHeader.swift
HorizontalSizeClassOverrideHelper.init(),HorizontalSizeClassOverrideHelper.init() in LoopKit/LoopKitUI/Views/SectionHeader.swift
SectionHeader_Previews.init(),SectionHeader_Previews.init() in LoopKit/LoopKitUI/Views/SectionHeader.swift
DailyQuantityScheduleTableViewController.init(style:),DailyQuantityScheduleTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/DailyQuantityScheduleTableViewController.swift
DailyQuantityScheduleTableViewController.init(nibName:bundle:),DailyQuantityScheduleTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/DailyQuantityScheduleTableViewController.swift
DailyQuantityScheduleTableViewController.init(coder:),DailyQuantityScheduleTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/DailyQuantityScheduleTableViewController.swift
CorrectionRangeOverridesExpandableSetting<ExpandedContent>.init(carbTintColor:glucoseTintColor:isEditing:value:preset:unit:suspendThreshold:correctionRangeScheduleRange:expandedContent:),CorrectionRangeOverridesExpandableSetting.init(carbTintColor:glucoseTintColor:isEditing:value:preset:unit:suspendThreshold:correctionRangeScheduleRange:expandedContent:) in LoopKit/LoopKitUI/Views/Settings Editors/CorrectionRangeOverridesExpandableSetting.swift
_DismissibleHostingView<Content>.init(content:guidanceColors:carbTintColor:glucoseTintColor:insulinTintColor:),_DismissibleHostingView.init(content:guidanceColors:carbTintColor:glucoseTintColor:insulinTintColor:) in LoopKit/LoopKitUI/View Controllers/DismissibleHostingController.swift
DismissibleHostingController<Content>.init(content:dismissalMode:isModalInPresentation:onDisappear:colorPalette:),DismissibleHostingController.init(content:dismissalMode:isModalInPresentation:onDisappear:colorPalette:) in LoopKit/LoopKitUI/View Controllers/DismissibleHostingController.swift
DismissibleHostingController<Content>.init(content:dismissalMode:isModalInPresentation:onDisappear:guidanceColors:carbTintColor:glucoseTintColor:insulinTintColor:),DismissibleHostingController.init(content:dismissalMode:isModalInPresentation:onDisappear:guidanceColors:carbTintColor:glucoseTintColor:insulinTintColor:) in LoopKit/LoopKitUI/View Controllers/DismissibleHostingController.swift
DismissibleHostingController<Content>.init(rootView:),DismissibleHostingController.init(rootView:) in LoopKit/LoopKitUI/View Controllers/DismissibleHostingController.swift
DismissibleHostingController<Content>.init(coder:rootView:),DismissibleHostingController.init(coder:rootView:) in LoopKit/LoopKitUI/View Controllers/DismissibleHostingController.swift
DismissibleHostingController<Content>.init(coder:),DismissibleHostingController.init(coder:) in LoopKit/LoopKitUI/View Controllers/DismissibleHostingController.swift
ExpandableSetting<LeadingValueContent, TrailingValueContent, ExpandedContent>.init(isEditing:leadingValueContent:trailingValueContent:expandedContent:),ExpandableSetting.init(isEditing:leadingValueContent:trailingValueContent:expandedContent:) in LoopKit/LoopKitUI/Views/ExpandableSetting.swift
QuantityScheduleEditor<ActionAreaContent>.init(guidanceColors:title:description:initialScheduleItems:scheduleItems:unit:selectableValues:quantitySelectionMode:guardrail:defaultFirstScheduleItemValue:scheduleItemLimit:confirmationAlertContent:guardrailWarning:savingMechanism:mode:settingType:),QuantityScheduleEditor.init(guidanceColors:title:description:initialScheduleItems:scheduleItems:unit:selectableValues:quantitySelectionMode:guardrail:defaultFirstScheduleItemValue:scheduleItemLimit:confirmationAlertContent:guardrailWarning:savingMechanism:mode:settingType:) in LoopKit/LoopKitUI/Views/QuantityScheduleEditor.swift
SetupIndicatorView.init(frame:),SetupIndicatorView.init(frame:) in LoopKit/LoopKitUI/Views/SetupIndicatorView.swift
SetupIndicatorView.init(coder:),SetupIndicatorView.init(coder:) in LoopKit/LoopKitUI/Views/SetupIndicatorView.swift
DateAndDurationTableViewController.init(),DateAndDurationTableViewController.init() in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
DateAndDurationTableViewController.init(style:),DateAndDurationTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
DateAndDurationTableViewController.init(nibName:bundle:),DateAndDurationTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
DateAndDurationTableViewController.init(coder:),DateAndDurationTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/DateAndDurationTableViewController.swift
DosePointsCache.init(basal:basalFill:bolus:highlight:),DosePointsCache.init(basal:basalFill:bolus:highlight:) in LoopKit/LoopKitUI/Charts/DoseChart.swift
DoseChart.init(),DoseChart.init() in LoopKit/LoopKitUI/Charts/DoseChart.swift
COBChart.init(),COBChart.init() in LoopKit/LoopKitUI/Charts/COBChart.swift
HistoricalOverrideDetailView.init(override:glucoseUnit:delegate:),HistoricalOverrideDetailView.init(override:glucoseUnit:delegate:) in LoopKit/LoopKitUI/View Controllers/HistoricalOverrideDetailView.swift
AddEditOverrideTableViewController.init(glucoseUnit:),AddEditOverrideTableViewController.init(glucoseUnit:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
AddEditOverrideTableViewController.init(coder:),AddEditOverrideTableViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
AddEditOverrideTableViewController.init(style:),AddEditOverrideTableViewController.init(style:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
AddEditOverrideTableViewController.init(nibName:bundle:),AddEditOverrideTableViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/AddEditOverrideTableViewController.swift
LabeledTextFieldTableViewCell.init(style:reuseIdentifier:),LabeledTextFieldTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/LabeledTextFieldTableViewCell.swift
LabeledTextFieldTableViewCell.init(coder:),LabeledTextFieldTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/LabeledTextFieldTableViewCell.swift
CustomInputTextField.init(frame:),CustomInputTextField.init(frame:) in LoopKit/LoopKitUI/CarbKit/CustomInputTextField.swift
CustomInputTextField.init(coder:),CustomInputTextField.init(coder:) in LoopKit/LoopKitUI/CarbKit/CustomInputTextField.swift
ColorPaletteKey.init(),ColorPaletteKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
GuidanceColorsKey.init(),GuidanceColorsKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
CarbTintColorKey.init(),CarbTintColorKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
GlucoseTintColorKey.init(),GlucoseTintColorKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
InsulinTintColorKey.init(),InsulinTintColorKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
LightInsulinTintColorKey.init(),LightInsulinTintColorKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
DarkInsulinTintColorKey.init(),DarkInsulinTintColorKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
LoopStatusColorPaletteKey.init(),LoopStatusColorPaletteKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
ChartColorPaletteKey.init(),ChartColorPaletteKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Colors.swift
ChartAxisValueDoubleLog.init(actualDouble:unitString:formatter:labelSettings:),ChartAxisValueDoubleLog.init(actualDouble:unitString:formatter:labelSettings:) in LoopKit/LoopKitUI/Models/ChartAxisValueDoubleLog.swift
ChartAxisValueDoubleLog.init(screenLocDouble:formatter:labelSettings:),ChartAxisValueDoubleLog.init(screenLocDouble:formatter:labelSettings:) in LoopKit/LoopKitUI/Models/ChartAxisValueDoubleLog.swift
ChartAxisValueDoubleLog.init(screenLocDouble:actualDouble:formatter:labelSettings:),ChartAxisValueDoubleLog.init(screenLocDouble:actualDouble:formatter:labelSettings:) in LoopKit/LoopKitUI/Models/ChartAxisValueDoubleLog.swift
SuspendThresholdEditor.init(mode:therapySettingsViewModel:didSave:),SuspendThresholdEditor.init(mode:therapySettingsViewModel:didSave:) in LoopKit/LoopKitUI/Views/Settings Editors/SuspendThresholdEditor.swift
GlucoseValuePicker.init(value:unit:guardrail:bounds:isUnitLabelVisible:),GlucoseValuePicker.init(value:unit:guardrail:bounds:isUnitLabelVisible:) in LoopKit/LoopKitUI/Views/GlucoseValuePicker.swift
GlucoseValuePicker.init(value:unit:guardrail:isUnitLabelVisible:),GlucoseValuePicker.init(value:unit:guardrail:isUnitLabelVisible:) in LoopKit/LoopKitUI/Views/GlucoseValuePicker.swift
SuspendThresholdEditorViewModel.init(therapySettingsViewModel:mode:didSave:),SuspendThresholdEditorViewModel.init(therapySettingsViewModel:mode:didSave:) in LoopKit/LoopKitUI/ViewModels/SuspendThresholdEditorViewModel.swift
SuspendThresholdGuardrailWarning.init(safetyClassificationThreshold:),SuspendThresholdGuardrailWarning.init(safetyClassificationThreshold:) in LoopKit/LoopKitUI/Views/Settings Editors/SuspendThresholdEditor.swift
SuspendThresholdView_Previews.init(),SuspendThresholdView_Previews.init() in LoopKit/LoopKitUI/Views/Settings Editors/SuspendThresholdEditor.swift
SuspendThresholdInformationView.init(onExit:mode:),SuspendThresholdInformationView.init(onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/SuspendThresholdInformationView.swift
SuspendThresholdInformationView_Previews.init(),SuspendThresholdInformationView_Previews.init() in LoopKit/LoopKitUI/Views/Information Screens/SuspendThresholdInformationView.swift
LoopScenario.init(name:url:),LoopScenario.init(name:url:) in LoopKit/LoopKitUI/SupportUI.swift
CustomMenuItem.init(section:view:),CustomMenuItem.init(section:view:) in LoopKit/LoopKitUI/SupportUI.swift
DeviceWhitelist.init(cgmDevices:pumpDevices:),DeviceWhitelist.init(cgmDevices:pumpDevices:) in LoopKit/LoopKitUI/SupportUI.swift
Self.init(rawState:),SupportUI.init(rawState:) in LoopKit/LoopKitUI/SupportUI.swift
TimePicker.init(offsetFromMidnight:bounds:stride:isTimeExcluded:),TimePicker.init(offsetFromMidnight:bounds:stride:isTimeExcluded:) in LoopKit/LoopKitUI/Views/CardList/TimePicker.swift
ServiceDescriptor.init(identifier:localizedTitle:),ServiceDescriptor.init(identifier:localizedTitle:) in LoopKit/LoopKitUI/ServiceUI.swift
ReservoirVolumeHUDView.init(frame:),ReservoirVolumeHUDView.init(frame:) in LoopKit/LoopKitUI/Views/ReservoirVolumeHUDView.swift
ReservoirVolumeHUDView.init(coder:),ReservoirVolumeHUDView.init(coder:) in LoopKit/LoopKitUI/Views/ReservoirVolumeHUDView.swift
RowEmojiTextField.init(text:isFocused:placeholder:emojiType:didSelectItemInSection:),RowEmojiTextField.init(text:isFocused:placeholder:emojiType:didSelectItemInSection:) in LoopKit/LoopKitUI/CarbKit/RowEmojiTextField.swift
RowEmojiTextField.EmojiTextFieldViewModel.init(didSelectItemInSection:),EmojiTextFieldViewModel.init(didSelectItemInSection:) in LoopKit/LoopKitUI/CarbKit/RowEmojiTextField.swift
SelectableLabel.init(label:selectedLabel:),SelectableLabel.init(label:selectedLabel:) in LoopKit/LoopKitUI/Views/SelectableLabel.swift
SelectableLabel_Previews.init(),SelectableLabel_Previews.init() in LoopKit/LoopKitUI/Views/SelectableLabel.swift
ScheduleItemView<ValueContent, ExpandedContent>.init(time:isEditing:valueContent:expandedContent:),ScheduleItemView.init(time:isEditing:valueContent:expandedContent:) in LoopKit/LoopKitUI/Views/ScheduleItemView.swift
FoodEmojiDataSource.init(),FoodEmojiDataSource.init() in LoopKit/LoopKitUI/CarbKit/FoodEmojiDataSource.swift
InformationView<InformationalContent>.init(title:buttonText:informationalContent:onExit:mode:),InformationView.init(title:buttonText:informationalContent:onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/InformationView.swift
InformationView<InformationalContent>.init(title:informationalContent:onExit:mode:),InformationView.init(title:informationalContent:onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/InformationView.swift
DeliveryLimitsEditor.init(value:supportedBasalRates:scheduledBasalRange:supportedMaximumBolusVolumes:lowestCarbRatio:syncDeliveryLimits:onSave:mode:),DeliveryLimitsEditor.init(value:supportedBasalRates:scheduledBasalRange:supportedMaximumBolusVolumes:lowestCarbRatio:syncDeliveryLimits:onSave:mode:) in LoopKit/LoopKitUI/Views/Settings Editors/DeliveryLimitsEditor.swift
DeliveryLimitsEditor.init(mode:therapySettingsViewModel:didSave:),DeliveryLimitsEditor.init(mode:therapySettingsViewModel:didSave:) in LoopKit/LoopKitUI/Views/Settings Editors/DeliveryLimitsEditor.swift
DeliveryLimitsGuardrailWarning.init(crossedThresholds:value:),DeliveryLimitsGuardrailWarning.init(crossedThresholds:value:) in LoopKit/LoopKitUI/Views/Settings Editors/DeliveryLimitsEditor.swift
CarbQuantityRow.init(quantity:isFocused:title:preferredCarbUnit:),CarbQuantityRow.init(quantity:isFocused:title:preferredCarbUnit:) in LoopKit/LoopKitUI/CarbKit/CarbQuantityRow.swift
FavoriteFoodListRow.init(food:foodToConfirmDeleteId:onFoodTap:onFoodDelete:carbFormatter:absorptionTimeFormatter:preferredCarbUnit:),FavoriteFoodListRow.init(food:foodToConfirmDeleteId:onFoodTap:onFoodDelete:carbFormatter:absorptionTimeFormatter:preferredCarbUnit:) in LoopKit/LoopKitUI/Views/FavoriteFoodListRow.swift
InsulinTypeSetting.init(initialValue:supportedInsulinTypes:allowUnsetInsulinType:didChange:),InsulinTypeSetting.init(initialValue:supportedInsulinTypes:allowUnsetInsulinType:didChange:) in LoopKit/LoopKitUI/Views/InsulinTypeSetting.swift
InsulinTypeSetting_Previews.init(),InsulinTypeSetting_Previews.init() in LoopKit/LoopKitUI/Views/InsulinTypeSetting.swift
CardBackground.init(color:),CardBackground.init(color:) in LoopKit/LoopKitUI/Views/CardList/Card.swift
CardSectionDivider.init(),CardSectionDivider.init() in LoopKit/LoopKitUI/Views/CardList/Card.swift
BasalRateScheduleEditor.init(schedule:supportedBasalRates:maximumBasalRate:maximumScheduleEntryCount:syncBasalRateSchedule:onSave:mode:),BasalRateScheduleEditor.init(schedule:supportedBasalRates:maximumBasalRate:maximumScheduleEntryCount:syncBasalRateSchedule:onSave:mode:) in LoopKit/LoopKitUI/Views/Settings Editors/BasalRateScheduleEditor.swift
BasalRateScheduleEditor.init(mode:therapySettingsViewModel:didSave:),BasalRateScheduleEditor.init(mode:therapySettingsViewModel:didSave:) in LoopKit/LoopKitUI/Views/Settings Editors/BasalRateScheduleEditor.swift
BasalRateGuardrailWarning.init(crossedThresholds:isZeroUnitRateSelectable:),BasalRateGuardrailWarning.init(crossedThresholds:isZeroUnitRateSelectable:) in LoopKit/LoopKitUI/Views/Settings Editors/BasalRateScheduleEditor.swift
GlucoseRangePicker.init(range:unit:minValue:maxValue:guardrail:usageContext:),GlucoseRangePicker.init(range:unit:minValue:maxValue:guardrail:usageContext:) in LoopKit/LoopKitUI/Views/GlucoseRangePicker.swift
SwitchTableViewCell.init(style:reuseIdentifier:),SwitchTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/SwitchTableViewCell.swift
SwitchTableViewCell.init(coder:),SwitchTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/SwitchTableViewCell.swift
InsulinModelChartView.init(chartManager:glucoseUnit:selectedInsulinModelValues:unselectedInsulinModelValues:glucoseDisplayRange:),InsulinModelChartView.init(chartManager:glucoseUnit:selectedInsulinModelValues:unselectedInsulinModelValues:glucoseDisplayRange:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelChartView.swift
InsulinModelChart.init(),InsulinModelChart.init() in LoopKit/LoopKitUI/Charts/InsulinModelChart.swift
ChartContainerView.init(frame:),ChartContainerView.init(frame:) in LoopKit/LoopKitUI/Views/ChartContainerView.swift
ChartContainerView.init(coder:),ChartContainerView.init(coder:) in LoopKit/LoopKitUI/Views/ChartContainerView.swift
CarbRatioInformationView.init(onExit:mode:),CarbRatioInformationView.init(onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/CarbRatioInformationView.swift
CardStack.init(cards:spacing:),CardStack.init(cards:spacing:) in LoopKit/LoopKitUI/Views/CardList/CardStack.swift
RoundedCorners.init(radius:corners:),RoundedCorners.init(radius:corners:) in LoopKit/LoopKitUI/Views/RoundedCorners.swift
ProgressIndicatorView.init(state:),ProgressIndicatorView.init(state:) in LoopKit/LoopKitUI/Views/ProgressIndicatorView.swift
ProgressIndicatorView_Previews.init(),ProgressIndicatorView_Previews.init() in LoopKit/LoopKitUI/Views/ProgressIndicatorView.swift
ProgressPreviewWrapper.init(),ProgressPreviewWrapper.init() in LoopKit/LoopKitUI/Views/ProgressIndicatorView.swift
ProgressPreviewWrapper.init(setupState:),ProgressPreviewWrapper.init(setupState:) in LoopKit/LoopKitUI/Views/ProgressIndicatorView.swift
DateAndDurationTableViewCell.init(style:reuseIdentifier:),DateAndDurationTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/DateAndDurationTableViewCell.swift
DateAndDurationTableViewCell.init(coder:),DateAndDurationTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/DateAndDurationTableViewCell.swift
ActionButtonStyle.init(_:),ActionButtonStyle.init(_:) in LoopKit/LoopKitUI/Views/ActionButtonStyle.swift
AppNameKey.init(),AppNameKey.init() in LoopKit/LoopKitUI/Extensions/Environment+AppName.swift
DatePickerRow.init(date:isFocused:minimumDate:maximumDate:),DatePickerRow.init(date:isFocused:minimumDate:maximumDate:) in LoopKit/LoopKitUI/CarbKit/DatePickerRow.swift
CustomOverrideCollectionViewCell.init(frame:),CustomOverrideCollectionViewCell.init(frame:) in LoopKit/LoopKitUI/Views/CustomOverrideCollectionViewCell.swift
CustomOverrideCollectionViewCell.init(coder:),CustomOverrideCollectionViewCell.init(coder:) in LoopKit/LoopKitUI/Views/CustomOverrideCollectionViewCell.swift
ListButtonStyle.init(),ListButtonStyle.init() in LoopKit/LoopKitUI/Views/ListButtonStyle.swift
FoodTypeRow.init(foodType:absorptionTime:selectedDefaultAbsorptionTimeEmoji:usesCustomFoodType:absorptionTimeWasEdited:isFocused:defaultAbsorptionTimes:),FoodTypeRow.init(foodType:absorptionTime:selectedDefaultAbsorptionTimeEmoji:usesCustomFoodType:absorptionTimeWasEdited:isFocused:defaultAbsorptionTimes:) in LoopKit/LoopKitUI/CarbKit/FoodTypeRow.swift
DecimalTextFieldTableViewCell.init(style:reuseIdentifier:),DecimalTextFieldTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/DecimalTextFieldTableViewCell.swift
DecimalTextFieldTableViewCell.init(coder:),DecimalTextFieldTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/DecimalTextFieldTableViewCell.swift
EmojiInputCell.init(frame:),EmojiInputCell.init(frame:) in LoopKit/LoopKitUI/Views/EmojiInputCell.swift
EmojiInputCell.init(coder:),EmojiInputCell.init(coder:) in LoopKit/LoopKitUI/Views/EmojiInputCell.swift
ConfigurationPage<ActionAreaContent>.init(title:actionButtonTitle:actionButtonState:cardListStyle:actionAreaContent:action:),ConfigurationPage.init(title:actionButtonTitle:actionButtonState:cardListStyle:actionAreaContent:action:) in LoopKit/LoopKitUI/Views/ConfigurationPage.swift
CardListSection.init(title:cards:),CardListSection.init(title:cards:) in LoopKit/LoopKitUI/Views/CardList/CardList.swift
ConfigurationPage_Previews.init(),ConfigurationPage_Previews.init() in LoopKit/LoopKitUI/Views/ConfigurationPage.swift
CGMManagerDescriptor.init(identifier:localizedTitle:),CGMManagerDescriptor.init(identifier:localizedTitle:) in LoopKit/LoopKitUI/CGMManagerUI.swift
ScheduleEditor<Value, ValueContent, ValuePicker, ActionAreaContent>.init(title:description:scheduleItems:initialScheduleItems:defaultFirstScheduleItemValue:scheduleItemLimit:saveConfirmation:valueContent:valuePicker:actionAreaContent:savingMechanism:mode:therapySettingType:hasUnsupportedValue:),ScheduleEditor.init(title:description:scheduleItems:initialScheduleItems:defaultFirstScheduleItemValue:scheduleItemLimit:saveConfirmation:valueContent:valuePicker:actionAreaContent:savingMechanism:mode:therapySettingType:hasUnsupportedValue:) in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
DarkenedOverlay.init(),DarkenedOverlay.init() in LoopKit/LoopKitUI/Views/ScheduleEditor.swift
WarningView.init(title:caption:severity:),WarningView.init(title:caption:severity:) in LoopKit/LoopKitUI/Views/WarningView.swift
PumpManagerSetupSettings.init(maxBasalRateUnitsPerHour:maxBolusUnits:basalSchedule:),PumpManagerSetupSettings.init(maxBasalRateUnitsPerHour:maxBolusUnits:basalSchedule:) in LoopKit/LoopKitUI/PumpManagerUI.swift
PumpManagerDescriptor.init(identifier:localizedTitle:),PumpManagerDescriptor.init(identifier:localizedTitle:) in LoopKit/LoopKitUI/PumpManagerUI.swift
Self.init(rawState:),OnboardingUI.init(rawState:) in LoopKit/LoopKitUI/OnboardingUI.swift
CorrectionRangeOverrideInformationView.init(preset:onExit:mode:),CorrectionRangeOverrideInformationView.init(preset:onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/CorrectionRangeOverrideInformationView.swift
CorrectionRangeOverrideInformationView_Previews.init(),CorrectionRangeOverrideInformationView_Previews.init() in LoopKit/LoopKitUI/Views/Information Screens/CorrectionRangeOverrideInformationView.swift
ModalHeaderButtonBar<Leading, Center, Trailing>.init(leading:center:trailing:),ModalHeaderButtonBar.init(leading:center:trailing:) in LoopKit/LoopKitUI/Views/ModalHeaderButtonBar.swift
SegmentedControlTableViewCell.init(style:reuseIdentifier:),SegmentedControlTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/SegmentedControlTableViewCell.swift
SegmentedControlTableViewCell.init(coder:),SegmentedControlTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/SegmentedControlTableViewCell.swift
GlucoseValuePickerTester.init(value:unit:),GlucoseValuePickerTester.init(value:unit:) in LoopKit/LoopKitUI/Views/GlucoseValuePicker.swift
GlucoseValuePicker_Previews.init(),GlucoseValuePicker_Previews.init() in LoopKit/LoopKitUI/Views/GlucoseValuePicker.swift
ChartTableViewCell.init(style:reuseIdentifier:),ChartTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
ChartTableViewCell.init(coder:),ChartTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/ChartTableViewCell.swift
OverrideHistoryCollectionViewCell.init(frame:),OverrideHistoryCollectionViewCell.init(frame:) in LoopKit/LoopKitUI/Views/OverrideHistoryCollectionViewCell.swift
OverrideHistoryCollectionViewCell.init(coder:),OverrideHistoryCollectionViewCell.init(coder:) in LoopKit/LoopKitUI/Views/OverrideHistoryCollectionViewCell.swift
OverridePresetCollectionViewCell.init(frame:),OverridePresetCollectionViewCell.init(frame:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
OverridePresetCollectionViewCell.init(coder:),OverridePresetCollectionViewCell.init(coder:) in LoopKit/LoopKitUI/Views/OverridePresetCollectionViewCell.swift
DurationPicker.init(duration:validDurationRange:minuteInterval:),DurationPicker.init(duration:validDurationRange:minuteInterval:) in LoopKit/LoopKitUI/Views/DurationPicker.swift
DurationPicker.Coordinator.init(_:),Coordinator.init(_:) in LoopKit/LoopKitUI/Views/DurationPicker.swift
CarbEffectChart.init(),CarbEffectChart.init() in LoopKit/LoopKitUI/Charts/CarbEffectChart.swift
PresentationDismissalKey.init(),PresentationDismissalKey.init() in LoopKit/LoopKitUI/Extensions/Environment+Dismiss.swift
GlucoseRangeOverrideTableViewCell.init(coder:),GlucoseRangeOverrideTableViewCell.init(coder:) in LoopKit/LoopKitUI/Views/GlucoseRangeOverrideTableViewCell.swift
GlucoseRangeOverrideTableViewCell.init(style:reuseIdentifier:),GlucoseRangeOverrideTableViewCell.init(style:reuseIdentifier:) in LoopKit/LoopKitUI/Views/GlucoseRangeOverrideTableViewCell.swift
OverrideSelectionViewController.init(collectionViewLayout:),OverrideSelectionViewController.init(collectionViewLayout:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
OverrideSelectionViewController.init(nibName:bundle:),OverrideSelectionViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
OverrideSelectionViewController.init(coder:),OverrideSelectionViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/OverrideSelectionViewController.swift
Deletable<Content>.init(tableDeletionState:index:isDeletable:onDelete:content:),Deletable.init(tableDeletionState:index:isDeletable:onDelete:content:) in LoopKit/LoopKitUI/Views/Deletable.swift
DeletionIndicator.init(),DeletionIndicator.init() in LoopKit/LoopKitUI/Views/Deletable.swift
InsulinSensitivityInformationView.init(onExit:mode:),InsulinSensitivityInformationView.init(onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/InsulinSensitivityInformationView.swift
TextFieldRow.init(text:isFocused:title:placeholder:),TextFieldRow.init(text:isFocused:title:placeholder:) in LoopKit/LoopKitUI/CarbKit/TextFieldRow.swift
TherapySettingsView.init(mode:viewModel:actionButton:),TherapySettingsView.init(mode:viewModel:actionButton:) in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
TherapySettingsView.ActionButton.init(localizedString:action:),ActionButton.init(localizedString:action:) in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
ScheduleRangeItem.init(time:range:unit:guardrail:),ScheduleRangeItem.init(time:range:unit:guardrail:) in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
ScheduleValueItem.init(time:value:unit:guardrail:),ScheduleValueItem.init(time:value:unit:guardrail:) in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
CorrectionRangeOverridesRangeItem.init(value:displayGlucoseUnit:preset:suspendThreshold:correctionRangeScheduleRange:),CorrectionRangeOverridesRangeItem.init(value:displayGlucoseUnit:preset:suspendThreshold:correctionRangeScheduleRange:) in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
SectionWithTapToEdit<Content, NavigationDestination>.init(isEnabled:title:descriptiveText:destination:content:),SectionWithTapToEdit.init(isEnabled:title:descriptiveText:destination:content:) in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
TherapySettingsView_Previews.init(),TherapySettingsView_Previews.init() in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
SectionDivider.init(),SectionDivider.init() in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
SectionDivider.init(),SectionDivider.init() in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelSelection.swift
SectionDivider.init(),SectionDivider.init() in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
SectionDivider.init(),SectionDivider.init() in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelSelection.swift
SettingsDivider.init(),SettingsDivider.init() in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
Disclosure.init(),Disclosure.init() in LoopKit/LoopKitUI/Views/Settings Editors/TherapySettingsView.swift
InsulinModelSelection.init(value:insulinSensitivitySchedule:chartColors:onSave:mode:),InsulinModelSelection.init(value:insulinSensitivitySchedule:chartColors:onSave:mode:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelSelection.swift
InsulinModelSelection.init(mode:therapySettingsViewModel:chartColors:didSave:),InsulinModelSelection.init(mode:therapySettingsViewModel:chartColors:didSave:) in LoopKit/LoopKitUI/Views/Settings Editors/InsulinModelSelection.swift
ProgressView.init(progress:),ProgressView.init(progress:) in LoopKit/LoopKitUI/Views/ProgressView.swift
ProgressTestView.init(),ProgressTestView.init() in LoopKit/LoopKitUI/Views/ProgressView.swift
ProgressTestView.init(showDetail:madeProgress:),ProgressTestView.init(showDetail:madeProgress:) in LoopKit/LoopKitUI/Views/ProgressView.swift
ProgressView_Previews.init(),ProgressView_Previews.init() in LoopKit/LoopKitUI/Views/ProgressView.swift
ProgressView_Previews.init(showDetail:),ProgressView_Previews.init(showDetail:) in LoopKit/LoopKitUI/Views/ProgressView.swift
LabeledDateView.init(label:date:dateFormatter:),LabeledDateView.init(label:date:dateFormatter:) in LoopKit/LoopKitUI/Views/LabeledDateView.swift
LabeledDateView_Previews.init(),LabeledDateView_Previews.init() in LoopKit/LoopKitUI/Views/LabeledDateView.swift
OverrideEmojiDataSource.init(),OverrideEmojiDataSource.init() in LoopKit/LoopKitUI/OverrideEmojiDataSource.swift
AbsorptionTimePickerRow.init(absorptionTime:isFocused:validDurationRange:minuteStride:showHowAbsorptionTimeWorks:),AbsorptionTimePickerRow.init(absorptionTime:isFocused:validDurationRange:minuteStride:showHowAbsorptionTimeWorks:) in LoopKit/LoopKitUI/CarbKit/AbsorptionTimePickerRow.swift
IOBChart.init(),IOBChart.init() in LoopKit/LoopKitUI/Charts/IOBChart.swift
CardStackBuilder.init(),CardStackBuilder.init() in LoopKit/LoopKitUI/Views/CardList/CardStackBuilder.swift
ExpandableDatePicker.init(with:pickerRange:placeholderText:),ExpandableDatePicker.init(with:pickerRange:placeholderText:) in LoopKit/LoopKitUI/Views/ExpandableDatePicker.swift
VideoView.init(url:autoPlay:overrideMuteSwitch:isActive:),VideoView.init(url:autoPlay:overrideMuteSwitch:isActive:) in LoopKit/LoopKitUI/Views/VideoView.swift
VideoView.PlayerHolder.init(overrideMuteSwitch:),PlayerHolder.init(overrideMuteSwitch:) in LoopKit/LoopKitUI/Views/VideoView.swift
VideoView_Previews.init(),VideoView_Previews.init() in LoopKit/LoopKitUI/Views/VideoView.swift
VideoPlayView<ThumbnailContent>.init(url:thumbnail:includeThumbnailBorder:centerThumbnail:),VideoPlayView.init(url:thumbnail:includeThumbnailBorder:centerThumbnail:) in LoopKit/LoopKitUI/Views/VideoPlayView.swift
VideoPlayView<ThumbnailContent>.init(url:thumbnail:hasBeenPlayed:includeThumbnailBorder:centerThumbnail:),VideoPlayView.init(url:thumbnail:hasBeenPlayed:includeThumbnailBorder:centerThumbnail:) in LoopKit/LoopKitUI/Views/VideoPlayView.swift
VideoPlayView<ThumbnailContent>.init(_:url:thumbnail:hasBeenPlayed:autoPlay:overrideMuteSwitch:includeThumbnailBorder:centerThumbnail:),VideoPlayView.init(_:url:thumbnail:hasBeenPlayed:autoPlay:overrideMuteSwitch:includeThumbnailBorder:centerThumbnail:) in LoopKit/LoopKitUI/Views/VideoPlayView.swift
SegmentedGaugeBar.init(insulinNeedsScaler:startColor:endColor:),SegmentedGaugeBar.init(insulinNeedsScaler:startColor:endColor:) in LoopKit/LoopKitUI/Views/SegmentedGaugeBar.swift
TableViewTitleLabel.init(frame:),TableViewTitleLabel.init(frame:) in LoopKit/LoopKitUI/Views/TableViewTitleLabel.swift
TableViewTitleLabel.init(coder:),TableViewTitleLabel.init(coder:) in LoopKit/LoopKitUI/Views/TableViewTitleLabel.swift
SettingsNavigationViewController.init(navigationBarClass:toolbarClass:),SettingsNavigationViewController.init(navigationBarClass:toolbarClass:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
SettingsNavigationViewController.init(rootViewController:),SettingsNavigationViewController.init(rootViewController:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
SettingsNavigationViewController.init(nibName:bundle:),SettingsNavigationViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
SettingsNavigationViewController.init(coder:),SettingsNavigationViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
CGMManagerSettingsNavigationViewController.init(navigationBarClass:toolbarClass:),CGMManagerSettingsNavigationViewController.init(navigationBarClass:toolbarClass:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
CGMManagerSettingsNavigationViewController.init(rootViewController:),CGMManagerSettingsNavigationViewController.init(rootViewController:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
CGMManagerSettingsNavigationViewController.init(nibName:bundle:),CGMManagerSettingsNavigationViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
CGMManagerSettingsNavigationViewController.init(coder:),CGMManagerSettingsNavigationViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
PumpManagerSettingsNavigationViewController.init(navigationBarClass:toolbarClass:),PumpManagerSettingsNavigationViewController.init(navigationBarClass:toolbarClass:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
PumpManagerSettingsNavigationViewController.init(rootViewController:),PumpManagerSettingsNavigationViewController.init(rootViewController:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
PumpManagerSettingsNavigationViewController.init(nibName:bundle:),PumpManagerSettingsNavigationViewController.init(nibName:bundle:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
PumpManagerSettingsNavigationViewController.init(coder:),PumpManagerSettingsNavigationViewController.init(coder:) in LoopKit/LoopKitUI/View Controllers/SettingsNavigationViewController.swift
RowTextField.init(text:isFocused:maxLength:configuration:),RowTextField.init(text:isFocused:maxLength:configuration:) in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
RowTextField.Coordinator.init(text:isFocused:maxLength:),Coordinator.init(text:isFocused:maxLength:) in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
RowTextField.Coordinator.init(),Coordinator.init() in LoopKit/LoopKitUI/CarbKit/RowTextfield.swift
DescriptiveText.init(label:color:),DescriptiveText.init(label:color:) in LoopKit/LoopKitUI/Views/DescriptiveText.swift
DescriptiveText_Previews.init(),DescriptiveText_Previews.init() in LoopKit/LoopKitUI/Views/DescriptiveText.swift
DeliveryLimitsInformationView.init(onExit:mode:),DeliveryLimitsInformationView.init(onExit:mode:) in LoopKit/LoopKitUI/Views/Information Screens/DeliveryLimitsInformationView.swift
DismissibleKeyboardTextField.init(text:placeholder:font:textColor:textAlignment:keyboardType:autocapitalizationType:autocorrectionType:shouldBecomeFirstResponder:maxLength:doneButtonColor:isDismissible:textFieldDidBeginEditing:),DismissibleKeyboardTextField.init(text:placeholder:font:textColor:textAlignment:keyboardType:autocapitalizationType:autocorrectionType:shouldBecomeFirstResponder:maxLength:doneButtonColor:isDismissible:textFieldDidBeginEditing:) in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
DismissibleKeyboardTextField.Coordinator.init(_:maxLength:),Coordinator.init(_:maxLength:) in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
DismissibleKeyboardTextField.Coordinator.init(),Coordinator.init() in LoopKit/LoopKitUI/Views/DismissibleKeyboardTextField.swift
PickerValueBoundsKey.init(),PickerValueBoundsKey.init() in LoopKit/LoopKitUI/Views/QuantityPicker.swift
QuantityPicker.init(value:unit:guardrail:formatter:isUnitLabelVisible:guidanceColors:),QuantityPicker.init(value:unit:guardrail:formatter:isUnitLabelVisible:guidanceColors:) in LoopKit/LoopKitUI/Views/QuantityPicker.swift
QuantityPicker.init(value:unit:guardrail:selectableValues:formatter:isUnitLabelVisible:guidanceColors:),QuantityPicker.init(value:unit:guardrail:selectableValues:formatter:isUnitLabelVisible:guidanceColors:) in LoopKit/LoopKitUI/Views/QuantityPicker.swift
QuantityPicker.init(value:unit:selectableValues:formatter:isUnitLabelVisible:colorForValue:),QuantityPicker.init(value:unit:selectableValues:formatter:isUnitLabelVisible:colorForValue:) in LoopKit/LoopKitUI/Views/QuantityPicker.swift
CheckmarkListItem.init(title:titleFont:description:isSelected:isEnabled:),CheckmarkListItem.init(title:titleFont:description:isSelected:isEnabled:) in LoopKit/LoopKitUI/Views/CheckmarkListItem.swift
DurationBasedCheckmarkListItem.init(title:titleFont:description:isSelected:isEnabled:duration:validDurationRange:),DurationBasedCheckmarkListItem.init(title:titleFont:description:isSelected:isEnabled:duration:validDurationRange:) in LoopKit/LoopKitUI/Views/CheckmarkListItem.swift
GuideNavigationButton<Destination>.init(navigationLinkIsActive:label:buttonPressedAction:buttonStyle:destination:),GuideNavigationButton.init(navigationLinkIsActive:label:buttonPressedAction:buttonStyle:destination:) in LoopKit/LoopKitUI/Views/GuideNavigationButton.swift
CardList<Trailer>.init(title:style:trailer:),CardList.init(title:style:trailer:) in LoopKit/LoopKitUI/Views/CardList/CardList.swift
CardList<EmptyView>.init(title:style:),CardList.init(title:style:) in LoopKit/LoopKitUI/Views/CardList/CardList.swift
SettingDescription<InformationalContent>.init(text:informationalContent:),SettingDescription.init(text:informationalContent:) in LoopKit/LoopKitUI/Views/SettingDescription.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopOnboarding/Common/LocalizedString.swift
AppleHealthAuthView.init(),AppleHealthAuthView.init() in LoopOnboarding/LoopOnboardingKitUI/Views/AppleHealthAuthView.swift
AppleHealthAuthView.init(authorizeHealthStore:),AppleHealthAuthView.init(authorizeHealthStore:) in LoopOnboarding/LoopOnboardingKitUI/Views/AppleHealthAuthView.swift
ImportSettingsView.init(settingsDate:didFinish:),ImportSettingsView.init(settingsDate:didFinish:) in LoopOnboarding/LoopOnboardingKitUI/Views/ImportSettingsView.swift
ImportSettingsView_Previews.init(),ImportSettingsView_Previews.init() in LoopOnboarding/LoopOnboardingKitUI/Views/ImportSettingsView.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopOnboarding/LoopOnboardingKitUI/Extensions/Image.swift
OnboardingUICoordinator.init(onboarding:onboardingProvider:initialTherapySettings:displayGlucosePreference:colorPalette:),OnboardingUICoordinator.init(onboarding:onboardingProvider:initialTherapySettings:displayGlucosePreference:colorPalette:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
OnboardingUICoordinator.init(coder:),OnboardingUICoordinator.init(coder:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
OnboardingUICoordinator.init(navigationBarClass:toolbarClass:),OnboardingUICoordinator.init(navigationBarClass:toolbarClass:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
OnboardingUICoordinator.init(rootViewController:),OnboardingUICoordinator.init(rootViewController:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
OnboardingUICoordinator.init(nibName:bundle:),OnboardingUICoordinator.init(nibName:bundle:) in LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
LoopOnboardingUI.init(),LoopOnboardingUI.init() in LoopOnboarding/LoopOnboardingKitUI/LoopOnboardingUI.swift
LoopOnboardingUI.init(rawState:),LoopOnboardingUI.init(rawState:) in LoopOnboarding/LoopOnboardingKitUI/LoopOnboardingUI.swift
WelcomeView.init(),WelcomeView.init() in LoopOnboarding/LoopOnboardingKitUI/Views/WelcomeView.swift
WelcomeView.init(didContinue:didLongPressOnLogo:),WelcomeView.init(didContinue:didLongPressOnLogo:) in LoopOnboarding/LoopOnboardingKitUI/Views/WelcomeView.swift
WelcomeView_Previews.init(),WelcomeView_Previews.init() in LoopOnboarding/LoopOnboardingKitUI/Views/WelcomeView.swift
OnboardingChooserView.init(),OnboardingChooserView.init() in LoopOnboarding/LoopOnboardingKitUI/Views/OnboardingChooserView.swift
OnboardingChooserView.init(setupWithNightscout:setupWithoutNightscout:),OnboardingChooserView.init(setupWithNightscout:setupWithoutNightscout:) in LoopOnboarding/LoopOnboardingKitUI/Views/OnboardingChooserView.swift
OnboardingChooserView_Previews.init(),OnboardingChooserView_Previews.init() in LoopOnboarding/LoopOnboardingKitUI/Views/OnboardingChooserView.swift
UsageDataPrivacyPreferenceMenuItem.init(),UsageDataPrivacyPreferenceMenuItem.init() in LoopSupport/LoopSupportKitUI/Views/UsageDataPrivacyPreferenceMenuItem.swift
UsageDataPrivacyPreferenceView.init(preference:onboardingMode:didChoosePreference:didFinish:),UsageDataPrivacyPreferenceView.init(preference:onboardingMode:didChoosePreference:didFinish:) in LoopSupport/LoopSupportKitUI/Views/UsageDataPrivacyPreferenceView.swift
LoopKitAnalytics.init(),LoopKitAnalytics.init() in LoopSupport/LoopSupportKitUI/LoopKitAnalytics.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopSupport/Common/LocalizedString.swift
LoopSupportUI.init(rawState:),LoopSupportUI.init(rawState:) in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
LoopSupportUI.init(),LoopSupportUI.init() in LoopSupport/LoopSupportKitUI/LoopSupportUI.swift
DeviceAction.init(managerIdentifier:details:),DeviceAction.init(managerIdentifier:details:) in LoopKit/LoopTestingKit/DeviceAction.swift
DateRelativeBolusEntry.init(unitsValue:dateOffset:deliveryDuration:),DateRelativeBolusEntry.init(unitsValue:dateOffset:deliveryDuration:) in LoopKit/LoopTestingKit/DateRelativeBolusEntry.swift
DateRelativeBasalEntry.init(unitsPerHourValue:dateOffset:duration:),DateRelativeBasalEntry.init(unitsPerHourValue:dateOffset:duration:) in LoopKit/LoopTestingKit/DateRelativeBasalEntry.swift
TestingScenarioInstance.init(pastGlucoseSamples:futureGlucoseSamples:pumpEvents:carbEntries:deviceActions:shouldReloadManager:),TestingScenarioInstance.init(pastGlucoseSamples:futureGlucoseSamples:pumpEvents:carbEntries:deviceActions:shouldReloadManager:) in LoopKit/LoopTestingKit/TestingScenarioInstance.swift
ReloadManager.init(pump:cgm:),ReloadManager.init(pump:cgm:) in LoopKit/LoopTestingKit/TestingScenario.swift
TestingScenario.init(dateRelativeGlucoseSamples:dateRelativeBasalEntries:dateRelativeBolusEntries:dateRelativeCarbEntries:deviceActions:shouldReloadManager:),TestingScenario.init(dateRelativeGlucoseSamples:dateRelativeBasalEntries:dateRelativeBolusEntries:dateRelativeCarbEntries:deviceActions:shouldReloadManager:) in LoopKit/LoopTestingKit/TestingScenario.swift
DateRelativeCarbEntry.init(gramValue:dateOffset:enteredAtOffset:absorptionTime:),DateRelativeCarbEntry.init(gramValue:dateOffset:enteredAtOffset:absorptionTime:) in LoopKit/LoopTestingKit/DateRelativeCarbEntry.swift
DateRelativeGlucoseSample.init(mgdlValue:dateOffset:),DateRelativeGlucoseSample.init(mgdlValue:dateOffset:) in LoopKit/LoopTestingKit/DateRelativeGlucoseSample.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/LoopUI/Common/LocalizedString.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/Loop/Extensions/UIImage.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/LoopUI/Extensions/Image.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/LoopUI/Common/LocalizedString.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/Loop/Extensions/UIImage.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/LoopUI/Extensions/Image.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/LoopUI/Common/LocalizedString.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/Loop/Extensions/UIImage.swift
FrameworkBundle.init(),FrameworkBundle.init() in Loop/LoopUI/Extensions/Image.swift
CGMStatusHUDView.init(frame:),CGMStatusHUDView.init(frame:) in Loop/LoopUI/Views/CGMStatusHUDView.swift
CGMStatusHUDView.init(coder:),CGMStatusHUDView.init(coder:) in Loop/LoopUI/Views/CGMStatusHUDView.swift
DeviceStatusHUDView.init(frame:),DeviceStatusHUDView.init(frame:) in Loop/LoopUI/Views/DeviceStatusHUDView.swift
DeviceStatusHUDView.init(coder:),DeviceStatusHUDView.init(coder:) in Loop/LoopUI/Views/DeviceStatusHUDView.swift
StatusBadgeHUDView.init(frame:),StatusBadgeHUDView.init(frame:) in Loop/LoopUI/Views/StatusBadgeHUDView.swift
StatusBadgeHUDView.init(coder:),StatusBadgeHUDView.init(coder:) in Loop/LoopUI/Views/StatusBadgeHUDView.swift
StatusHighlightHUDView.init(frame:),StatusHighlightHUDView.init(frame:) in Loop/LoopUI/Views/StatusHighlightHUDView.swift
StatusHighlightHUDView.init(coder:),StatusHighlightHUDView.init(coder:) in Loop/LoopUI/Views/StatusHighlightHUDView.swift
GlucoseTrendHUDView.init(frame:),GlucoseTrendHUDView.init(frame:) in Loop/LoopUI/Views/GlucoseTrendHUDView.swift
GlucoseTrendHUDView.init(coder:),GlucoseTrendHUDView.init(coder:) in Loop/LoopUI/Views/GlucoseTrendHUDView.swift
GlucoseValueHUDView.init(frame:),GlucoseValueHUDView.init(frame:) in Loop/LoopUI/Views/GlucoseValueHUDView.swift
GlucoseValueHUDView.init(coder:),GlucoseValueHUDView.init(coder:) in Loop/LoopUI/Views/GlucoseValueHUDView.swift
CGMStatusHUDViewModel.init(staleGlucoseValueHandler:),CGMStatusHUDViewModel.init(staleGlucoseValueHandler:) in Loop/LoopUI/ViewModel/CGMStatusHUDViewModel.swift
HUDView.init(frame:),HUDView.init(frame:) in Loop/LoopUI/Views/HUDView.swift
HUDView.init(coder:),HUDView.init(coder:) in Loop/LoopUI/Views/HUDView.swift
BasalRateHUDView.init(frame:),BasalRateHUDView.init(frame:) in Loop/LoopUI/Views/BasalRateHUDView.swift
BasalRateHUDView.init(coder:),BasalRateHUDView.init(coder:) in Loop/LoopUI/Views/BasalRateHUDView.swift
BasalStateView.init(frame:),BasalStateView.init(frame:) in Loop/LoopUI/Views/BasalStateView.swift
BasalStateView.init(coder:),BasalStateView.init(coder:) in Loop/LoopUI/Views/BasalStateView.swift
GlucoseHUDView.init(frame:),GlucoseHUDView.init(frame:) in Loop/LoopUI/Views/GlucoseHUDView.swift
GlucoseHUDView.init(coder:),GlucoseHUDView.init(coder:) in Loop/LoopUI/Views/GlucoseHUDView.swift
LoopCompletionHUDView.init(frame:),LoopCompletionHUDView.init(frame:) in Loop/LoopUI/Views/LoopCompletionHUDView.swift
LoopCompletionHUDView.init(coder:),LoopCompletionHUDView.init(coder:) in Loop/LoopUI/Views/LoopCompletionHUDView.swift
LoopStateView.init(frame:),LoopStateView.init(frame:) in Loop/LoopUI/Views/LoopStateView.swift
LoopStateView.init(coder:),LoopStateView.init(coder:) in Loop/LoopUI/Views/LoopStateView.swift
StatusBarHUDView.init(frame:),StatusBarHUDView.init(frame:) in Loop/LoopUI/Views/StatusBarHUDView.swift
StatusBarHUDView.init(coder:),StatusBarHUDView.init(coder:) in Loop/LoopUI/Views/StatusBarHUDView.swift
PumpStatusHUDView.init(frame:),PumpStatusHUDView.init(frame:) in Loop/LoopUI/Views/PumpStatusHUDView.swift
PumpStatusHUDView.init(coder:),PumpStatusHUDView.init(coder:) in Loop/LoopUI/Views/PumpStatusHUDView.swift
SelectBasalProfilePumpEvent.init(availableData:pumpModel:),SelectBasalProfilePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/SelectBasalProfilePumpEvent.swift
Self.init(availableData:pumpModel:),PumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/PumpEvent.swift
DailyTotal522PumpEvent.init(availableData:pumpModel:),DailyTotal522PumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/DailyTotal522PumpEvent.swift
SensorDataHighGlucoseEvent.init(availableData:relativeTimestamp:),SensorDataHighGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorDataHighGlucoseEvent.swift
Self.init(availableData:relativeTimestamp:),GlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/GlucoseEvent.swift
PumpState.init(),PumpState.init() in MinimedKit/MinimedKit/PumpManager/PumpState.swift
PumpState.init(timeZone:pumpModel:useMySentry:),PumpState.init(timeZone:pumpModel:useMySentry:) in MinimedKit/MinimedKit/PumpManager/PumpState.swift
PumpState.init(rawValue:),PumpState.init(rawValue:) in MinimedKit/MinimedKit/PumpManager/PumpState.swift
TempBasalPumpEvent.init(availableData:pumpModel:),TempBasalPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/TempBasalPumpEvent.swift
BolusReminderPumpEvent.init(availableData:pumpModel:),BolusReminderPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/BolusReminderPumpEvent.swift
BolusReminderPumpEvent.init(length:rawData:timestamp:),BolusReminderPumpEvent.init(length:rawData:timestamp:) in MinimedKit/MinimedKit/PumpEvents/BolusReminderPumpEvent.swift
JournalEntryInsulinMarkerPumpEvent.init(availableData:pumpModel:),JournalEntryInsulinMarkerPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/JournalEntryInsulinMarkerPumpEvent.swift
ChangeAlarmNotifyModePumpEvent.init(availableData:pumpModel:),ChangeAlarmNotifyModePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeAlarmNotifyModePumpEvent.swift
SuspendPumpEvent.init(availableData:pumpModel:),SuspendPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/SuspendPumpEvent.swift
ChangeBolusWizardSetupPumpEvent.init(availableData:pumpModel:),ChangeBolusWizardSetupPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeBolusWizardSetupPumpEvent.swift
ChangeSensorSetup2PumpEvent.init(availableData:pumpModel:),ChangeSensorSetup2PumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeSensorSetup2PumpEvent.swift
BGReceivedPumpEvent.init(availableData:pumpModel:),BGReceivedPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/BGReceivedPumpEvent.swift
ReconciledDoseMapping.init(startTime:uuid:eventRaw:),ReconciledDoseMapping.init(startTime:uuid:eventRaw:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManagerState.swift
MinimedPumpManagerState.init(isOnboarded:useMySentry:pumpColor:pumpID:pumpModel:pumpFirmwareVersion:pumpRegion:rileyLinkConnectionState:timeZone:suspendState:insulinType:lastTuned:lastValidFrequency:basalSchedule:),MinimedPumpManagerState.init(isOnboarded:useMySentry:pumpColor:pumpID:pumpModel:pumpFirmwareVersion:pumpRegion:rileyLinkConnectionState:timeZone:suspendState:insulinType:lastTuned:lastValidFrequency:basalSchedule:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManagerState.swift
MinimedPumpManagerState.init(rawValue:),MinimedPumpManagerState.init(rawValue:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManagerState.swift
BasalSchedule.init(entries:),BasalSchedule.init(entries:) in MinimedKit/MinimedKit/Messages/Models/BasalSchedule.swift
BasalScheduleEntry.init(index:timeOffset:rate:),BasalScheduleEntry.init(index:timeOffset:rate:) in MinimedKit/MinimedKit/Messages/Models/BasalSchedule.swift
UnfinalizedDose.init(bolusAmount:startTime:duration:insulinType:automatic:isReconciledWithHistory:),UnfinalizedDose.init(bolusAmount:startTime:duration:insulinType:automatic:isReconciledWithHistory:) in MinimedKit/MinimedKit/PumpManager/UnfinalizedDose.swift
UnfinalizedDose.init(tempBasalRate:startTime:duration:insulinType:automatic:isReconciledWithHistory:),UnfinalizedDose.init(tempBasalRate:startTime:duration:insulinType:automatic:isReconciledWithHistory:) in MinimedKit/MinimedKit/PumpManager/UnfinalizedDose.swift
UnfinalizedDose.init(suspendStartTime:isReconciledWithHistory:),UnfinalizedDose.init(suspendStartTime:isReconciledWithHistory:) in MinimedKit/MinimedKit/PumpManager/UnfinalizedDose.swift
UnfinalizedDose.init(resumeStartTime:insulinType:isReconciledWithHistory:),UnfinalizedDose.init(resumeStartTime:insulinType:isReconciledWithHistory:) in MinimedKit/MinimedKit/PumpManager/UnfinalizedDose.swift
UnfinalizedDose.init(rawValue:),UnfinalizedDose.init(rawValue:) in MinimedKit/MinimedKit/PumpManager/UnfinalizedDose.swift
PumpSettings.init(rawValue:),PumpSettings.init(rawValue:) in MinimedKit/MinimedKit/PumpManager/PumpSettings.swift
PumpSettings.init(pumpID:pumpRegion:),PumpSettings.init(pumpID:pumpRegion:) in MinimedKit/MinimedKit/PumpManager/PumpSettings.swift
ReservoirReading.init(units:validAt:),ReservoirReading.init(units:validAt:) in MinimedKit/MinimedKit/PumpManager/ReservoirReading.swift
ReservoirReading.init(rawValue:),ReservoirReading.init(rawValue:) in MinimedKit/MinimedKit/PumpManager/ReservoirReading.swift
SuspendState.init(rawValue:),SuspendState.init(rawValue:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManagerState.swift
PlaceholderPumpEvent.init(availableData:pumpModel:),PlaceholderPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/PlaceholderPumpEvent.swift
BolusCarelinkMessageBody.init(units:insulinBitPackingScale:),BolusCarelinkMessageBody.init(units:insulinBitPackingScale:) in MinimedKit/MinimedKit/Messages/BolusCarelinkMessageBody.swift
BolusCarelinkMessageBody.init(rxData:),BolusCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/BolusCarelinkMessageBody.swift
CarelinkLongMessageBody.init(rxData:),CarelinkLongMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/CarelinkMessageBody.swift
Self.init(rxData:),DecodableMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/MessageBody.swift
AlarmSensorPumpEvent.init(availableData:pumpModel:),AlarmSensorPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/AlarmSensorPumpEvent.swift
ChangeBGReminderEnablePumpEvent.init(availableData:pumpModel:),ChangeBGReminderEnablePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeBGReminderEnablePumpEvent.swift
UnabsorbedInsulinPumpEvent.init(availableData:pumpModel:),UnabsorbedInsulinPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/UnabsorbedInsulinPumpEvent.swift
UnabsorbedInsulinPumpEvent.Record.init(amount:age:),Record.init(amount:age:) in MinimedKit/MinimedKit/PumpEvents/UnabsorbedInsulinPumpEvent.swift
ChangeSensorAlarmSilenceConfigPumpEvent.init(availableData:pumpModel:),ChangeSensorAlarmSilenceConfigPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeSensorAlarmSilenceConfigPumpEvent.swift
AlarmClockReminderPumpEvent.init(availableData:pumpModel:),AlarmClockReminderPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/AlarmClockReminderPumpEvent.swift
MinimedPumpManager.init(state:rileyLinkDeviceProvider:pumpOps:dateGenerator:),MinimedPumpManager.init(state:rileyLinkDeviceProvider:pumpOps:dateGenerator:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
MinimedPumpManager.init(rawState:),MinimedPumpManager.init(rawState:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
MinimedPumpManager.init(rileyLinkDeviceProvider:),MinimedPumpManager.init(rileyLinkDeviceProvider:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManager.swift
MinimedPumpManagerRecents.init(),MinimedPumpManagerRecents.init() in MinimedKit/MinimedKit/PumpManager/MinimedPumpManagerRecents.swift
MinimedPumpManagerRecents.init(suspendEngageState:bolusEngageState:tempBasalEngageState:lastAddedPumpEvents:lastContinuousReservoir:latestPumpStatus:latestPumpStatusFromMySentry:sensorState:),MinimedPumpManagerRecents.init(suspendEngageState:bolusEngageState:tempBasalEngageState:lastAddedPumpEvents:lastContinuousReservoir:latestPumpStatus:latestPumpStatusFromMySentry:sensorState:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpManagerRecents.swift
EnliteSensorDisplayable.init(_:),EnliteSensorDisplayable.init(_:) in MinimedKit/MinimedKit/PumpManager/EnliteSensorDisplayable.swift
EnliteSensorDisplayable.init(_:),EnliteSensorDisplayable.init(_:) in MinimedKit/MinimedKit/PumpManager/EnliteSensorDisplayable.swift
MySentryPumpStatusMessageBody.init(rxData:),MySentryPumpStatusMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/MySentryPumpStatusMessageBody.swift
SensorReading.init(glucose:),SensorReading.init(glucose:) in MinimedKit/MinimedKit/Messages/MySentryPumpStatusMessageBody.swift
GlucoseTrend.init(byte:),GlucoseTrend.init(byte:) in MinimedKit/MinimedKit/Messages/MySentryPumpStatusMessageBody.swift
PumpStatus.init(clock:batteryVolts:batteryStatus:suspended:bolusing:reservoir:model:pumpID:),PumpStatus.init(clock:batteryVolts:batteryStatus:suspended:bolusing:reservoir:model:pumpID:) in MinimedKit/MinimedKit/PumpManager/PumpOpsSession.swift
BatteryStatus.init(statusByte:),BatteryStatus.init(statusByte:) in MinimedKit/MinimedKit/Messages/GetBatteryCarelinkMessageBody.swift
PumpOpsSession.init(settings:pumpState:messageSender:delegate:),PumpOpsSession.init(settings:pumpState:messageSender:delegate:) in MinimedKit/MinimedKit/PumpManager/PumpOpsSession.swift
PumpMessage.init(packetType:address:messageType:messageBody:),PumpMessage.init(packetType:address:messageType:messageBody:) in MinimedKit/MinimedKit/Messages/PumpMessage.swift
PumpMessage.init(rxData:),PumpMessage.init(rxData:) in MinimedKit/MinimedKit/Messages/PumpMessage.swift
SuspendResumeMessageBody.init(state:),SuspendResumeMessageBody.init(state:) in MinimedKit/MinimedKit/Messages/SuspendResumeMessageBody.swift
PowerOnCarelinkMessageBody.init(duration:),PowerOnCarelinkMessageBody.init(duration:) in MinimedKit/MinimedKit/Messages/PowerOnCarelinkMessageBody.swift
ResultDailyTotalPumpEvent.init(availableData:pumpModel:),ResultDailyTotalPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ResultDailyTotalPumpEvent.swift
GetHistoryPageCarelinkMessageBody.init(rxData:),GetHistoryPageCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/GetHistoryPageCarelinkMessageBody.swift
GetHistoryPageCarelinkMessageBody.init(pageNum:),GetHistoryPageCarelinkMessageBody.init(pageNum:) in MinimedKit/MinimedKit/Messages/GetHistoryPageCarelinkMessageBody.swift
TimestampedHistoryEvent.init(pumpEvent:date:),TimestampedHistoryEvent.init(pumpEvent:date:) in MinimedKit/MinimedKit/Messages/Models/TimestampedHistoryEvent.swift
ChangeMaxBasalRateMessageBody.init(maxBasalUnitsPerHour:),ChangeMaxBasalRateMessageBody.init(maxBasalUnitsPerHour:) in MinimedKit/MinimedKit/Messages/ChangeMaxBasalRateMessageBody.swift
ChangeMaxBasalRateMessageBody.init(rxData:),ChangeMaxBasalRateMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ChangeMaxBasalRateMessageBody.swift
NewTimePumpEvent.init(availableData:pumpModel:),NewTimePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/NewTimePumpEvent.swift
SensorErrorGlucoseEvent.init(availableData:relativeTimestamp:),SensorErrorGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorErrorGlucoseEvent.swift
PrimePumpEvent.init(availableData:pumpModel:),PrimePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/PrimePumpEvent.swift
CarelinkShortMessageBody.init(),CarelinkShortMessageBody.init() in MinimedKit/MinimedKit/Messages/CarelinkMessageBody.swift
CarelinkShortMessageBody.init(rxData:),CarelinkShortMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/CarelinkMessageBody.swift
ReadCurrentPageNumberMessageBody.init(rxData:),ReadCurrentPageNumberMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadCurrentPageNumberMessageBody.swift
ChangeBolusScrollStepSizePumpEvent.init(availableData:pumpModel:),ChangeBolusScrollStepSizePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeBolusScrollStepSizePumpEvent.swift
GetPumpModelCarelinkMessageBody.init(rxData:),GetPumpModelCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/GetPumpModelCarelinkMessageBody.swift
DataFrameMessageBody.init(rxData:),DataFrameMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/DataFrameMessageBody.swift
DataFrameMessageBody.init(frameNumber:isLastFrame:contents:),DataFrameMessageBody.init(frameNumber:isLastFrame:contents:) in MinimedKit/MinimedKit/Messages/DataFrameMessageBody.swift
ChangeSensorRateOfChangeAlertSetupPumpEvent.init(availableData:pumpModel:),ChangeSensorRateOfChangeAlertSetupPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeSensorRateOfChangeAlertSetupPumpEvent.swift
ChangeMaxBolusMessageBody.init(pumpModel:maxBolusUnits:),ChangeMaxBolusMessageBody.init(pumpModel:maxBolusUnits:) in MinimedKit/MinimedKit/Messages/ChangeMaxBolusMessageBody.swift
ChangeMaxBolusMessageBody.init(rxData:),ChangeMaxBolusMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ChangeMaxBolusMessageBody.swift
DeviceLinkMessageBody.init(rxData:),DeviceLinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/DeviceLinkMessageBody.swift
EnableBolusWizardPumpEvent.init(availableData:pumpModel:),EnableBolusWizardPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/EnableBolusWizardPumpEvent.swift
SensorCalFactorGlucoseEvent.init(availableData:relativeTimestamp:),SensorCalFactorGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorCalFactorGlucoseEvent.swift
DeleteOtherDeviceIDPumpEvent.init(availableData:pumpModel:),DeleteOtherDeviceIDPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/DeleteOtherDeviceIDPumpEvent.swift
CalBGForGHGlucoseEvent.init(availableData:relativeTimestamp:),CalBGForGHGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/CalBGForGHGlucoseEvent.swift
ChangeTempBasalCarelinkMessageBody.init(unitsPerHour:duration:),ChangeTempBasalCarelinkMessageBody.init(unitsPerHour:duration:) in MinimedKit/MinimedKit/Messages/ChangeTempBasalCarelinkMessageBody.swift
ResumePumpEvent.init(availableData:pumpModel:),ResumePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ResumePumpEvent.swift
ReadTempBasalCarelinkMessageBody.init(rxData:),ReadTempBasalCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadTempBasalCarelinkMessageBody.swift
ReadTempBasalCarelinkMessageBody.init(rxData:),ReadTempBasalCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadTempBasalCarelinkMessageBody.swift
SensorTimestampType.init(code:),SensorTimestampType.init(code:) in MinimedKit/MinimedKit/GlucoseEvents/SensorTimestampGlucoseEvent.swift
SensorTimestampGlucoseEvent.init(availableData:relativeTimestamp:),SensorTimestampGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorTimestampGlucoseEvent.swift
BolusWizardSetupPumpEvent.init(availableData:pumpModel:),BolusWizardSetupPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/BolusWizardSetupPumpEvent.swift
BasalProfileStartPumpEvent.init(availableData:pumpModel:),BasalProfileStartPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/BasalProfileStartPumpEvent.swift
PumpAlarmType.init(rawType:),PumpAlarmType.init(rawType:) in MinimedKit/MinimedKit/PumpEvents/PumpAlarmPumpEvent.swift
PumpAlarmPumpEvent.init(availableData:pumpModel:),PumpAlarmPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/PumpAlarmPumpEvent.swift
GlucoseSensorDataGlucoseEvent.init(availableData:relativeTimestamp:),GlucoseSensorDataGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/GlucoseSensorDataGlucoseEvent.swift
ChangeBGReminderOffsetPumpEvent.init(availableData:pumpModel:),ChangeBGReminderOffsetPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeBGReminderOffsetPumpEvent.swift
BasalProfile.init(rawValue:),BasalProfile.init(rawValue:) in MinimedKit/MinimedKit/Messages/ReadSettingsCarelinkMessageBody.swift
ReadSettingsCarelinkMessageBody.init(rxData:),ReadSettingsCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadSettingsCarelinkMessageBody.swift
DailyTotal515PumpEvent.init(availableData:pumpModel:),DailyTotal515PumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/DailyTotal515PumpEvent.swift
ChangeWatchdogMarriageProfilePumpEvent.init(availableData:pumpModel:),ChangeWatchdogMarriageProfilePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeWatchdogMarriageProfilePumpEvent.swift
DeleteBolusReminderTimePumpEvent.init(availableData:pumpModel:),DeleteBolusReminderTimePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/DeleteBolusReminderTimePumpEvent.swift
ChangeCaptureEventEnablePumpEvent.init(availableData:pumpModel:),ChangeCaptureEventEnablePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeCaptureEventEnablePumpEvent.swift
RestoreMystery55PumpEvent.init(availableData:pumpModel:),RestoreMystery55PumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/RestoreMystery55PumpEvent.swift
UnknownMessageBody.init(rxData:),UnknownMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/UnknownMessageBody.swift
GetPumpFirmwareVersionMessageBody.init(rxData:),GetPumpFirmwareVersionMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/GetPumpFirmwareVersionMessageBody.swift
GetPumpFirmwareVersionMessageBody.init(rxData:),GetPumpFirmwareVersionMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/GetPumpFirmwareVersionMessageBody.swift
RewindPumpEvent.init(availableData:pumpModel:),RewindPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/RewindPumpEvent.swift
BatteryChangeGlucoseEvent.init(availableData:relativeTimestamp:),BatteryChangeGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/BatteryChangeGlucoseEvent.swift
GlucosePage.init(pageData:),GlucosePage.init(pageData:) in MinimedKit/MinimedKit/Messages/Models/GlucosePage.swift
DailyTotal523PumpEvent.init(availableData:pumpModel:),DailyTotal523PumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/DailyTotal523PumpEvent.swift
SensorSyncGlucoseEvent.init(availableData:relativeTimestamp:),SensorSyncGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorSyncGlucoseEvent.swift
ChangeBolusReminderEnablePumpEvent.init(availableData:pumpModel:),ChangeBolusReminderEnablePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeBolusReminderEnablePumpEvent.swift
ChangeMaxBolusPumpEvent.init(availableData:pumpModel:),ChangeMaxBolusPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeMaxBolusPumpEvent.swift
ChangeTempBasalTypePumpEvent.init(availableData:pumpModel:),ChangeTempBasalTypePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeTempBasalTypePumpEvent.swift
ReadOtherDevicesIDsMessageBody.init(rxData:),ReadOtherDevicesIDsMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadOtherDevicesIDsMessageBody.swift
ReadTimeCarelinkMessageBody.init(rxData:),ReadTimeCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadTimeCarelinkMessageBody.swift
ReadTimeCarelinkMessageBody.init(dateComponents:),ReadTimeCarelinkMessageBody.init(dateComponents:) in MinimedKit/MinimedKit/Messages/ReadTimeCarelinkMessageBody.swift
MinimedDoseProgressEstimator.init(dose:pumpModel:reportingQueue:),MinimedDoseProgressEstimator.init(dose:pumpModel:reportingQueue:) in MinimedKit/MinimedKit/PumpManager/MinimedDoseProgressEstimator.swift
MinimedDoseProgressEstimator.init(reportingQueue:),MinimedDoseProgressEstimator.init(reportingQueue:) in MinimedKit/MinimedKit/PumpManager/MinimedDoseProgressEstimator.swift
MySentryAlertMessageBody.init(rxData:),MySentryAlertMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/MySentryAlertMessageBody.swift
DateTimeChangeGlucoseEvent.init(availableData:relativeTimestamp:),DateTimeChangeGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/DateTimeChangeGlucoseEvent.swift
ReadRemoteControlIDsMessageBody.init(rxData:),ReadRemoteControlIDsMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadRemoteControlIDsMessageBody.swift
SensorPacketGlucoseEvent.init(availableData:relativeTimestamp:),SensorPacketGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorPacketGlucoseEvent.swift
ClearAlarmPumpEvent.init(availableData:pumpModel:),ClearAlarmPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ClearAlarmPumpEvent.swift
HistoryPage.init(events:),HistoryPage.init(events:) in MinimedKit/MinimedKit/Messages/Models/HistoryPage.swift
HistoryPage.init(pageData:pumpModel:),HistoryPage.init(pageData:pumpModel:) in MinimedKit/MinimedKit/Messages/Models/HistoryPage.swift
BolusNormalPumpEvent.init(length:rawData:timestamp:unabsorbedInsulinRecord:amount:programmed:unabsorbedInsulinTotal:type:duration:wasRemotelyTriggered:),BolusNormalPumpEvent.init(length:rawData:timestamp:unabsorbedInsulinRecord:amount:programmed:unabsorbedInsulinTotal:type:duration:wasRemotelyTriggered:) in MinimedKit/MinimedKit/PumpEvents/BolusNormalPumpEvent.swift
BolusNormalPumpEvent.init(availableData:pumpModel:),BolusNormalPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/BolusNormalPumpEvent.swift
ReadRemainingInsulinMessageBody.init(rxData:),ReadRemainingInsulinMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadRemainingInsulinMessageBody.swift
ReadRemainingInsulinMessageBody.init(reservoirVolume:insulinBitPackingScale:),ReadRemainingInsulinMessageBody.init(reservoirVolume:insulinBitPackingScale:) in MinimedKit/MinimedKit/Messages/ReadRemainingInsulinMessageBody.swift
ChangeTimeCarelinkMessageBody.init(dateComponents:),ChangeTimeCarelinkMessageBody.init(dateComponents:) in MinimedKit/MinimedKit/Messages/ChangeTimeCarelinkMessageBody.swift
ChangeTimeCarelinkMessageBody.init(rxData:),ChangeTimeCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ChangeTimeCarelinkMessageBody.swift
CalBGForPHPumpEvent.init(availableData:pumpModel:),CalBGForPHPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/CalBGForPHPumpEvent.swift
TempBasalDurationPumpEvent.init(availableData:pumpModel:),TempBasalDurationPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/TempBasalDurationPumpEvent.swift
SensorDataLowGlucoseEvent.init(availableData:relativeTimestamp:),SensorDataLowGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorDataLowGlucoseEvent.swift
UnknownGlucoseEvent.init(availableData:relativeTimestamp:),UnknownGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/UnknownGlucoseEvent.swift
ReadOtherDevicesStatusMessageBody.init(rxData:),ReadOtherDevicesStatusMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadOtherDevicesStatusMessageBody.swift
ChangeBasalProfilePatternPumpEvent.init(availableData:pumpModel:),ChangeBasalProfilePatternPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeBasalProfilePatternPumpEvent.swift
JournalEntryExerciseMarkerPumpEvent.init(availableData:pumpModel:),JournalEntryExerciseMarkerPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/JournalEntryExerciseMarkerPumpEvent.swift
SelectBasalProfileMessageBody.init(newProfile:),SelectBasalProfileMessageBody.init(newProfile:) in MinimedKit/MinimedKit/Messages/SelectBasalProfileMessageBody.swift
SelectBasalProfileMessageBody.init(rxData:),SelectBasalProfileMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/SelectBasalProfileMessageBody.swift
MeterMessage.init(rxData:),MeterMessage.init(rxData:) in MinimedKit/MinimedKit/Messages/MeterMessage.swift
GetGlucosePageMessageBody.init(rxData:),GetGlucosePageMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/GetGlucosePageMessageBody.swift
GetGlucosePageMessageBody.init(pageNum:),GetGlucosePageMessageBody.init(pageNum:) in MinimedKit/MinimedKit/Messages/GetGlucosePageMessageBody.swift
TenSomethingGlucoseEvent.init(availableData:relativeTimestamp:),TenSomethingGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/TenSomethingGlucoseEvent.swift
LocalBundle.init(),LocalBundle.init() in MinimedKit/MinimedKit/LocalisedString.swift
TimestampedGlucoseEvent.init(glucoseEvent:date:),TimestampedGlucoseEvent.init(glucoseEvent:date:) in MinimedKit/MinimedKit/Messages/Models/TimestampedGlucoseEvent.swift
ButtonPressCarelinkMessageBody.init(buttonType:),ButtonPressCarelinkMessageBody.init(buttonType:) in MinimedKit/MinimedKit/Messages/ButtonPressCarelinkMessageBody.swift
ButtonPressCarelinkMessageBody.init(rxData:),ButtonPressCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ButtonPressCarelinkMessageBody.swift
SetRemoteControlEnabledMessageBody.init(enabled:),SetRemoteControlEnabledMessageBody.init(enabled:) in MinimedKit/MinimedKit/Messages/SetRemoteControlEnabledMessageBody.swift
SetRemoteControlEnabledMessageBody.init(rxData:),SetRemoteControlEnabledMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/SetRemoteControlEnabledMessageBody.swift
ChangeTimePumpEvent.init(availableData:pumpModel:),ChangeTimePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeTimePumpEvent.swift
ChangeReservoirWarningTimePumpEvent.init(availableData:pumpModel:),ChangeReservoirWarningTimePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeReservoirWarningTimePumpEvent.swift
MinimedPacket.init(outgoingData:),MinimedPacket.init(outgoingData:) in MinimedKit/MinimedKit/Radio/MinimedPacket.swift
MinimedPacket.init(encodedData:),MinimedPacket.init(encodedData:) in MinimedKit/MinimedKit/Radio/MinimedPacket.swift
ChangeMeterIDPumpEvent.init(availableData:pumpModel:),ChangeMeterIDPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeMeterIDPumpEvent.swift
PumpErrorMessageBody.init(rxData:),PumpErrorMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/PumpErrorMessageBody.swift
MinimedPumpOps.init(pumpSettings:pumpState:delegate:),MinimedPumpOps.init(pumpSettings:pumpState:delegate:) in MinimedKit/MinimedKit/PumpManager/PumpOps.swift
ChangeOtherDeviceIDPumpEvent.init(availableData:pumpModel:),ChangeOtherDeviceIDPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeOtherDeviceIDPumpEvent.swift
SensorStatusGlucoseEvent.init(availableData:relativeTimestamp:),SensorStatusGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorStatusGlucoseEvent.swift
PumpAckMessageBody.init(rxData:),PumpAckMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/PumpAckMessageBody.swift
ReadCurrentGlucosePageMessageBody.init(rxData:),ReadCurrentGlucosePageMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadCurrentGlucosePageMessageBody.swift
ChangeCarbUnitsPumpEvent.init(availableData:pumpModel:),ChangeCarbUnitsPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeCarbUnitsPumpEvent.swift
FindDeviceMessageBody.init(rxData:),FindDeviceMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/FindDeviceMessageBody.swift
MySentryAlertClearedMessageBody.init(rxData:),MySentryAlertClearedMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/MySentryAlertClearedMessageBody.swift
ChangeVariableBolusPumpEvent.init(availableData:pumpModel:),ChangeVariableBolusPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeVariableBolusPumpEvent.swift
MinimedPumpMessageSender.init(commandSession:commsLogger:),MinimedPumpMessageSender.init(commandSession:commsLogger:) in MinimedKit/MinimedKit/PumpManager/MinimedPumpMessageSender.swift
ReadPumpStatusMessageBody.init(rxData:),ReadPumpStatusMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ReadPumpStatusMessageBody.swift
ReadPumpStatusMessageBody.init(bolusing:suspended:),ReadPumpStatusMessageBody.init(bolusing:suspended:) in MinimedKit/MinimedKit/Messages/ReadPumpStatusMessageBody.swift
GetBatteryCarelinkMessageBody.init(rxData:),GetBatteryCarelinkMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/GetBatteryCarelinkMessageBody.swift
GetBatteryCarelinkMessageBody.init(status:volts:),GetBatteryCarelinkMessageBody.init(status:volts:) in MinimedKit/MinimedKit/Messages/GetBatteryCarelinkMessageBody.swift
FrequencyTrial.init(frequency:),FrequencyTrial.init(frequency:) in MinimedKit/MinimedKit/PumpManager/PumpOpsSession.swift
FrequencyScanResults.init(trials:bestFrequency:),FrequencyScanResults.init(trials:bestFrequency:) in MinimedKit/MinimedKit/PumpManager/PumpOpsSession.swift
ChangeAudioBolusPumpEvent.init(availableData:pumpModel:),ChangeAudioBolusPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeAudioBolusPumpEvent.swift
ChangeWatchdogEnablePumpEvent.init(availableData:pumpModel:),ChangeWatchdogEnablePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeWatchdogEnablePumpEvent.swift
BatteryPumpEvent.init(availableData:pumpModel:),BatteryPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/BatteryPumpEvent.swift
ChangeChildBlockEnablePumpEvent.init(availableData:pumpModel:),ChangeChildBlockEnablePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeChildBlockEnablePumpEvent.swift
EnableDisableRemotePumpEvent.init(availableData:pumpModel:),EnableDisableRemotePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/EnableDisableRemotePumpEvent.swift
BolusWizardEstimatePumpEvent.init(availableData:pumpModel:),BolusWizardEstimatePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/BolusWizardEstimatePumpEvent.swift
RestoreMystery54PumpEvent.init(availableData:pumpModel:),RestoreMystery54PumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/RestoreMystery54PumpEvent.swift
JournalEntryPumpLowBatteryPumpEvent.init(availableData:pumpModel:),JournalEntryPumpLowBatteryPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/JournalEntryPumpLowBatteryPumpEvent.swift
SensorCalGlucoseEvent.init(availableData:relativeTimestamp:),SensorCalGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorCalGlucoseEvent.swift
ChangeAlarmClockEnablePumpEvent.init(availableData:pumpModel:),ChangeAlarmClockEnablePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeAlarmClockEnablePumpEvent.swift
MySentryAckMessageBody.init(sequence:watchdogID:responseMessageTypes:),MySentryAckMessageBody.init(sequence:watchdogID:responseMessageTypes:) in MinimedKit/MinimedKit/Messages/MySentryAckMessageBody.swift
MySentryAckMessageBody.init(rxData:),MySentryAckMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/MySentryAckMessageBody.swift
ChangeBasalProfilePumpEvent.init(availableData:pumpModel:),ChangeBasalProfilePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeBasalProfilePumpEvent.swift
UnknownPumpEvent57.init(availableData:pumpModel:),UnknownPumpEvent57.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/UnknownPumpEvent57.swift
ChangeRemoteControlIDMessageBody.init(id:index:),ChangeRemoteControlIDMessageBody.init(id:index:) in MinimedKit/MinimedKit/Messages/ChangeRemoteControlIDMessageBody.swift
ChangeRemoteControlIDMessageBody.init(rxData:),ChangeRemoteControlIDMessageBody.init(rxData:) in MinimedKit/MinimedKit/Messages/ChangeRemoteControlIDMessageBody.swift
ChangeParadigmLinkIDPumpEvent.init(availableData:pumpModel:),ChangeParadigmLinkIDPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeParadigmLinkIDPumpEvent.swift
ChangeBolusReminderTimePumpEvent.init(availableData:pumpModel:),ChangeBolusReminderTimePumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeBolusReminderTimePumpEvent.swift
JournalEntryPumpLowReservoirPumpEvent.init(availableData:pumpModel:),JournalEntryPumpLowReservoirPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/JournalEntryPumpLowReservoirPumpEvent.swift
ChangeTimeFormatPumpEvent.init(availableData:pumpModel:),ChangeTimeFormatPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeTimeFormatPumpEvent.swift
DataEndGlucoseEvent.init(availableData:relativeTimestamp:),DataEndGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/DataEndGlucoseEvent.swift
ChangeMaxBasalPumpEvent.init(availableData:pumpModel:),ChangeMaxBasalPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/ChangeMaxBasalPumpEvent.swift
NineteenSomethingGlucoseEvent.init(availableData:relativeTimestamp:),NineteenSomethingGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/NineteenSomethingGlucoseEvent.swift
JournalEntryMealMarkerPumpEvent.init(availableData:pumpModel:),JournalEntryMealMarkerPumpEvent.init(availableData:pumpModel:) in MinimedKit/MinimedKit/PumpEvents/JournalEntryMealMarkerPumpEvent.swift
SensorWeakSignalGlucoseEvent.init(availableData:relativeTimestamp:),SensorWeakSignalGlucoseEvent.init(availableData:relativeTimestamp:) in MinimedKit/MinimedKit/GlucoseEvents/SensorWeakSignalGlucoseEvent.swift
MinimedPumpSetupCompleteViewController.init(style:),MinimedPumpSetupCompleteViewController.init(style:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSetupCompleteViewController.swift
MinimedPumpSetupCompleteViewController.init(nibName:bundle:),MinimedPumpSetupCompleteViewController.init(nibName:bundle:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSetupCompleteViewController.swift
MinimedPumpSetupCompleteViewController.init(coder:),MinimedPumpSetupCompleteViewController.init(coder:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSetupCompleteViewController.swift
LocalBundle.init(),LocalBundle.init() in MinimedKit/MinimedKitUI/LocalisedString.swift
FrameworkBundle.init(),FrameworkBundle.init() in MinimedKit/MinimedKitUI/Extensions/Image.swift
MinimedHUDProvider.init(pumpManager:bluetoothProvider:colorPalette:allowedInsulinTypes:),MinimedHUDProvider.init(pumpManager:bluetoothProvider:colorPalette:allowedInsulinTypes:) in MinimedKit/MinimedKitUI/MinimedHUDProvider.swift
ReservoirHUDView.init(frame:),ReservoirHUDView.init(frame:) in MinimedKit/MinimedKitUI/Views/ReservoirHUDView.swift
ReservoirHUDView.init(coder:),ReservoirHUDView.init(coder:) in MinimedKit/MinimedKitUI/Views/ReservoirHUDView.swift
MinimedPumpSettingsViewModel.init(pumpManager:),MinimedPumpSettingsViewModel.init(pumpManager:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsViewModel.swift
MinimedUICoordinator.init(pumpManager:colorPalette:pumpManagerSettings:allowDebugFeatures:allowedInsulinTypes:),MinimedUICoordinator.init(pumpManager:colorPalette:pumpManagerSettings:allowDebugFeatures:allowedInsulinTypes:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
MinimedUICoordinator.init(coder:),MinimedUICoordinator.init(coder:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
MinimedUICoordinator.init(navigationBarClass:toolbarClass:),MinimedUICoordinator.init(navigationBarClass:toolbarClass:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
MinimedUICoordinator.init(rootViewController:),MinimedUICoordinator.init(rootViewController:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
MinimedUICoordinator.init(nibName:bundle:),MinimedUICoordinator.init(nibName:bundle:) in MinimedKit/MinimedKitUI/MinimedPumpUICoordinator.swift
UseMySentrySelectionView.init(mySentryConfig:),UseMySentrySelectionView.init(mySentryConfig:) in MinimedKit/MinimedKitUI/Views/UseMySentrySelectionView.swift
MinimedPumpClockSetupViewController.init(style:),MinimedPumpClockSetupViewController.init(style:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpClockSetupViewController.swift
MinimedPumpClockSetupViewController.init(nibName:bundle:),MinimedPumpClockSetupViewController.init(nibName:bundle:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpClockSetupViewController.swift
MinimedPumpClockSetupViewController.init(coder:),MinimedPumpClockSetupViewController.init(coder:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpClockSetupViewController.swift
DataSourceSelectionView.init(batteryType:),DataSourceSelectionView.init(batteryType:) in MinimedKit/MinimedKitUI/Views/DataSourceSelectionView.swift
TimeView.init(timeZone:currentDate:),TimeView.init(timeZone:currentDate:) in MinimedKit/MinimedKitUI/Views/TimeView.swift
TimeView_Previews.init(),TimeView_Previews.init() in MinimedKit/MinimedKitUI/Views/TimeView.swift
MinimedReservoirView.init(filledPercent:fillColor:),MinimedReservoirView.init(filledPercent:fillColor:) in MinimedKit/MinimedKitUI/Views/MinimedReservoirView.swift
MinimedPumpSettingsView.init(viewModel:supportedInsulinTypes:handleRileyLinkSelection:rileyLinkListDataSource:),MinimedPumpSettingsView.init(viewModel:supportedInsulinTypes:handleRileyLinkSelection:rileyLinkListDataSource:) in MinimedKit/MinimedKitUI/Views/MinimedPumpSettingsView.swift
BatteryTypeSelectionView.init(batteryType:),BatteryTypeSelectionView.init(batteryType:) in MinimedKit/MinimedKitUI/Views/BatteryTypeSelectionView.swift
MinimedPumpSentrySetupViewController.init(style:),MinimedPumpSentrySetupViewController.init(style:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
MinimedPumpSentrySetupViewController.init(nibName:bundle:),MinimedPumpSentrySetupViewController.init(nibName:bundle:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
MinimedPumpSentrySetupViewController.init(coder:),MinimedPumpSentrySetupViewController.init(coder:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
PumpMenuItemTableViewCell.init(style:reuseIdentifier:),PumpMenuItemTableViewCell.init(style:reuseIdentifier:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
PumpMenuItemTableViewCell.init(coder:),PumpMenuItemTableViewCell.init(coder:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpSentrySetupViewController.swift
InsulinTypeConfirmation.init(initialValue:supportedInsulinTypes:didConfirm:didCancel:),InsulinTypeConfirmation.init(initialValue:supportedInsulinTypes:didConfirm:didCancel:) in MinimedKit/MinimedKitUI/Views/InsulinTypeConfirmation.swift
InsulinTypeConfirmation_Previews.init(),InsulinTypeConfirmation_Previews.init() in MinimedKit/MinimedKitUI/Views/InsulinTypeConfirmation.swift
MinimedPumpIDSetupViewController.init(style:),MinimedPumpIDSetupViewController.init(style:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
MinimedPumpIDSetupViewController.init(nibName:bundle:),MinimedPumpIDSetupViewController.init(nibName:bundle:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
MinimedPumpIDSetupViewController.init(coder:),MinimedPumpIDSetupViewController.init(coder:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
RegionAndColorPickerTableViewCell.init(style:reuseIdentifier:),RegionAndColorPickerTableViewCell.init(style:reuseIdentifier:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
RegionAndColorPickerTableViewCell.init(coder:),RegionAndColorPickerTableViewCell.init(coder:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpIDSetupViewController.swift
MinimedPumpManagerSetupViewController.init(navigationBarClass:toolbarClass:),MinimedPumpManagerSetupViewController.init(navigationBarClass:toolbarClass:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
MinimedPumpManagerSetupViewController.init(rootViewController:),MinimedPumpManagerSetupViewController.init(rootViewController:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
MinimedPumpManagerSetupViewController.init(nibName:bundle:),MinimedPumpManagerSetupViewController.init(nibName:bundle:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
MinimedPumpManagerSetupViewController.init(coder:),MinimedPumpManagerSetupViewController.init(coder:) in MinimedKit/MinimedKitUI/Setup/MinimedPumpManagerSetupViewController.swift
FrameworkBundle.init(),FrameworkBundle.init() in MixpanelService/Common/LocalizedString.swift
MixpanelService.init(),MixpanelService.init() in MixpanelService/MixpanelServiceKit/MixpanelService.swift
MixpanelService.init(rawState:),MixpanelService.init(rawState:) in MixpanelService/MixpanelServiceKit/MixpanelService.swift
MixpanelServiceTableViewController.init(service:for:),MixpanelServiceTableViewController.init(service:for:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
MixpanelServiceTableViewController.init(coder:),MixpanelServiceTableViewController.init(coder:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
MixpanelServiceTableViewController.init(style:),MixpanelServiceTableViewController.init(style:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
MixpanelServiceTableViewController.init(nibName:bundle:),MixpanelServiceTableViewController.init(nibName:bundle:) in MixpanelService/MixpanelServiceKitUI/MixpanelServiceTableViewController.swift
MockPumpManagerState.init(deliverableIncrements:reservoirUnitsRemaining:tempBasalEnactmentShouldError:bolusEnactmentShouldError:bolusCancelShouldError:deliverySuspensionShouldError:deliveryResumptionShouldError:bolusShouldCrash:tempBasalShouldCrash:deliveryCommandsShouldTriggerUncertainDelivery:replacePumpComponent:maximumBolus:maximumBasalRatePerHour:suspendState:pumpBatteryChargeRemaining:unfinalizedBolus:unfinalizedTempBasal:finalizedDoses:additionalPumpEvents:progressWarningThresholdPercentValue:progressCriticalThresholdPercentValue:insulinType:),MockPumpManagerState.init(deliverableIncrements:reservoirUnitsRemaining:tempBasalEnactmentShouldError:bolusEnactmentShouldError:bolusCancelShouldError:deliverySuspensionShouldError:deliveryResumptionShouldError:bolusShouldCrash:tempBasalShouldCrash:deliveryCommandsShouldTriggerUncertainDelivery:replacePumpComponent:maximumBolus:maximumBasalRatePerHour:suspendState:pumpBatteryChargeRemaining:unfinalizedBolus:unfinalizedTempBasal:finalizedDoses:additionalPumpEvents:progressWarningThresholdPercentValue:progressCriticalThresholdPercentValue:insulinType:) in LoopKit/MockKit/MockPumpManagerState.swift
UnfinalizedDose.init(bolusAmount:startTime:duration:insulinType:automatic:),UnfinalizedDose.init(bolusAmount:startTime:duration:insulinType:automatic:) in LoopKit/MockKit/UnfinalizedDose.swift
UnfinalizedDose.init(tempBasalRate:startTime:duration:insulinType:),UnfinalizedDose.init(tempBasalRate:startTime:duration:insulinType:) in LoopKit/MockKit/UnfinalizedDose.swift
UnfinalizedDose.init(suspendStartTime:automatic:),UnfinalizedDose.init(suspendStartTime:automatic:) in LoopKit/MockKit/UnfinalizedDose.swift
UnfinalizedDose.init(resumeStartTime:insulinType:automatic:),UnfinalizedDose.init(resumeStartTime:insulinType:automatic:) in LoopKit/MockKit/UnfinalizedDose.swift
UnfinalizedDose.init(rawValue:),UnfinalizedDose.init(rawValue:) in LoopKit/MockKit/UnfinalizedDose.swift
SuspendState.init(rawValue:),SuspendState.init(rawValue:) in LoopKit/MockKit/MockPumpManagerState.swift
MockPumpManager.init(),MockPumpManager.init() in LoopKit/MockKit/MockPumpManager.swift
MockPumpManager.init(rawState:),MockPumpManager.init(rawState:) in LoopKit/MockKit/MockPumpManager.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKit/Extensions/UIImage.swift
MockService.init(),MockService.init() in LoopKit/MockKit/MockService.swift
MockService.init(rawState:),MockService.init(rawState:) in LoopKit/MockKit/MockService.swift
MockGlucoseProvider.init(fetchDataAt:),MockGlucoseProvider.init(fetchDataAt:) in LoopKit/MockKit/MockGlucoseProvider.swift
MockGlucoseProvider.BackfillRequest.init(datingBack:dataPointFrequency:),BackfillRequest.init(datingBack:dataPointFrequency:) in LoopKit/MockKit/MockGlucoseProvider.swift
MockCGMDataSource.Effects.init(glucoseNoise:randomLowOutlier:randomHighOutlier:randomErrorChance:),Effects.init(glucoseNoise:randomLowOutlier:randomHighOutlier:randomErrorChance:) in LoopKit/MockKit/MockCGMDataSource.swift
MockCGMDataSource.init(model:effects:dataPointFrequency:),MockCGMDataSource.init(model:effects:dataPointFrequency:) in LoopKit/MockKit/MockCGMDataSource.swift
MockGlucoseProviderError.init(),MockGlucoseProviderError.init() in LoopKit/MockKit/MockGlucoseProvider.swift
MockDoseProgressEstimator.init(reportingQueue:dose:),MockDoseProgressEstimator.init(reportingQueue:dose:) in LoopKit/MockKit/MockDoseProgressEstimator.swift
MockDoseProgressEstimator.init(reportingQueue:),MockDoseProgressEstimator.init(reportingQueue:) in LoopKit/MockKit/MockDoseProgressEstimator.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/MockKit/LocalizedString.swift
MockCGMState.init(isStateValid:glucoseRangeCategory:glucoseAlertingEnabled:samplesShouldBeUploaded:urgentLowGlucoseThresholdValue:lowGlucoseThresholdValue:highGlucoseThresholdValue:cgmLowerLimitValue:cgmUpperLimitValue:cgmStatusHighlight:cgmLifecycleProgress:progressWarningThresholdPercentValue:progressCriticalThresholdPercentValue:),MockCGMState.init(isStateValid:glucoseRangeCategory:glucoseAlertingEnabled:samplesShouldBeUploaded:urgentLowGlucoseThresholdValue:lowGlucoseThresholdValue:highGlucoseThresholdValue:cgmLowerLimitValue:cgmUpperLimitValue:cgmStatusHighlight:cgmLifecycleProgress:progressWarningThresholdPercentValue:progressCriticalThresholdPercentValue:) in LoopKit/MockKit/MockCGMManager.swift
MockCGMLifecycleProgress.init(percentComplete:progressState:),MockCGMLifecycleProgress.init(percentComplete:progressState:) in LoopKit/MockKit/MockCGMManager.swift
MockCGMStatusBadge.init(badgeType:),MockCGMStatusBadge.init(badgeType:) in LoopKit/MockKit/MockCGMManager.swift
MockCGMStatusHighlight.init(localizedMessage:alertIdentifier:),MockCGMStatusHighlight.init(localizedMessage:alertIdentifier:) in LoopKit/MockKit/MockCGMManager.swift
MockCGMManager.init(),MockCGMManager.init() in LoopKit/MockKit/MockCGMManager.swift
MockCGMManager.init(rawState:),MockCGMManager.init(rawState:) in LoopKit/MockKit/MockCGMManager.swift
MockCGMManager.MockAlert.init(sound:identifier:foregroundContent:backgroundContent:interruptionLevel:),MockAlert.init(sound:identifier:foregroundContent:backgroundContent:interruptionLevel:) in LoopKit/MockKit/MockCGMManager.swift
MockHUDProvider.init(pumpManager:allowedInsulinTypes:),MockHUDProvider.init(pumpManager:allowedInsulinTypes:) in LoopKit/MockKitUI/MockHUDProvider.swift
MockHUDProvider.init(),MockHUDProvider.init() in LoopKit/MockKitUI/MockHUDProvider.swift
OpenMockPumpSettingsOnLongPressGesture.init(enabled:minimumDuration:pumpManager:supportedInsulinTypes:),OpenMockPumpSettingsOnLongPressGesture.init(enabled:minimumDuration:pumpManager:supportedInsulinTypes:) in LoopKit/MockKitUI/ViewModifier/OpenMockPumpSettingsOnLongPressGesture.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/Image.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/UIImage.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/Color.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/Image.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/UIImage.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/Color.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/Image.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/UIImage.swift
FrameworkBundle.init(),FrameworkBundle.init() in LoopKit/MockKitUI/Extensions/Color.swift
BoundSwitchTableViewCell.init(style:reuseIdentifier:),BoundSwitchTableViewCell.init(style:reuseIdentifier:) in LoopKit/MockKitUI/Views/BoundSwitchTableViewCell.swift
BoundSwitchTableViewCell.init(coder:),BoundSwitchTableViewCell.init(coder:) in LoopKit/MockKitUI/Views/BoundSwitchTableViewCell.swift
MockSupport.init(),MockSupport.init() in LoopKit/MockKitUI/MockSupport.swift
MockSupport.init(rawState:),MockSupport.init(rawState:) in LoopKit/MockKitUI/MockSupport.swift
SupportMenuItem.init(mockSupport:showActionSheet:),SupportMenuItem.init(mockSupport:showActionSheet:) in LoopKit/MockKitUI/MockSupport.swift
MockServiceTableViewController.init(service:for:),MockServiceTableViewController.init(service:for:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
MockServiceTableViewController.init(coder:),MockServiceTableViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
MockServiceTableViewController.init(style:),MockServiceTableViewController.init(style:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
MockServiceTableViewController.init(nibName:bundle:),MockServiceTableViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
MockServiceHistoryViewController.init(mockService:),MockServiceHistoryViewController.init(mockService:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
MockServiceHistoryViewController.init(coder:),MockServiceHistoryViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
MockServiceHistoryViewController.init(nibName:bundle:),MockServiceHistoryViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
SharedResponse.init(text:title:),SharedResponse.init(text:title:) in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
SharedResponse.init(),SharedResponse.init() in LoopKit/MockKitUI/View Controllers/MockServiceTableViewController.swift
GlucoseTrendTableViewController.init(),GlucoseTrendTableViewController.init() in LoopKit/MockKitUI/View Controllers/GlucoseTrendTableViewController.swift
GlucoseTrendTableViewController.init(style:),GlucoseTrendTableViewController.init(style:) in LoopKit/MockKitUI/View Controllers/GlucoseTrendTableViewController.swift
GlucoseTrendTableViewController.init(nibName:bundle:),GlucoseTrendTableViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/GlucoseTrendTableViewController.swift
GlucoseTrendTableViewController.init(coder:),GlucoseTrendTableViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/GlucoseTrendTableViewController.swift
OpenMockCGMSettingsOnLongPressGesture.init(enabled:minimumDuration:cgmManager:displayGlucosePreference:),OpenMockCGMSettingsOnLongPressGesture.init(enabled:minimumDuration:cgmManager:displayGlucosePreference:) in LoopKit/MockKitUI/ViewModifier/OpenMockCGMSettingsOnLongPressGesture.swift
MockPumpManagerSettingsViewController.init(pumpManager:supportedInsulinTypes:),MockPumpManagerSettingsViewController.init(pumpManager:supportedInsulinTypes:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
MockPumpManagerSettingsViewController.init(coder:),MockPumpManagerSettingsViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
MockPumpManagerSettingsViewController.init(style:),MockPumpManagerSettingsViewController.init(style:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
MockPumpManagerSettingsViewController.init(nibName:bundle:),MockPumpManagerSettingsViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/MockPumpManagerSettingsViewController.swift
SupportedRangeTableViewController.init(minValue:maxValue:stepSize:),SupportedRangeTableViewController.init(minValue:maxValue:stepSize:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
SupportedRangeTableViewController.init(coder:),SupportedRangeTableViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
SupportedRangeTableViewController.init(style:),SupportedRangeTableViewController.init(style:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
SupportedRangeTableViewController.init(nibName:bundle:),SupportedRangeTableViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/SupportedRangeTableViewController.swift
MockCGMManagerSettingsView.init(cgmManager:displayGlucosePreference:appName:allowDebugFeatures:),MockCGMManagerSettingsView.init(cgmManager:displayGlucosePreference:appName:allowDebugFeatures:) in LoopKit/MockKitUI/Views/MockCGMManagerSettingsView.swift
MockCGMManagerSettingsViewModel.init(cgmManager:displayGlucosePreference:),MockCGMManagerSettingsViewModel.init(cgmManager:displayGlucosePreference:) in LoopKit/MockKitUI/ViewModel/MockCGMManagerSettingsViewModel.swift
MockCGMManagerSettingsView_Previews.init(),MockCGMManagerSettingsView_Previews.init() in LoopKit/MockKitUI/Views/MockCGMManagerSettingsView.swift
MockPumpManagerControlsView.init(pumpManager:supportedInsulinTypes:),MockPumpManagerControlsView.init(pumpManager:supportedInsulinTypes:) in LoopKit/MockKitUI/Views/MockPumpManagerControlsView.swift
MockPumpManagerControlsView.Coordinator.init(_:),Coordinator.init(_:) in LoopKit/MockKitUI/Views/MockPumpManagerControlsView.swift
MockPumpManagerControlsView.Coordinator.init(),Coordinator.init() in LoopKit/MockKitUI/Views/MockPumpManagerControlsView.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/MockKitUI/LocalizedString.swift
SineCurveParametersTableViewController.init(glucoseUnit:),SineCurveParametersTableViewController.init(glucoseUnit:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
SineCurveParametersTableViewController.init(coder:),SineCurveParametersTableViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
SineCurveParametersTableViewController.init(style:),SineCurveParametersTableViewController.init(style:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
SineCurveParametersTableViewController.init(nibName:bundle:),SineCurveParametersTableViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/SineCurveParametersTableViewController.swift
MockPumpManagerSettingsViewModel.init(pumpManager:),MockPumpManagerSettingsViewModel.init(pumpManager:) in LoopKit/MockKitUI/ViewModel/MockPumpManagerSettingsViewModel.swift
InsulinStatusView.init(guidanceColors:insulinTintColor:viewModel:),InsulinStatusView.init(guidanceColors:insulinTintColor:viewModel:) in LoopKit/MockKitUI/Views/InsulinStatusView.swift
TimeView.init(timeOffset:timeZone:label:),TimeView.init(timeOffset:timeZone:label:) in LoopKit/MockKitUI/Views/TimeView.swift
TimeView_Previews.init(),TimeView_Previews.init() in LoopKit/MockKitUI/Views/TimeView.swift
RandomOutlierTableViewController.init(glucoseUnit:),RandomOutlierTableViewController.init(glucoseUnit:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
RandomOutlierTableViewController.init(coder:),RandomOutlierTableViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
RandomOutlierTableViewController.init(style:),RandomOutlierTableViewController.init(style:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
RandomOutlierTableViewController.init(nibName:bundle:),RandomOutlierTableViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/RandomOutlierTableViewController.swift
MeasurementFrequencyTableViewController.init(),MeasurementFrequencyTableViewController.init() in LoopKit/MockKitUI/View Controllers/MeasurementFrequencyTableViewController.swift
MeasurementFrequencyTableViewController.init(style:),MeasurementFrequencyTableViewController.init(style:) in LoopKit/MockKitUI/View Controllers/MeasurementFrequencyTableViewController.swift
MeasurementFrequencyTableViewController.init(nibName:bundle:),MeasurementFrequencyTableViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/MeasurementFrequencyTableViewController.swift
MeasurementFrequencyTableViewController.init(coder:),MeasurementFrequencyTableViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/MeasurementFrequencyTableViewController.swift
MockCGMManagerControlsView.init(cgmManager:displayGlucosePreference:),MockCGMManagerControlsView.init(cgmManager:displayGlucosePreference:) in LoopKit/MockKitUI/Views/MockCGMManagerControlsView.swift
MockCGMManagerControlsView.Coordinator.init(_:),Coordinator.init(_:) in LoopKit/MockKitUI/Views/MockCGMManagerControlsView.swift
MockCGMManagerControlsView.Coordinator.init(),Coordinator.init() in LoopKit/MockKitUI/Views/MockCGMManagerControlsView.swift
MockPumpManagerSettingsView.init(pumpManager:supportedInsulinTypes:appName:allowDebugFeatures:),MockPumpManagerSettingsView.init(pumpManager:supportedInsulinTypes:appName:allowDebugFeatures:) in LoopKit/MockKitUI/Views/MockPumpManagerSettingsView.swift
MockPumpManagerSettingsView_Previews.init(),MockPumpManagerSettingsView_Previews.init() in LoopKit/MockKitUI/Views/MockPumpManagerSettingsView.swift
DeliveryUncertaintyRecoveryView.init(appName:uncertaintyStartedAt:recoverCommsTapped:),DeliveryUncertaintyRecoveryView.init(appName:uncertaintyStartedAt:recoverCommsTapped:) in LoopKit/MockKitUI/Views/DeliveryUncertaintyRecoveryView.swift
DeliveryUncertaintyRecoveryView_Previews.init(),DeliveryUncertaintyRecoveryView_Previews.init() in LoopKit/MockKitUI/Views/DeliveryUncertaintyRecoveryView.swift
_DeliveryUncertaintyRecoveryView.init(appName:uncertaintyStartedAt:recoverCommsTapped:dismiss:),_DeliveryUncertaintyRecoveryView.init(appName:uncertaintyStartedAt:recoverCommsTapped:dismiss:) in LoopKit/MockKitUI/Views/DeliveryUncertaintyRecoveryView.swift
DeliveryUncertaintyRecoveryViewController.init(appName:uncertaintyStartedAt:recoverCommsTapped:),DeliveryUncertaintyRecoveryViewController.init(appName:uncertaintyStartedAt:recoverCommsTapped:) in LoopKit/MockKitUI/Views/DeliveryUncertaintyRecoveryView.swift
DeliveryUncertaintyRecoveryViewController.init(coder:),DeliveryUncertaintyRecoveryViewController.init(coder:) in LoopKit/MockKitUI/Views/DeliveryUncertaintyRecoveryView.swift
DeliveryUncertaintyRecoveryViewController.init(rootView:),DeliveryUncertaintyRecoveryViewController.init(rootView:) in LoopKit/MockKitUI/Views/DeliveryUncertaintyRecoveryView.swift
DeliveryUncertaintyRecoveryViewController.init(coder:rootView:),DeliveryUncertaintyRecoveryViewController.init(coder:rootView:) in LoopKit/MockKitUI/Views/DeliveryUncertaintyRecoveryView.swift
MockCGMManagerSettingsViewController.init(cgmManager:displayGlucosePreference:),MockCGMManagerSettingsViewController.init(cgmManager:displayGlucosePreference:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
MockCGMManagerSettingsViewController.init(coder:),MockCGMManagerSettingsViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
MockCGMManagerSettingsViewController.init(style:),MockCGMManagerSettingsViewController.init(style:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
MockCGMManagerSettingsViewController.init(nibName:bundle:),MockCGMManagerSettingsViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/MockCGMManagerSettingsViewController.swift
IssueAlertTableViewController.init(cgmManager:),IssueAlertTableViewController.init(cgmManager:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
IssueAlertTableViewController.init(coder:),IssueAlertTableViewController.init(coder:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
IssueAlertTableViewController.init(style:),IssueAlertTableViewController.init(style:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
IssueAlertTableViewController.init(nibName:bundle:),IssueAlertTableViewController.init(nibName:bundle:) in LoopKit/MockKitUI/View Controllers/IssueAlertTableViewController.swift
NightscoutAPIService.init(url:apiSecret:),NightscoutAPIService.init(url:apiSecret:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPIService.swift
NightscoutFetcher.init(url:apiSecret:),NightscoutFetcher.init(url:apiSecret:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutFetcher.swift
NightscoutRemoteCGM.init(),NightscoutRemoteCGM.init() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutRemoteCGM.swift
NightscoutRemoteCGM.init(rawState:),NightscoutRemoteCGM.init(rawState:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutRemoteCGM.swift
DispatchTimer.init(timeInterval:queue:),DispatchTimer.init(timeInterval:queue:) in NightscoutRemoteCGM/Common/DispatchTimer.swift
NightscoutAPISettingsViewController.init(cgmManager:displayGlucosePreference:),NightscoutAPISettingsViewController.init(cgmManager:displayGlucosePreference:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISettingsViewController.swift
NightscoutAPISettingsViewController.init(coder:),NightscoutAPISettingsViewController.init(coder:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISettingsViewController.swift
NightscoutAPISettingsViewController.init(rootView:),NightscoutAPISettingsViewController.init(rootView:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISettingsViewController.swift
NightscoutAPISettingsViewController.init(coder:rootView:),NightscoutAPISettingsViewController.init(coder:rootView:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISettingsViewController.swift
SettingsView.init(viewModel:),SettingsView.init(viewModel:) in NightscoutRemoteCGM/NightscoutRemoteCGM/SettingsView.swift
SettingsViewModel.init(nightscoutService:),SettingsViewModel.init(nightscoutService:) in NightscoutRemoteCGM/NightscoutRemoteCGM/SettingsView.swift
DisclaimerViewModel.init(),DisclaimerViewModel.init() in NightscoutRemoteCGM/NightscoutRemoteCGM/DisclaimerView.swift
DisclaimerView.init(viewModel:),DisclaimerView.init(viewModel:) in NightscoutRemoteCGM/NightscoutRemoteCGM/DisclaimerView.swift
DislaimerView_Previews.init(),DislaimerView_Previews.init() in NightscoutRemoteCGM/NightscoutRemoteCGM/DisclaimerView.swift
FrameworkBundle.init(),FrameworkBundle.init() in NightscoutRemoteCGM/Common/LocalizedString.swift
KalmanFilter<Type>.init(stateEstimatePrior:errorCovariancePrior:),KalmanFilter.init(stateEstimatePrior:errorCovariancePrior:) in NightscoutRemoteCGM/NightscoutRemoteCGM/KalmanFilter/KalmanFilter.swift
SettingsView_Previews.init(),SettingsView_Previews.init() in NightscoutRemoteCGM/NightscoutRemoteCGM/SettingsView.swift
NightscoutAPISetupViewController.init(),NightscoutAPISetupViewController.init() in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
NightscoutAPISetupViewController.init(coder:),NightscoutAPISetupViewController.init(coder:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
NightscoutAPISetupViewController.init(navigationBarClass:toolbarClass:),NightscoutAPISetupViewController.init(navigationBarClass:toolbarClass:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
NightscoutAPISetupViewController.init(rootViewController:),NightscoutAPISetupViewController.init(rootViewController:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
NightscoutAPISetupViewController.init(nibName:bundle:),NightscoutAPISetupViewController.init(nibName:bundle:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
NightscoutAPIDisclaimerViewController.init(cgmManager:disclaimerViewModel:),NightscoutAPIDisclaimerViewController.init(cgmManager:disclaimerViewModel:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
NightscoutAPIDisclaimerViewController.init(coder:),NightscoutAPIDisclaimerViewController.init(coder:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
NightscoutAPIDisclaimerViewController.init(rootView:),NightscoutAPIDisclaimerViewController.init(rootView:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
NightscoutAPIDisclaimerViewController.init(coder:rootView:),NightscoutAPIDisclaimerViewController.init(coder:rootView:) in NightscoutRemoteCGM/NightscoutRemoteCGM/NightscoutAPISetupViewController.swift
OverrideAction.init(name:durationTime:remoteAddress:),OverrideAction.init(name:durationTime:remoteAddress:) in NightscoutService/NightscoutServiceKit/RemoteCommands/Actions/OverrideAction.swift
BolusRemoteNotification.init(amount:remoteAddress:expiration:sentAt:otp:enteredBy:),BolusRemoteNotification.init(amount:remoteAddress:expiration:sentAt:otp:enteredBy:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/BolusRemoteNotification.swift
CarbAction.init(amountInGrams:absorptionTime:foodType:startDate:),CarbAction.init(amountInGrams:absorptionTime:foodType:startDate:) in NightscoutService/NightscoutServiceKit/RemoteCommands/Actions/CarbAction.swift
BolusAction.init(amountInUnits:),BolusAction.init(amountInUnits:) in NightscoutService/NightscoutServiceKit/RemoteCommands/Actions/BolusAction.swift
OverrideCancelAction.init(remoteAddress:),OverrideCancelAction.init(remoteAddress:) in NightscoutService/NightscoutServiceKit/RemoteCommands/Actions/OverrideCancelAction.swift
NightscoutService.init(),NightscoutService.init() in NightscoutService/NightscoutServiceKit/NightscoutService.swift
NightscoutService.init(rawState:),NightscoutService.init(rawState:) in NightscoutService/NightscoutServiceKit/NightscoutService.swift
RemoteCommandSourceV1.init(otpManager:),RemoteCommandSourceV1.init(otpManager:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/RemoteCommandSourceV1.swift
RecentNotifications.init(),RecentNotifications.init() in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/RemoteCommandSourceV1.swift
RemoteCommandValidator.init(otpManager:),RemoteCommandValidator.init(otpManager:) in NightscoutService/NightscoutServiceKit/RemoteCommands/Validators/RemoteCommandValidator.swift
ObjectIdCache.init(),ObjectIdCache.init() in NightscoutService/NightscoutServiceKit/ObjectIdCache.swift
ObjectIdCache.init(rawValue:),ObjectIdCache.init(rawValue:) in NightscoutService/NightscoutServiceKit/ObjectIdCache.swift
ObjectIDMapping.init(loopSyncIdentifier:nightscoutObjectId:),ObjectIDMapping.init(loopSyncIdentifier:nightscoutObjectId:) in NightscoutService/NightscoutServiceKit/ObjectIdCache.swift
ObjectIDMapping.init(rawValue:),ObjectIDMapping.init(rawValue:) in NightscoutService/NightscoutServiceKit/ObjectIdCache.swift
OTPManager.init(secretStore:nowDateSource:tokenPeriod:maxOTPsToAccept:),OTPManager.init(secretStore:nowDateSource:tokenPeriod:maxOTPsToAccept:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
OTPPeriod.init(startDate:endDate:),OTPPeriod.init(startDate:endDate:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
OTP.init(period:password:),OTP.init(period:password:) in NightscoutService/NightscoutServiceKit/OTPManager.swift
CarbRemoteNotification.init(amount:absorptionInHours:foodType:startDate:remoteAddress:expiration:sentAt:otp:enteredBy:),CarbRemoteNotification.init(amount:absorptionInHours:foodType:startDate:remoteAddress:expiration:sentAt:otp:enteredBy:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/CarbRemoteNotification.swift
OverrideRemoteNotification.init(name:durationInMinutes:remoteAddress:expiration:sentAt:enteredBy:otp:),OverrideRemoteNotification.init(name:durationInMinutes:remoteAddress:expiration:sentAt:enteredBy:otp:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideRemoteNotification.swift
FrameworkBundle.init(),FrameworkBundle.init() in NightscoutService/Common/LocalizedString.swift
OverrideCancelRemoteNotification.init(remoteAddress:expiration:sentAt:cancelOverride:enteredBy:otp:),OverrideCancelRemoteNotification.init(remoteAddress:expiration:sentAt:cancelOverride:enteredBy:otp:) in NightscoutService/NightscoutServiceKit/RemoteCommands/V1/Notifications/OverrideCancelRemoteNotification.swift
ServiceStatusViewModel.init(delegate:),ServiceStatusViewModel.init(delegate:) in NightscoutService/NightscoutServiceKitUI/Models/ServiceStatusViewModel.swift
ServiceStatusView.init(viewModel:otpViewModel:),ServiceStatusView.init(viewModel:otpViewModel:) in NightscoutService/NightscoutServiceKitUI/Views/ServiceStatusView.swift
OTPViewModel.init(otpManager:),OTPViewModel.init(otpManager:) in NightscoutService/NightscoutServiceKitUI/Models/OTPViewModel.swift
ServiceUICoordinator.init(service:colorPalette:),ServiceUICoordinator.init(service:colorPalette:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
ServiceUICoordinator.init(coder:),ServiceUICoordinator.init(coder:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
ServiceUICoordinator.init(navigationBarClass:toolbarClass:),ServiceUICoordinator.init(navigationBarClass:toolbarClass:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
ServiceUICoordinator.init(rootViewController:),ServiceUICoordinator.init(rootViewController:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
ServiceUICoordinator.init(nibName:bundle:),ServiceUICoordinator.init(nibName:bundle:) in NightscoutService/NightscoutServiceKitUI/ViewControllers/ServiceUICoordinator.swift
FrameworkBundle.init(),FrameworkBundle.init() in NightscoutService/NightscoutServiceKitUI/Extensions/Image.swift
CredentialsViewModel.init(service:),CredentialsViewModel.init(service:) in NightscoutService/NightscoutServiceKitUI/Models/CredentialsViewModel.swift
KeyboardObserver.init(center:),KeyboardObserver.init(center:) in NightscoutService/NightscoutServiceKitUI/Models/KeyboardObserver.swift
OTPSelectionView.init(otpViewModel:),OTPSelectionView.init(otpViewModel:) in NightscoutService/NightscoutServiceKitUI/Views/OTPSelectionView.swift
OTPSelectionView_Previews.init(),OTPSelectionView_Previews.init() in NightscoutService/NightscoutServiceKitUI/Views/OTPSelectionView.swift
CredentialsView.init(viewModel:keyboardObserver:url:apiSecret:allowCancel:),CredentialsView.init(viewModel:keyboardObserver:url:apiSecret:allowCancel:) in NightscoutService/NightscoutServiceKitUI/Views/CredentialsView.swift
CredentialsView_Previews.init(),CredentialsView_Previews.init() in NightscoutService/NightscoutServiceKitUI/Views/CredentialsView.swift
FrameworkBundle.init(),FrameworkBundle.init() in OmniBLE/Common/Image.swift
FrameworkBundle.init(),FrameworkBundle.init() in OmniBLE/Common/LocalizedString.swift
FrameworkBundle.init(),FrameworkBundle.init() in OmniBLE/Common/Image.swift
FrameworkBundle.init(),FrameworkBundle.init() in OmniBLE/Common/LocalizedString.swift
StringLengthPrefixEncoding.init(),StringLengthPrefixEncoding.init() in OmniBLE/OmniBLE/Bluetooth/StringLengthPrefixEncoding.swift
AssignAddressCommand.init(encodedData:),AssignAddressCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/AssignAddressCommand.swift
AssignAddressCommand.init(address:),AssignAddressCommand.init(address:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/AssignAddressCommand.swift
Self.init(encodedData:),MessageBlock.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/MessageBlock.swift
SessionKeys.init(ck:nonce:msgSequenceNumber:),SessionKeys.init(ck:nonce:msgSequenceNumber:) in OmniBLE/OmniBLE/Bluetooth/Session/SessionKeys.swift
Nonce.init(prefix:),Nonce.init(prefix:) in OmniBLE/OmniBLE/Bluetooth/EnDecrypt/Nonce.swift
SessionNegotiationResynchronization.init(synchronizedEapSqn:msgSequenceNumber:),SessionNegotiationResynchronization.init(synchronizedEapSqn:msgSequenceNumber:) in OmniBLE/OmniBLE/Bluetooth/Session/SessionKeys.swift
EapSqn.init(data:),EapSqn.init(data:) in OmniBLE/OmniBLE/Bluetooth/Session/EapSqn.swift
EapSqn.init(int:),EapSqn.init(int:) in OmniBLE/OmniBLE/Bluetooth/Session/EapSqn.swift
Ids.init(myId:podId:),Ids.init(myId:podId:) in OmniBLE/OmniBLE/Bluetooth/Ids.swift
Id.init(_:),Id.init(_:) in OmniBLE/OmniBLE/Bluetooth/Id.swift
AttachPodView.init(verticalSizeClass:didConfirmAttachment:didRequestDeactivation:),AttachPodView.init(verticalSizeClass:didConfirmAttachment:didRequestDeactivation:) in OmniBLE/OmniBLE/PumpManagerUI/Views/AttachPodView.swift
AttachPodView_Previews.init(),AttachPodView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/AttachPodView.swift
OmniRandomByteGenerator.init(),OmniRandomByteGenerator.init() in OmniBLE/OmniBLE/Bluetooth/Util/OmniRandomByteGenerator.swift
PeripheralManager.init(),PeripheralManager.init() in OmniBLE/OmniBLE/Bluetooth/PeripheralManager.swift
BluetoothManager.init(),BluetoothManager.init() in OmniBLE/OmniBLE/Bluetooth/BluetoothManager.swift
PodAdvertisement.init(_:),PodAdvertisement.init(_:) in OmniBLE/OmniBLE/PumpManager/PodAdvertisement.swift
OmniBLE.init(peripheralManager:advertisement:),OmniBLE.init(peripheralManager:advertisement:) in OmniBLE/OmniBLE/PumpManager/OmniBLE.swift
OmniBLEHUDProvider.init(pumpManager:bluetoothProvider:colorPalette:allowedInsulinTypes:),OmniBLEHUDProvider.init(pumpManager:bluetoothProvider:colorPalette:allowedInsulinTypes:) in OmniBLE/OmniBLE/PumpManagerUI/OmniBLEHUDProvider.swift
OmniBLEHUDProvider.init(),OmniBLEHUDProvider.init() in OmniBLE/OmniBLE/PumpManagerUI/OmniBLEHUDProvider.swift
OmniBLEReservoirView.init(frame:),OmniBLEReservoirView.init(frame:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLEReservoirView.swift
OmniBLEReservoirView.init(coder:),OmniBLEReservoirView.init(coder:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLEReservoirView.swift
ReservoirLevel.init(rawValue:),ReservoirLevel.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/ReservoirLevel.swift
OmniBLEPumpManager.init(state:dateGenerator:),OmniBLEPumpManager.init(state:dateGenerator:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
OmniBLEPumpManager.init(rawState:),OmniBLEPumpManager.init(rawState:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManager.swift
PodState.init(address:ltk:firmwareVersion:bleFirmwareVersion:lotNo:lotSeq:productId:messageTransportState:bleIdentifier:insulinType:initialDeliveryStatus:),PodState.init(address:ltk:firmwareVersion:bleFirmwareVersion:lotNo:lotSeq:productId:messageTransportState:bleIdentifier:insulinType:initialDeliveryStatus:) in OmniBLE/OmniBLE/PumpManager/PodState.swift
PodState.init(rawValue:),PodState.init(rawValue:) in OmniBLE/OmniBLE/PumpManager/PodState.swift
StatusResponse.init(encodedData:),StatusResponse.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/StatusResponse.swift
StatusResponse.init(deliveryStatus:podProgressStatus:timeActive:reservoirLevel:insulinDelivered:bolusNotDelivered:lastProgrammingMessageSeqNum:alerts:),StatusResponse.init(deliveryStatus:podProgressStatus:timeActive:reservoirLevel:insulinDelivered:bolusNotDelivered:lastProgrammingMessageSeqNum:alerts:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/StatusResponse.swift
StatusResponse.init(detailedStatus:),StatusResponse.init(detailedStatus:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/StatusResponse.swift
PodAlert.init(rawValue:),PodAlert.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/AlertSlot.swift
AlertConfiguration.init(alertType:active:duration:trigger:beepRepeat:beepType:silent:autoOffModifier:),AlertConfiguration.init(alertType:active:duration:trigger:beepRepeat:beepType:silent:autoOffModifier:) in OmniBLE/OmniBLE/OmnipodCommon/AlertSlot.swift
MessageTransportState.init(ck:noncePrefix:eapSeq:msgSeq:nonceSeq:messageNumber:),MessageTransportState.init(ck:noncePrefix:eapSeq:msgSeq:nonceSeq:messageNumber:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
MessageTransportState.init(rawValue:),MessageTransportState.init(rawValue:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
DetailedStatus.init(encodedData:),DetailedStatus.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/DetailedStatus.swift
Self.init(encodedData:),PodInfo.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/PodInfo.swift
ErrorEventInfo.init(rawValue:),ErrorEventInfo.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/DetailedStatus.swift
FaultEventCode.init(rawValue:),FaultEventCode.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/FaultEventCode.swift
SuspendState.init(rawValue:),SuspendState.init(rawValue:) in OmniBLE/OmniBLE/PumpManager/PodState.swift
UnfinalizedDose.init(bolusAmount:startTime:scheduledCertainty:insulinType:automatic:),UnfinalizedDose.init(bolusAmount:startTime:scheduledCertainty:insulinType:automatic:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
UnfinalizedDose.init(tempBasalRate:startTime:duration:isHighTemp:automatic:scheduledCertainty:insulinType:),UnfinalizedDose.init(tempBasalRate:startTime:duration:isHighTemp:automatic:scheduledCertainty:insulinType:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
UnfinalizedDose.init(suspendStartTime:scheduledCertainty:),UnfinalizedDose.init(suspendStartTime:scheduledCertainty:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
UnfinalizedDose.init(resumeStartTime:scheduledCertainty:insulinType:),UnfinalizedDose.init(resumeStartTime:scheduledCertainty:insulinType:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
UnfinalizedDose.init(rawValue:),UnfinalizedDose.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/UnfinalizedDose.swift
PendingCommand.init(rawValue:),PendingCommand.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/PendingCommand.swift
CancelDeliveryCommand.DeliveryType.init(rawValue:),DeliveryType.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/CancelDeliveryCommand.swift
CancelDeliveryCommand.init(encodedData:),CancelDeliveryCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/CancelDeliveryCommand.swift
CancelDeliveryCommand.init(nonce:deliveryType:beepType:),CancelDeliveryCommand.init(nonce:deliveryType:beepType:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/CancelDeliveryCommand.swift
StartProgram.init(rawValue:),StartProgram.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/PendingCommand.swift
BasalSchedule.init(entries:),BasalSchedule.init(entries:) in OmniBLE/OmniBLE/OmnipodCommon/BasalSchedule.swift
BasalSchedule.init(rawValue:),BasalSchedule.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/BasalSchedule.swift
BasalScheduleEntry.init(rate:startTime:),BasalScheduleEntry.init(rate:startTime:) in OmniBLE/OmniBLE/OmnipodCommon/BasalSchedule.swift
BasalScheduleEntry.init(rawValue:),BasalScheduleEntry.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/BasalSchedule.swift
PodInsulinMeasurements.init(insulinDelivered:reservoirLevel:validTime:),PodInsulinMeasurements.init(insulinDelivered:reservoirLevel:validTime:) in OmniBLE/OmniBLE/OmnipodCommon/PodInsulinMeasurements.swift
PodInsulinMeasurements.init(rawValue:),PodInsulinMeasurements.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/PodInsulinMeasurements.swift
AlertSet.init(slots:),AlertSet.init(slots:) in OmniBLE/OmniBLE/OmnipodCommon/AlertSlot.swift
AlertSet.init(rawValue:),AlertSet.init(rawValue:) in OmniBLE/OmniBLE/OmnipodCommon/AlertSlot.swift
PodComms.init(podState:myId:podId:),PodComms.init(podState:myId:podId:) in OmniBLE/OmniBLE/PumpManager/PodComms.swift
PodCommsSession.init(podState:transport:delegate:),PodCommsSession.init(podState:transport:delegate:) in OmniBLE/OmniBLE/PumpManager/PodCommsSession.swift
PodInfoResponse.init(encodedData:),PodInfoResponse.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/PodInfoResponse.swift
VersionResponse.init(encodedData:),VersionResponse.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/VersionResponse.swift
VersionResponse.FirmwareVersion.init(encodedData:),FirmwareVersion.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/VersionResponse.swift
Message.init(address:messageBlocks:sequenceNum:expectFollowOnMessage:),Message.init(address:messageBlocks:sequenceNum:expectFollowOnMessage:) in OmniBLE/OmniBLE/OmnipodCommon/Message.swift
Message.init(encodedData:checkCRC:),Message.init(encodedData:checkCRC:) in OmniBLE/OmniBLE/OmnipodCommon/Message.swift
PodMessageTransport.init(manager:myId:podId:state:),PodMessageTransport.init(manager:myId:podId:state:) in OmniBLE/OmniBLE/PumpManager/MessageTransport.swift
MessagePacket.init(type:source:destination:payload:sequenceNumber:ack:ackNumber:eqos:priority:lastMessage:gateway:sas:tfs:version:),MessagePacket.init(type:source:destination:payload:sequenceNumber:ack:ackNumber:eqos:priority:lastMessage:gateway:sas:tfs:version:) in OmniBLE/OmniBLE/Bluetooth/MessagePacket.swift
EnDecrypt.init(nonce:ck:),EnDecrypt.init(nonce:ck:) in OmniBLE/OmniBLE/Bluetooth/EnDecrypt/EnDecrypt.swift
OmniBLEPumpManagerState.init(podState:timeZone:basalSchedule:controllerId:podId:insulinType:maximumTempBasalRate:),OmniBLEPumpManagerState.init(podState:timeZone:basalSchedule:controllerId:podId:insulinType:maximumTempBasalRate:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManagerState.swift
OmniBLEPumpManagerState.init(rawValue:),OmniBLEPumpManagerState.init(rawValue:) in OmniBLE/OmniBLE/PumpManager/OmniBLEPumpManagerState.swift
EapAkaAttribute.init(),EapAkaAttribute.init() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeRand.init(payload:),EapAkaAttributeRand.init(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeRand.init(),EapAkaAttributeRand.init() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeAutn.init(payload:),EapAkaAttributeAutn.init(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeAutn.init(),EapAkaAttributeAutn.init() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeAuts.init(payload:),EapAkaAttributeAuts.init(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeAuts.init(),EapAkaAttributeAuts.init() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeRes.init(payload:),EapAkaAttributeRes.init(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeRes.init(),EapAkaAttributeRes.init() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeCustomIV.init(payload:),EapAkaAttributeCustomIV.init(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeCustomIV.init(),EapAkaAttributeCustomIV.init() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeClientErrorCode.init(payload:),EapAkaAttributeClientErrorCode.init(payload:) in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
EapAkaAttributeClientErrorCode.init(),EapAkaAttributeClientErrorCode.init() in OmniBLE/OmniBLE/Bluetooth/Session/EapAkaAttribute.swift
ExpirationReminderPickerView.init(expirationReminderDefault:collapsible:showingHourPicker:expirationDefaultFormatter:),ExpirationReminderPickerView.init(expirationReminderDefault:collapsible:showingHourPicker:expirationDefaultFormatter:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ExpirationReminderPickerView.swift
ExpirationReminderPickerView_Previews.init(),ExpirationReminderPickerView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/ExpirationReminderPickerView.swift
Pod.init(),Pod.init() in OmniBLE/OmniBLE/OmnipodCommon/Pod.swift
ScheduledExpirationReminderEditView.init(scheduledExpirationReminderDate:allowedDates:dateFormatter:onSave:onFinish:),ScheduledExpirationReminderEditView.init(scheduledExpirationReminderDate:allowedDates:dateFormatter:onSave:onFinish:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ScheduledExpirationReminderEditView.swift
ScheduledExpirationReminderEditView_Previews.init(),ScheduledExpirationReminderEditView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/ScheduledExpirationReminderEditView.swift
BasalScheduleExtraCommand.init(encodedData:),BasalScheduleExtraCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/BasalScheduleExtraCommand.swift
BasalScheduleExtraCommand.init(currentEntryIndex:remainingPulses:delayUntilNextTenthOfPulse:rateEntries:acknowledgementBeep:completionBeep:programReminderInterval:),BasalScheduleExtraCommand.init(currentEntryIndex:remainingPulses:delayUntilNextTenthOfPulse:rateEntries:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/BasalScheduleExtraCommand.swift
BasalScheduleExtraCommand.init(schedule:scheduleOffset:acknowledgementBeep:completionBeep:programReminderInterval:),BasalScheduleExtraCommand.init(schedule:scheduleOffset:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/BasalScheduleExtraCommand.swift
RateEntry.init(totalPulses:delayBetweenPulses:),RateEntry.init(totalPulses:delayBetweenPulses:) in OmniBLE/OmniBLE/OmnipodCommon/BasalDeliveryTable.swift
KeyExchange.init(_:_:),KeyExchange.init(_:_:) in OmniBLE/OmniBLE/Bluetooth/Pair/KeyExchange.swift
ErrorView.init(_:errorClass:),ErrorView.init(_:errorClass:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/ErrorView.swift
ErrorView_Previews.init(),ErrorView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/ErrorView.swift
Milenage.init(k:sqn:randParam:auts:amf:),Milenage.init(k:sqn:randParam:auts:amf:) in OmniBLE/OmniBLE/Bluetooth/Session/Milenage.swift
SetInsulinScheduleCommand.init(encodedData:),SetInsulinScheduleCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
SetInsulinScheduleCommand.init(nonce:deliverySchedule:),SetInsulinScheduleCommand.init(nonce:deliverySchedule:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
SetInsulinScheduleCommand.init(nonce:tempBasalRate:duration:),SetInsulinScheduleCommand.init(nonce:tempBasalRate:duration:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
SetInsulinScheduleCommand.init(nonce:basalSchedule:scheduleOffset:),SetInsulinScheduleCommand.init(nonce:basalSchedule:scheduleOffset:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
SetInsulinScheduleCommand.init(nonce:units:timeBetweenPulses:extendedUnits:extendedDuration:),SetInsulinScheduleCommand.init(nonce:units:timeBetweenPulses:extendedUnits:extendedDuration:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
BolusDeliveryTable.init(entries:),BolusDeliveryTable.init(entries:) in OmniBLE/OmniBLE/OmnipodCommon/BolusDeliveryTable.swift
BolusDeliveryTable.init(units:extendedUnits:extendedDuration:),BolusDeliveryTable.init(units:extendedUnits:extendedDuration:) in OmniBLE/OmniBLE/OmnipodCommon/BolusDeliveryTable.swift
InsulinTableEntry.init(encodedData:),InsulinTableEntry.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/InsulinTableEntry.swift
InsulinTableEntry.init(segments:pulses:alternateSegmentPulse:),InsulinTableEntry.init(segments:pulses:alternateSegmentPulse:) in OmniBLE/OmniBLE/OmnipodCommon/InsulinTableEntry.swift
BasalDeliveryTable.init(entries:),BasalDeliveryTable.init(entries:) in OmniBLE/OmniBLE/OmnipodCommon/BasalDeliveryTable.swift
BasalDeliveryTable.init(schedule:),BasalDeliveryTable.init(schedule:) in OmniBLE/OmniBLE/OmnipodCommon/BasalDeliveryTable.swift
BasalDeliveryTable.init(tempBasalRate:duration:),BasalDeliveryTable.init(tempBasalRate:duration:) in OmniBLE/OmniBLE/OmnipodCommon/BasalDeliveryTable.swift
PlayTestBeepsView.init(horizontalSizeClass:presentationMode:playTestBeeps:),PlayTestBeepsView.init(horizontalSizeClass:presentationMode:playTestBeeps:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PlayTestBeepsView.swift
PlayTestBeepsView_Previews.init(),PlayTestBeepsView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/PlayTestBeepsView.swift
PodDiagnosticsView.init(title:diagnosticCommands:podOk:noPod:),PodDiagnosticsView.init(title:diagnosticCommands:podOk:noPod:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDiagnosticsView.swift
NotificationSettingsView.init(dateFormatter:expirationReminderDefault:scheduledReminderDate:allowedScheduledReminderDates:lowReservoirReminderValue:onSaveScheduledExpirationReminder:onSaveLowReservoirReminder:insulinQuantityFormatter:),NotificationSettingsView.init(dateFormatter:expirationReminderDefault:scheduledReminderDate:allowedScheduledReminderDates:lowReservoirReminderValue:onSaveScheduledExpirationReminder:onSaveLowReservoirReminder:insulinQuantityFormatter:) in OmniBLE/OmniBLE/PumpManagerUI/Views/NotificationSettingsView.swift
NotificationSettingsView_Previews.init(),NotificationSettingsView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/NotificationSettingsView.swift
PlaceholderMessageBlock.init(encodedData:),PlaceholderMessageBlock.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/PlaceholderMessageBlock.swift
PodDoseProgressEstimator.init(dose:pumpManager:reportingQueue:),PodDoseProgressEstimator.init(dose:pumpManager:reportingQueue:) in OmniBLE/OmniBLE/OmnipodCommon/PodDoseProgressEstimator.swift
PodDoseProgressEstimator.init(reportingQueue:),PodDoseProgressEstimator.init(reportingQueue:) in OmniBLE/OmniBLE/OmnipodCommon/PodDoseProgressEstimator.swift
TempBasalExtraCommand.init(encodedData:),TempBasalExtraCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/TempBasalExtraCommand.swift
TempBasalExtraCommand.init(rate:duration:acknowledgementBeep:completionBeep:programReminderInterval:),TempBasalExtraCommand.init(rate:duration:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/TempBasalExtraCommand.swift
PairPodView.init(viewModel:),PairPodView.init(viewModel:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PairPodView.swift
PairPodViewModel.init(podPairer:),PairPodViewModel.init(podPairer:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/PairPodViewModel.swift
BolusExtraCommand.init(encodedData:),BolusExtraCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/BolusExtraCommand.swift
BolusExtraCommand.init(units:timeBetweenPulses:extendedUnits:extendedDuration:acknowledgementBeep:completionBeep:programReminderInterval:),BolusExtraCommand.init(units:timeBetweenPulses:extendedUnits:extendedDuration:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/BolusExtraCommand.swift
PodInfoTriggeredAlerts.init(encodedData:),PodInfoTriggeredAlerts.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/PodInfoTriggeredAlerts.swift
LeadingImage.init(_:),LeadingImage.init(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/LeadingImage.swift
LeadingImage_Previews.init(),LeadingImage_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/LeadingImage.swift
GetStatusCommand.init(podInfoType:),GetStatusCommand.init(podInfoType:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/GetStatusCommand.swift
GetStatusCommand.init(encodedData:),GetStatusCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/GetStatusCommand.swift
ReadPodInfoView.init(horizontalSizeClass:presentationMode:title:actionString:failedString:action:),ReadPodInfoView.init(horizontalSizeClass:presentationMode:title:actionString:failedString:action:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ReadPodInfoView.swift
ReadPodInfoView_Previews.init(),ReadPodInfoView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/ReadPodInfoView.swift
LowReservoirReminderEditView.init(lowReservoirReminderValue:insulinQuantityFormatter:onSave:onFinish:),LowReservoirReminderEditView.init(lowReservoirReminderValue:insulinQuantityFormatter:onSave:onFinish:) in OmniBLE/OmniBLE/PumpManagerUI/Views/LowReservoirReminderEditView.swift
LowReservoirReminderEditView_Previews.init(),LowReservoirReminderEditView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/LowReservoirReminderEditView.swift
PodInfoPulseLogRecent.init(encodedData:),PodInfoPulseLogRecent.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/PodInfoPulseLog.swift
PodInfoPulseLogPrevious.init(encodedData:),PodInfoPulseLogPrevious.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/PodInfoPulseLog.swift
TimeView.init(timeZone:currentDate:),TimeView.init(timeZone:currentDate:) in OmniBLE/OmniBLE/PumpManagerUI/Views/TimeView.swift
TimeView_Previews.init(),TimeView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/TimeView.swift
DeactivatePodCommand.init(encodedData:),DeactivatePodCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/DeactivatePodCommand.swift
DeactivatePodCommand.init(nonce:),DeactivatePodCommand.init(nonce:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/DeactivatePodCommand.swift
ErrorResponse.init(encodedData:),ErrorResponse.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/ErrorResponse.swift
CheckInsertedCannulaView.init(didRequestDeactivation:wasInsertedProperly:),CheckInsertedCannulaView.init(didRequestDeactivation:wasInsertedProperly:) in OmniBLE/OmniBLE/PumpManagerUI/Views/CheckInsertedCannulaView.swift
CheckInsertedCannulaView_Previews.init(),CheckInsertedCannulaView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/CheckInsertedCannulaView.swift
X25519KeyGenerator.init(),X25519KeyGenerator.init() in OmniBLE/OmniBLE/Bluetooth/Util/X25519KeyGenerator.swift
InsertCannulaViewModel.init(cannulaInserter:),InsertCannulaViewModel.init(cannulaInserter:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/InsertCannulaViewModel.swift
ExpirationReminderSetupView.init(),ExpirationReminderSetupView.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/ExpirationReminderSetupView.swift
ExpirationReminderSetupView.init(expirationReminderDefault:valueChanged:continueButtonTapped:cancelButtonTapped:),ExpirationReminderSetupView.init(expirationReminderDefault:valueChanged:continueButtonTapped:cancelButtonTapped:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ExpirationReminderSetupView.swift
ExpirationReminderSetupView_Previews.init(),ExpirationReminderSetupView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/ExpirationReminderSetupView.swift
SessionEstablisher.init(manager:ltk:eapSqn:myId:podId:msgSeq:),SessionEstablisher.init(manager:ltk:eapSqn:myId:podId:msgSeq:) in OmniBLE/OmniBLE/Bluetooth/Session/SessionEstablisher.swift
EapMessage.init(code:identifier:subType:attributes:),EapMessage.init(code:identifier:subType:attributes:) in OmniBLE/OmniBLE/Bluetooth/Session/EapMessage.swift
PayloadSplitter.init(payload:),PayloadSplitter.init(payload:) in OmniBLE/OmniBLE/Bluetooth/Packet/PayloadSplitter.swift
BeepPreferenceSelectionView.init(initialValue:onSave:),BeepPreferenceSelectionView.init(initialValue:onSave:) in OmniBLE/OmniBLE/PumpManagerUI/Views/BeepPreferenceSelectionView.swift
BeepPreferenceSelectionView_Previews.init(),BeepPreferenceSelectionView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/BeepPreferenceSelectionView.swift
PodInfoActivationTime.init(encodedData:),PodInfoActivationTime.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/PodInfoActivationTime.swift
SilencePodSelectionView.init(initialValue:onSave:),SilencePodSelectionView.init(initialValue:onSave:) in OmniBLE/OmniBLE/PumpManagerUI/Views/SilencePodSelectionView.swift
SilencePodSelectionView_Previews.init(),SilencePodSelectionView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/SilencePodSelectionView.swift
DeliveryUncertaintyRecoveryView.init(model:),DeliveryUncertaintyRecoveryView.init(model:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DeliveryUncertaintyRecoveryView.swift
DeliveryUncertaintyRecoveryViewModel.init(appName:uncertaintyStartedAt:),DeliveryUncertaintyRecoveryViewModel.init(appName:uncertaintyStartedAt:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/DeliveryUncertaintyRecoveryViewModel.swift
DeliveryUncertaintyRecoveryView_Previews.init(),DeliveryUncertaintyRecoveryView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/DeliveryUncertaintyRecoveryView.swift
DashUICoordinator.init(pumpManager:colorPalette:pumpManagerSettings:allowDebugFeatures:allowedInsulinTypes:),DashUICoordinator.init(pumpManager:colorPalette:pumpManagerSettings:allowDebugFeatures:allowedInsulinTypes:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
DashUICoordinator.init(coder:),DashUICoordinator.init(coder:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
DashUICoordinator.init(navigationBarClass:toolbarClass:),DashUICoordinator.init(navigationBarClass:toolbarClass:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
DashUICoordinator.init(rootViewController:),DashUICoordinator.init(rootViewController:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
DashUICoordinator.init(nibName:bundle:),DashUICoordinator.init(nibName:bundle:) in OmniBLE/OmniBLE/PumpManagerUI/ViewControllers/DashUICoordinator.swift
PodInfoPulseLogPlus.init(encodedData:),PodInfoPulseLogPlus.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/PodInfoPulseLogPlus.swift
AcknowledgeAlertCommand.init(nonce:alerts:),AcknowledgeAlertCommand.init(nonce:alerts:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/AcknowledgeAlertCommand.swift
AcknowledgeAlertCommand.init(encodedData:),AcknowledgeAlertCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/AcknowledgeAlertCommand.swift
PodDetails.init(lotNumber:sequenceNumber:firmwareVersion:bleFirmwareVersion:deviceName:totalDelivery:lastStatus:fault:activatedAt:activeTime:pdmRef:),PodDetails.init(lotNumber:sequenceNumber:firmwareVersion:bleFirmwareVersion:deviceName:totalDelivery:lastStatus:fault:activatedAt:activeTime:pdmRef:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDetailsView.swift
PodDetailsView.init(guidanceColors:podDetails:title:),PodDetailsView.init(guidanceColors:podDetails:title:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDetailsView.swift
PodDetailsView_Previews.init(),PodDetailsView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodDetailsView.swift
InsertCannulaView.init(viewModel:verticalSizeClass:),InsertCannulaView.init(viewModel:verticalSizeClass:) in OmniBLE/OmniBLE/PumpManagerUI/Views/InsertCannulaView.swift
MockCannulaInserter.init(),MockCannulaInserter.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/InsertCannulaView.swift
InsertCannulaView_Previews.init(),InsertCannulaView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/InsertCannulaView.swift
FirstBlePacket.init(fullFragments:payload:size:crc32:oneExtraPacket:),FirstBlePacket.init(fullFragments:payload:size:crc32:oneExtraPacket:) in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
MiddleBlePacket.init(index:payload:),MiddleBlePacket.init(index:payload:) in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
LastBlePacket.init(index:size:payload:crc32:oneExtraPacket:),LastBlePacket.init(index:size:payload:crc32:oneExtraPacket:) in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
LastOptionalPlusOneBlePacket.init(index:payload:size:),LastOptionalPlusOneBlePacket.init(index:payload:size:) in OmniBLE/OmniBLE/Bluetooth/Packet/BLEPacket.swift
LTKExchanger.init(manager:ids:),LTKExchanger.init(manager:ids:) in OmniBLE/OmniBLE/Bluetooth/Pair/LTKExchanger.swift
PairResult.init(ltk:address:msgSeq:),PairResult.init(ltk:address:msgSeq:) in OmniBLE/OmniBLE/Bluetooth/Pair/PairResult.swift
DashSettingsNotice.init(title:description:),DashSettingsNotice.init(title:description:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
OmniBLESettingsViewModel.init(pumpManager:),OmniBLESettingsViewModel.init(pumpManager:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/OmniBLESettingsViewModel.swift
FrameworkReferenceClass.init(),FrameworkReferenceClass.init() in OmniBLE/Common/FrameworkLocalText.swift
BasalStateSwiftUIView.init(netBasalPercent:),BasalStateSwiftUIView.init(netBasalPercent:) in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
BasalStateView.init(frame:),BasalStateView.init(frame:) in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
BasalStateView.init(coder:),BasalStateView.init(coder:) in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
BasalStateSwiftUIViewPreviewWrapper.init(),BasalStateSwiftUIViewPreviewWrapper.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
BasalStateSwiftUIViewPreview.init(),BasalStateSwiftUIViewPreview.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/BasalStateView.swift
Flag.init(_:),Flag.init(_:) in OmniBLE/OmniBLE/Bluetooth/MessagePacket.swift
ManualTempBasalEntryView.init(enactBasal:didCancel:allowedRates:),ManualTempBasalEntryView.init(enactBasal:didCancel:allowedRates:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ManualTempBasalEntryView.swift
PodSetupView.init(nextAction:allowDebugFeatures:skipOnboarding:),PodSetupView.init(nextAction:allowDebugFeatures:skipOnboarding:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PodSetupView.swift
PodSetupView.AlertIdentifier.init(id:),AlertIdentifier.init(id:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PodSetupView.swift
PodSetupView_Previews.init(),PodSetupView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/PodSetupView.swift
ConfigureAlertsCommand.init(encodedData:),ConfigureAlertsCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/ConfigureAlertsCommand.swift
ConfigureAlertsCommand.init(nonce:configurations:),ConfigureAlertsCommand.init(nonce:configurations:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/ConfigureAlertsCommand.swift
ReadPodStatusView.init(horizontalSizeClass:presentationMode:getDetailedStatus:),ReadPodStatusView.init(horizontalSizeClass:presentationMode:getDetailedStatus:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ReadPodStatusView.swift
ReadPodStatusView_Previews.init(),ReadPodStatusView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/ReadPodStatusView.swift
PayloadJoiner.init(firstPacket:),PayloadJoiner.init(firstPacket:) in OmniBLE/OmniBLE/Bluetooth/Packet/PayloadJoiner.swift
BeepConfigCommand.init(beepType:basalCompletionBeep:basalIntervalBeep:tempBasalCompletionBeep:tempBasalIntervalBeep:bolusCompletionBeep:bolusIntervalBeep:),BeepConfigCommand.init(beepType:basalCompletionBeep:basalIntervalBeep:tempBasalCompletionBeep:tempBasalIntervalBeep:bolusCompletionBeep:bolusIntervalBeep:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/BeepConfigCommand.swift
BeepConfigCommand.init(encodedData:),BeepConfigCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/BeepConfigCommand.swift
DeactivatePodViewModel.init(podDeactivator:podAttachedToBody:fault:),DeactivatePodViewModel.init(podDeactivator:podAttachedToBody:fault:) in OmniBLE/OmniBLE/PumpManagerUI/ViewModels/DeactivatePodViewModel.swift
DeactivatePodView.init(viewModel:verticalSizeClass:guidanceColors:),DeactivatePodView.init(viewModel:verticalSizeClass:guidanceColors:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DeactivatePodView.swift
PumpManagerDetailsView.init(horizontalSizeClass:presentationMode:getPumpManagerDetails:),PumpManagerDetailsView.init(horizontalSizeClass:presentationMode:getPumpManagerDetails:) in OmniBLE/OmniBLE/PumpManagerUI/Views/PumpManagerDetailsView.swift
PumpManagerDetailsView_Previews.init(),PumpManagerDetailsView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/PumpManagerDetailsView.swift
LowReservoirReminderSetupView.init(lowReservoirReminderValue:valueChanged:continueButtonTapped:cancelButtonTapped:insulinQuantityFormatter:),LowReservoirReminderSetupView.init(lowReservoirReminderValue:valueChanged:continueButtonTapped:cancelButtonTapped:insulinQuantityFormatter:) in OmniBLE/OmniBLE/PumpManagerUI/Views/LowReservoirReminderSetupView.swift
LowReservoirReminderSetupView_Previews.init(),LowReservoirReminderSetupView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/LowReservoirReminderSetupView.swift
RoundedCardTitle.init(_:),RoundedCardTitle.init(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/RoundedCard.swift
RoundedCardFooter.init(_:),RoundedCardFooter.init(_:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/RoundedCard.swift
RoundedCardValueRow.init(label:value:highlightValue:disclosure:),RoundedCardValueRow.init(label:value:highlightValue:disclosure:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/RoundedCard.swift
RoundedCard<Content>.init(title:footer:alignment:content:),RoundedCard.init(title:footer:alignment:content:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/RoundedCard.swift
RoundedCardScrollView<Content>.init(title:content:),RoundedCardScrollView.init(title:content:) in OmniBLE/OmniBLE/PumpManagerUI/Views/DesignElements/RoundedCard.swift
PairMessage.init(sequenceNumber:source:destination:keys:payloads:),PairMessage.init(sequenceNumber:source:destination:keys:payloads:) in OmniBLE/OmniBLE/Bluetooth/Pair/PairMessage.swift
InsulinTypeConfirmation.init(initialValue:supportedInsulinTypes:didConfirm:didCancel:),InsulinTypeConfirmation.init(initialValue:supportedInsulinTypes:didConfirm:didCancel:) in OmniBLE/OmniBLE/PumpManagerUI/Views/InsulinTypeConfirmation.swift
InsulinTypeConfirmation_Previews.init(),InsulinTypeConfirmation_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/InsulinTypeConfirmation.swift
SetupPodCommand.init(encodedData:),SetupPodCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetupPodCommand.swift
SetupPodCommand.init(address:dateComponents:lot:tid:packetTimeoutLimit:),SetupPodCommand.init(address:dateComponents:lot:tid:packetTimeoutLimit:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/SetupPodCommand.swift
UncertaintyRecoveredView.init(appName:didFinish:),UncertaintyRecoveredView.init(appName:didFinish:) in OmniBLE/OmniBLE/PumpManagerUI/Views/UncertaintyRecoveredView.swift
UncertaintyRecoveredView_Previews.init(),UncertaintyRecoveredView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/UncertaintyRecoveredView.swift
OmniBLESettingsView.init(viewModel:supportedInsulinTypes:guidanceColors:insulinTintColor:),OmniBLESettingsView.init(viewModel:supportedInsulinTypes:guidanceColors:insulinTintColor:) in OmniBLE/OmniBLE/PumpManagerUI/Views/OmniBLESettingsView.swift
FaultConfigCommand.init(nonce:tab5Sub16:tab5Sub17:),FaultConfigCommand.init(nonce:tab5Sub16:tab5Sub17:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/FaultConfigCommand.swift
FaultConfigCommand.init(encodedData:),FaultConfigCommand.init(encodedData:) in OmniBLE/OmniBLE/OmnipodCommon/MessageBlocks/FaultConfigCommand.swift
SetupCompleteView.init(scheduledReminderDate:dateFormatter:allowedDates:onSaveScheduledExpirationReminder:didFinish:didRequestDeactivation:),SetupCompleteView.init(scheduledReminderDate:dateFormatter:allowedDates:onSaveScheduledExpirationReminder:didFinish:didRequestDeactivation:) in OmniBLE/OmniBLE/PumpManagerUI/Views/SetupCompleteView.swift
SetupCompleteView_Previews.init(),SetupCompleteView_Previews.init() in OmniBLE/OmniBLE/PumpManagerUI/Views/SetupCompleteView.swift
ActivityView.init(isPresented:activityItems:),ActivityView.init(isPresented:activityItems:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ActivityView.swift
ActivityViewController.init(activityItems:applicationActivities:),ActivityViewController.init(activityItems:applicationActivities:) in OmniBLE/OmniBLE/PumpManagerUI/Views/ActivityView.swift
BasalDeliveryTable.init(entries:),BasalDeliveryTable.init(entries:) in OmniKit/OmniKit/OmnipodCommon/BasalDeliveryTable.swift
BasalDeliveryTable.init(schedule:),BasalDeliveryTable.init(schedule:) in OmniKit/OmniKit/OmnipodCommon/BasalDeliveryTable.swift
BasalDeliveryTable.init(tempBasalRate:duration:),BasalDeliveryTable.init(tempBasalRate:duration:) in OmniKit/OmniKit/OmnipodCommon/BasalDeliveryTable.swift
BasalSchedule.init(entries:),BasalSchedule.init(entries:) in OmniKit/OmniKit/OmnipodCommon/BasalSchedule.swift
BasalSchedule.init(rawValue:),BasalSchedule.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/BasalSchedule.swift
BasalScheduleEntry.init(rate:startTime:),BasalScheduleEntry.init(rate:startTime:) in OmniKit/OmniKit/OmnipodCommon/BasalSchedule.swift
BasalScheduleEntry.init(rawValue:),BasalScheduleEntry.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/BasalSchedule.swift
InsulinTableEntry.init(encodedData:),InsulinTableEntry.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/InsulinTableEntry.swift
InsulinTableEntry.init(segments:pulses:alternateSegmentPulse:),InsulinTableEntry.init(segments:pulses:alternateSegmentPulse:) in OmniKit/OmniKit/OmnipodCommon/InsulinTableEntry.swift
RateEntry.init(totalPulses:delayBetweenPulses:),RateEntry.init(totalPulses:delayBetweenPulses:) in OmniKit/OmniKit/OmnipodCommon/BasalDeliveryTable.swift
AcknowledgeAlertCommand.init(nonce:alerts:),AcknowledgeAlertCommand.init(nonce:alerts:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/AcknowledgeAlertCommand.swift
AcknowledgeAlertCommand.init(encodedData:),AcknowledgeAlertCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/AcknowledgeAlertCommand.swift
Self.init(encodedData:),MessageBlock.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/MessageBlock.swift
AlertSet.init(slots:),AlertSet.init(slots:) in OmniKit/OmniKit/OmnipodCommon/AlertSlot.swift
AlertSet.init(rawValue:),AlertSet.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/AlertSlot.swift
DetailedStatus.init(encodedData:),DetailedStatus.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/DetailedStatus.swift
Self.init(encodedData:),PodInfo.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/PodInfo.swift
ErrorEventInfo.init(rawValue:),ErrorEventInfo.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/DetailedStatus.swift
FaultEventCode.init(rawValue:),FaultEventCode.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/FaultEventCode.swift
AssignAddressCommand.init(encodedData:),AssignAddressCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/AssignAddressCommand.swift
AssignAddressCommand.init(address:),AssignAddressCommand.init(address:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/AssignAddressCommand.swift
PodInfoPulseLogPlus.init(encodedData:),PodInfoPulseLogPlus.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/PodInfoPulseLogPlus.swift
SetInsulinScheduleCommand.init(encodedData:),SetInsulinScheduleCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
SetInsulinScheduleCommand.init(nonce:deliverySchedule:),SetInsulinScheduleCommand.init(nonce:deliverySchedule:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
SetInsulinScheduleCommand.init(nonce:tempBasalRate:duration:),SetInsulinScheduleCommand.init(nonce:tempBasalRate:duration:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
SetInsulinScheduleCommand.init(nonce:basalSchedule:scheduleOffset:),SetInsulinScheduleCommand.init(nonce:basalSchedule:scheduleOffset:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
SetInsulinScheduleCommand.init(nonce:units:timeBetweenPulses:extendedUnits:extendedDuration:),SetInsulinScheduleCommand.init(nonce:units:timeBetweenPulses:extendedUnits:extendedDuration:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetInsulinScheduleCommand.swift
BolusDeliveryTable.init(entries:),BolusDeliveryTable.init(entries:) in OmniKit/OmniKit/OmnipodCommon/BolusDeliveryTable.swift
BolusDeliveryTable.init(units:extendedUnits:extendedDuration:),BolusDeliveryTable.init(units:extendedUnits:extendedDuration:) in OmniKit/OmniKit/OmnipodCommon/BolusDeliveryTable.swift
Pod.init(),Pod.init() in OmniKit/OmniKit/OmnipodCommon/Pod.swift
DeactivatePodCommand.init(encodedData:),DeactivatePodCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/DeactivatePodCommand.swift
DeactivatePodCommand.init(nonce:),DeactivatePodCommand.init(nonce:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/DeactivatePodCommand.swift
VersionResponse.init(encodedData:),VersionResponse.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/VersionResponse.swift
VersionResponse.FirmwareVersion.init(encodedData:),FirmwareVersion.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/VersionResponse.swift
AlertConfiguration.init(alertType:active:duration:trigger:beepRepeat:beepType:silent:autoOffModifier:),AlertConfiguration.init(alertType:active:duration:trigger:beepRepeat:beepType:silent:autoOffModifier:) in OmniKit/OmniKit/OmnipodCommon/AlertSlot.swift
PodAlert.init(rawValue:),PodAlert.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/AlertSlot.swift
OmnipodPumpManagerState.init(isOnboarded:podState:timeZone:basalSchedule:rileyLinkConnectionManagerState:insulinType:maximumTempBasalRate:),OmnipodPumpManagerState.init(isOnboarded:podState:timeZone:basalSchedule:rileyLinkConnectionManagerState:insulinType:maximumTempBasalRate:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManagerState.swift
OmnipodPumpManagerState.init(rawValue:),OmnipodPumpManagerState.init(rawValue:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManagerState.swift
ReservoirLevel.init(rawValue:),ReservoirLevel.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/ReservoirLevel.swift
UnfinalizedDose.init(bolusAmount:startTime:scheduledCertainty:insulinType:automatic:),UnfinalizedDose.init(bolusAmount:startTime:scheduledCertainty:insulinType:automatic:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
UnfinalizedDose.init(tempBasalRate:startTime:duration:isHighTemp:automatic:scheduledCertainty:insulinType:),UnfinalizedDose.init(tempBasalRate:startTime:duration:isHighTemp:automatic:scheduledCertainty:insulinType:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
UnfinalizedDose.init(suspendStartTime:scheduledCertainty:),UnfinalizedDose.init(suspendStartTime:scheduledCertainty:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
UnfinalizedDose.init(resumeStartTime:scheduledCertainty:insulinType:),UnfinalizedDose.init(resumeStartTime:scheduledCertainty:insulinType:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
UnfinalizedDose.init(rawValue:),UnfinalizedDose.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/UnfinalizedDose.swift
PodState.init(address:pmVersion:piVersion:lot:tid:packetNumber:messageNumber:insulinType:initialDeliveryStatus:),PodState.init(address:pmVersion:piVersion:lot:tid:packetNumber:messageNumber:insulinType:initialDeliveryStatus:) in OmniKit/OmniKit/PumpManager/PodState.swift
PodState.init(rawValue:),PodState.init(rawValue:) in OmniKit/OmniKit/PumpManager/PodState.swift
StatusResponse.init(encodedData:),StatusResponse.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/StatusResponse.swift
StatusResponse.init(deliveryStatus:podProgressStatus:timeActive:reservoirLevel:insulinDelivered:bolusNotDelivered:lastProgrammingMessageSeqNum:alerts:),StatusResponse.init(deliveryStatus:podProgressStatus:timeActive:reservoirLevel:insulinDelivered:bolusNotDelivered:lastProgrammingMessageSeqNum:alerts:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/StatusResponse.swift
StatusResponse.init(detailedStatus:),StatusResponse.init(detailedStatus:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/StatusResponse.swift
MessageTransportState.init(packetNumber:messageNumber:),MessageTransportState.init(packetNumber:messageNumber:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
MessageTransportState.init(rawValue:),MessageTransportState.init(rawValue:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
SuspendState.init(rawValue:),SuspendState.init(rawValue:) in OmniKit/OmniKit/PumpManager/PodState.swift
PendingCommand.init(rawValue:),PendingCommand.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/PendingCommand.swift
CancelDeliveryCommand.DeliveryType.init(rawValue:),DeliveryType.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/CancelDeliveryCommand.swift
CancelDeliveryCommand.init(encodedData:),CancelDeliveryCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/CancelDeliveryCommand.swift
CancelDeliveryCommand.init(nonce:deliveryType:beepType:),CancelDeliveryCommand.init(nonce:deliveryType:beepType:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/CancelDeliveryCommand.swift
StartProgram.init(rawValue:),StartProgram.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/PendingCommand.swift
PodInsulinMeasurements.init(insulinDelivered:reservoirLevel:validTime:),PodInsulinMeasurements.init(insulinDelivered:reservoirLevel:validTime:) in OmniKit/OmniKit/OmnipodCommon/PodInsulinMeasurements.swift
PodInsulinMeasurements.init(rawValue:),PodInsulinMeasurements.init(rawValue:) in OmniKit/OmniKit/OmnipodCommon/PodInsulinMeasurements.swift
NonceState.init(lot:tid:seed:),NonceState.init(lot:tid:seed:) in OmniKit/OmniKit/PumpManager/PodState.swift
NonceState.init(rawValue:),NonceState.init(rawValue:) in OmniKit/OmniKit/PumpManager/PodState.swift
BeepConfigCommand.init(beepType:basalCompletionBeep:basalIntervalBeep:tempBasalCompletionBeep:tempBasalIntervalBeep:bolusCompletionBeep:bolusIntervalBeep:),BeepConfigCommand.init(beepType:basalCompletionBeep:basalIntervalBeep:tempBasalCompletionBeep:tempBasalIntervalBeep:bolusCompletionBeep:bolusIntervalBeep:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/BeepConfigCommand.swift
BeepConfigCommand.init(encodedData:),BeepConfigCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/BeepConfigCommand.swift
PodComms.init(podState:),PodComms.init(podState:) in OmniKit/OmniKit/PumpManager/PodComms.swift
PodCommsSession.init(podState:transport:delegate:),PodCommsSession.init(podState:transport:delegate:) in OmniKit/OmniKit/PumpManager/PodCommsSession.swift
PodInfoResponse.init(encodedData:),PodInfoResponse.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/PodInfoResponse.swift
Message.init(address:messageBlocks:sequenceNum:expectFollowOnMessage:),Message.init(address:messageBlocks:sequenceNum:expectFollowOnMessage:) in OmniKit/OmniKit/OmnipodCommon/Message.swift
Message.init(encodedData:checkCRC:),Message.init(encodedData:checkCRC:) in OmniKit/OmniKit/OmnipodCommon/Message.swift
PodMessageTransport.init(session:address:ackAddress:state:),PodMessageTransport.init(session:address:ackAddress:state:) in OmniKit/OmniKit/MessageTransport/MessageTransport.swift
Packet.init(address:packetType:sequenceNum:data:),Packet.init(address:packetType:sequenceNum:data:) in OmniKit/OmniKit/MessageTransport/Packet.swift
Packet.init(encodedData:),Packet.init(encodedData:) in OmniKit/OmniKit/MessageTransport/Packet.swift
PodInfoPulseLogRecent.init(encodedData:),PodInfoPulseLogRecent.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/PodInfoPulseLog.swift
PodInfoPulseLogPrevious.init(encodedData:),PodInfoPulseLogPrevious.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/PodInfoPulseLog.swift
PodInfoTriggeredAlerts.init(encodedData:),PodInfoTriggeredAlerts.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/PodInfoTriggeredAlerts.swift
BasalScheduleExtraCommand.init(encodedData:),BasalScheduleExtraCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/BasalScheduleExtraCommand.swift
BasalScheduleExtraCommand.init(currentEntryIndex:remainingPulses:delayUntilNextTenthOfPulse:rateEntries:acknowledgementBeep:completionBeep:programReminderInterval:),BasalScheduleExtraCommand.init(currentEntryIndex:remainingPulses:delayUntilNextTenthOfPulse:rateEntries:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/BasalScheduleExtraCommand.swift
BasalScheduleExtraCommand.init(schedule:scheduleOffset:acknowledgementBeep:completionBeep:programReminderInterval:),BasalScheduleExtraCommand.init(schedule:scheduleOffset:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/BasalScheduleExtraCommand.swift
FaultConfigCommand.init(nonce:tab5Sub16:tab5Sub17:),FaultConfigCommand.init(nonce:tab5Sub16:tab5Sub17:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/FaultConfigCommand.swift
FaultConfigCommand.init(encodedData:),FaultConfigCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/FaultConfigCommand.swift
PodDoseProgressEstimator.init(dose:pumpManager:reportingQueue:),PodDoseProgressEstimator.init(dose:pumpManager:reportingQueue:) in OmniKit/OmniKit/OmnipodCommon/PodDoseProgressEstimator.swift
PodDoseProgressEstimator.init(reportingQueue:),PodDoseProgressEstimator.init(reportingQueue:) in OmniKit/OmniKit/OmnipodCommon/PodDoseProgressEstimator.swift
ConfigureAlertsCommand.init(encodedData:),ConfigureAlertsCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/ConfigureAlertsCommand.swift
ConfigureAlertsCommand.init(nonce:configurations:),ConfigureAlertsCommand.init(nonce:configurations:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/ConfigureAlertsCommand.swift
PlaceholderMessageBlock.init(encodedData:),PlaceholderMessageBlock.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/PlaceholderMessageBlock.swift
PodInfoActivationTime.init(encodedData:),PodInfoActivationTime.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/PodInfoActivationTime.swift
BolusExtraCommand.init(encodedData:),BolusExtraCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/BolusExtraCommand.swift
BolusExtraCommand.init(units:timeBetweenPulses:extendedUnits:extendedDuration:acknowledgementBeep:completionBeep:programReminderInterval:),BolusExtraCommand.init(units:timeBetweenPulses:extendedUnits:extendedDuration:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/BolusExtraCommand.swift
OmnipodPumpManager.init(state:rileyLinkDeviceProvider:dateGenerator:),OmnipodPumpManager.init(state:rileyLinkDeviceProvider:dateGenerator:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
OmnipodPumpManager.init(rawState:),OmnipodPumpManager.init(rawState:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
OmnipodPumpManager.init(rileyLinkDeviceProvider:),OmnipodPumpManager.init(rileyLinkDeviceProvider:) in OmniKit/OmniKit/PumpManager/OmnipodPumpManager.swift
ErrorResponse.init(encodedData:),ErrorResponse.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/ErrorResponse.swift
LocalBundle.init(),LocalBundle.init() in OmniKit/OmniKit/LocalizedString.swift
SetupPodCommand.init(encodedData:),SetupPodCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetupPodCommand.swift
SetupPodCommand.init(address:dateComponents:lot:tid:packetTimeoutLimit:),SetupPodCommand.init(address:dateComponents:lot:tid:packetTimeoutLimit:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/SetupPodCommand.swift
TempBasalExtraCommand.init(encodedData:),TempBasalExtraCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/TempBasalExtraCommand.swift
TempBasalExtraCommand.init(rate:duration:acknowledgementBeep:completionBeep:programReminderInterval:),TempBasalExtraCommand.init(rate:duration:acknowledgementBeep:completionBeep:programReminderInterval:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/TempBasalExtraCommand.swift
GetStatusCommand.init(podInfoType:),GetStatusCommand.init(podInfoType:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/GetStatusCommand.swift
GetStatusCommand.init(encodedData:),GetStatusCommand.init(encodedData:) in OmniKit/OmniKit/OmnipodCommon/MessageBlocks/GetStatusCommand.swift
BeepPreferenceSelectionView.init(initialValue:onSave:),BeepPreferenceSelectionView.init(initialValue:onSave:) in OmniKit/OmniKitUI/Views/BeepPreferenceSelectionView.swift
BeepPreferenceSelectionView_Previews.init(),BeepPreferenceSelectionView_Previews.init() in OmniKit/OmniKitUI/Views/BeepPreferenceSelectionView.swift
AttachPodView.init(verticalSizeClass:didConfirmAttachment:didRequestDeactivation:),AttachPodView.init(verticalSizeClass:didConfirmAttachment:didRequestDeactivation:) in OmniKit/OmniKitUI/Views/AttachPodView.swift
AttachPodView_Previews.init(),AttachPodView_Previews.init() in OmniKit/OmniKitUI/Views/AttachPodView.swift
DeactivatePodViewModel.init(podDeactivator:podAttachedToBody:fault:),DeactivatePodViewModel.init(podDeactivator:podAttachedToBody:fault:) in OmniKit/OmniKitUI/ViewModels/DeactivatePodViewModel.swift
ExpirationReminderSetupView.init(),ExpirationReminderSetupView.init() in OmniKit/OmniKitUI/Views/ExpirationReminderSetupView.swift
ExpirationReminderSetupView.init(expirationReminderDefault:valueChanged:continueButtonTapped:cancelButtonTapped:),ExpirationReminderSetupView.init(expirationReminderDefault:valueChanged:continueButtonTapped:cancelButtonTapped:) in OmniKit/OmniKitUI/Views/ExpirationReminderSetupView.swift
ExpirationReminderSetupView_Previews.init(),ExpirationReminderSetupView_Previews.init() in OmniKit/OmniKitUI/Views/ExpirationReminderSetupView.swift
ActivityView.init(isPresented:activityItems:),ActivityView.init(isPresented:activityItems:) in OmniKit/OmniKitUI/Views/ActivityView.swift
ActivityViewController.init(activityItems:applicationActivities:),ActivityViewController.init(activityItems:applicationActivities:) in OmniKit/OmniKitUI/Views/ActivityView.swift
OmnipodReservoirView.init(frame:),OmnipodReservoirView.init(frame:) in OmniKit/OmniKitUI/Views/OmnipodReservoirView.swift
OmnipodReservoirView.init(coder:),OmnipodReservoirView.init(coder:) in OmniKit/OmniKitUI/Views/OmnipodReservoirView.swift
LowReservoirReminderEditView.init(lowReservoirReminderValue:insulinQuantityFormatter:onSave:onFinish:),LowReservoirReminderEditView.init(lowReservoirReminderValue:insulinQuantityFormatter:onSave:onFinish:) in OmniKit/OmniKitUI/Views/LowReservoirReminderEditView.swift
LowReservoirReminderEditView_Previews.init(),LowReservoirReminderEditView_Previews.init() in OmniKit/OmniKitUI/Views/LowReservoirReminderEditView.swift
ExpirationReminderPickerView.init(expirationReminderDefault:collapsible:showingHourPicker:expirationDefaultFormatter:),ExpirationReminderPickerView.init(expirationReminderDefault:collapsible:showingHourPicker:expirationDefaultFormatter:) in OmniKit/OmniKitUI/Views/ExpirationReminderPickerView.swift
ExpirationReminderPickerView_Previews.init(),ExpirationReminderPickerView_Previews.init() in OmniKit/OmniKitUI/Views/ExpirationReminderPickerView.swift
InsulinTypeConfirmation.init(initialValue:supportedInsulinTypes:didConfirm:didCancel:),InsulinTypeConfirmation.init(initialValue:supportedInsulinTypes:didConfirm:didCancel:) in OmniKit/OmniKitUI/Views/InsulinTypeConfirmation.swift
InsulinTypeConfirmation_Previews.init(),InsulinTypeConfirmation_Previews.init() in OmniKit/OmniKitUI/Views/InsulinTypeConfirmation.swift
DeliveryUncertaintyRecoveryView.init(model:rileyLinkListDataSource:handleRileyLinkSelection:guidanceColors:decimalFormatter:),DeliveryUncertaintyRecoveryView.init(model:rileyLinkListDataSource:handleRileyLinkSelection:guidanceColors:decimalFormatter:) in OmniKit/OmniKitUI/Views/DeliveryUncertaintyRecoveryView.swift
RileyLinkListDataSource.init(rileyLinkPumpManager:),RileyLinkListDataSource.init(rileyLinkPumpManager:) in OmniKit/OmniKitUI/ViewModels/RileyLinkListDataSource.swift
DeliveryUncertaintyRecoveryViewModel.init(appName:uncertaintyStartedAt:),DeliveryUncertaintyRecoveryViewModel.init(appName:uncertaintyStartedAt:) in OmniKit/OmniKitUI/ViewModels/DeliveryUncertaintyRecoveryViewModel.swift
PumpManagerDetailsView.init(horizontalSizeClass:presentationMode:getPumpManagerDetails:),PumpManagerDetailsView.init(horizontalSizeClass:presentationMode:getPumpManagerDetails:) in OmniKit/OmniKitUI/Views/PumpManagerDetailsView.swift
PumpManagerDetailsView_Previews.init(),PumpManagerDetailsView_Previews.init() in OmniKit/OmniKitUI/Views/PumpManagerDetailsView.swift
UncertaintyRecoveredView.init(appName:didFinish:),UncertaintyRecoveredView.init(appName:didFinish:) in OmniKit/OmniKitUI/Views/UncertaintyRecoveredView.swift
UncertaintyRecoveredView_Previews.init(),UncertaintyRecoveredView_Previews.init() in OmniKit/OmniKitUI/Views/UncertaintyRecoveredView.swift
RileyLinkSetupView.init(dataSource:nextAction:),RileyLinkSetupView.init(dataSource:nextAction:) in OmniKit/OmniKitUI/Views/RileyLinkSetupView.swift
InsertCannulaViewModel.init(cannulaInserter:),InsertCannulaViewModel.init(cannulaInserter:) in OmniKit/OmniKitUI/ViewModels/InsertCannulaViewModel.swift
BasalStateSwiftUIView.init(netBasalPercent:),BasalStateSwiftUIView.init(netBasalPercent:) in OmniKit/OmniKitUI/Views/BasalStateView.swift
BasalStateView.init(frame:),BasalStateView.init(frame:) in OmniKit/OmniKitUI/Views/BasalStateView.swift
BasalStateView.init(coder:),BasalStateView.init(coder:) in OmniKit/OmniKitUI/Views/BasalStateView.swift
BasalStateSwiftUIViewPreviewWrapper.init(),BasalStateSwiftUIViewPreviewWrapper.init() in OmniKit/OmniKitUI/Views/BasalStateView.swift
BasalStateSwiftUIViewPreview.init(),BasalStateSwiftUIViewPreview.init() in OmniKit/OmniKitUI/Views/BasalStateView.swift
LeadingImage.init(_:),LeadingImage.init(_:) in OmniKit/OmniKitUI/Views/DesignElements/LeadingImage.swift
LeadingImage_Previews.init(),LeadingImage_Previews.init() in OmniKit/OmniKitUI/Views/DesignElements/LeadingImage.swift
ReadPodStatusView.init(horizontalSizeClass:presentationMode:getDetailedStatus:),ReadPodStatusView.init(horizontalSizeClass:presentationMode:getDetailedStatus:) in OmniKit/OmniKitUI/Views/ReadPodStatusView.swift
ReadPodStatusView_Previews.init(),ReadPodStatusView_Previews.init() in OmniKit/OmniKitUI/Views/ReadPodStatusView.swift
OmnipodSettingsView.init(viewModel:rileyLinkListDataSource:handleRileyLinkSelection:supportedInsulinTypes:guidanceColors:insulinTintColor:decimalFormatter:),OmnipodSettingsView.init(viewModel:rileyLinkListDataSource:handleRileyLinkSelection:supportedInsulinTypes:guidanceColors:insulinTintColor:decimalFormatter:) in OmniKit/OmniKitUI/Views/OmnipodSettingsView.swift
OmnipodSettingsViewModel.init(pumpManager:),OmnipodSettingsViewModel.init(pumpManager:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
OmnipodSettingsNotice.init(title:description:),OmnipodSettingsNotice.init(title:description:) in OmniKit/OmniKitUI/ViewModels/OmnipodSettingsViewModel.swift
PodDetails.init(lotNumber:sequenceNumber:piVersion:pmVersion:totalDelivery:lastStatus:fault:activatedAt:activeTime:pdmRef:),PodDetails.init(lotNumber:sequenceNumber:piVersion:pmVersion:totalDelivery:lastStatus:fault:activatedAt:activeTime:pdmRef:) in OmniKit/OmniKitUI/Views/PodDetailsView.swift
LowReservoirReminderSetupView.init(lowReservoirReminderValue:valueChanged:continueButtonTapped:cancelButtonTapped:insulinQuantityFormatter:),LowReservoirReminderSetupView.init(lowReservoirReminderValue:valueChanged:continueButtonTapped:cancelButtonTapped:insulinQuantityFormatter:) in OmniKit/OmniKitUI/Views/LowReservoirReminderSetupView.swift
LowReservoirReminderSetupView_Previews.init(),LowReservoirReminderSetupView_Previews.init() in OmniKit/OmniKitUI/Views/LowReservoirReminderSetupView.swift
SilencePodSelectionView.init(initialValue:onSave:),SilencePodSelectionView.init(initialValue:onSave:) in OmniKit/OmniKitUI/Views/SilencePodSelectionView.swift
SilencePodSelectionView_Previews.init(),SilencePodSelectionView_Previews.init() in OmniKit/OmniKitUI/Views/SilencePodSelectionView.swift
OmnipodUICoordinator.init(pumpManager:colorPalette:pumpManagerSettings:allowDebugFeatures:allowedInsulinTypes:),OmnipodUICoordinator.init(pumpManager:colorPalette:pumpManagerSettings:allowDebugFeatures:allowedInsulinTypes:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
OmnipodUICoordinator.init(coder:),OmnipodUICoordinator.init(coder:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
OmnipodUICoordinator.init(navigationBarClass:toolbarClass:),OmnipodUICoordinator.init(navigationBarClass:toolbarClass:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
OmnipodUICoordinator.init(rootViewController:),OmnipodUICoordinator.init(rootViewController:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
OmnipodUICoordinator.init(nibName:bundle:),OmnipodUICoordinator.init(nibName:bundle:) in OmniKit/OmniKitUI/ViewControllers/OmnipodUICoordinator.swift
ManualTempBasalEntryView.init(enactBasal:didCancel:allowedRates:),ManualTempBasalEntryView.init(enactBasal:didCancel:allowedRates:) in OmniKit/OmniKitUI/Views/ManualTempBasalEntryView.swift
CheckInsertedCannulaView.init(didRequestDeactivation:wasInsertedProperly:),CheckInsertedCannulaView.init(didRequestDeactivation:wasInsertedProperly:) in OmniKit/OmniKitUI/Views/CheckInsertedCannulaView.swift
CheckInsertedCannulaView_Previews.init(),CheckInsertedCannulaView_Previews.init() in OmniKit/OmniKitUI/Views/CheckInsertedCannulaView.swift
PairPodView.init(viewModel:),PairPodView.init(viewModel:) in OmniKit/OmniKitUI/Views/PairPodView.swift
PairPodViewModel.init(podPairer:),PairPodViewModel.init(podPairer:) in OmniKit/OmniKitUI/ViewModels/PairPodViewModel.swift
DeactivatePodView.init(viewModel:verticalSizeClass:guidanceColors:),DeactivatePodView.init(viewModel:verticalSizeClass:guidanceColors:) in OmniKit/OmniKitUI/Views/DeactivatePodView.swift
RoundedCardTitle.init(_:),RoundedCardTitle.init(_:) in OmniKit/OmniKitUI/Views/DesignElements/RoundedCard.swift
RoundedCardFooter.init(_:),RoundedCardFooter.init(_:) in OmniKit/OmniKitUI/Views/DesignElements/RoundedCard.swift
RoundedCardValueRow.init(label:value:highlightValue:disclosure:),RoundedCardValueRow.init(label:value:highlightValue:disclosure:) in OmniKit/OmniKitUI/Views/DesignElements/RoundedCard.swift
RoundedCard<Content>.init(title:footer:alignment:content:),RoundedCard.init(title:footer:alignment:content:) in OmniKit/OmniKitUI/Views/DesignElements/RoundedCard.swift
RoundedCardScrollView<Content>.init(title:content:),RoundedCardScrollView.init(title:content:) in OmniKit/OmniKitUI/Views/DesignElements/RoundedCard.swift
PlayTestBeepsView.init(horizontalSizeClass:presentationMode:playTestBeeps:),PlayTestBeepsView.init(horizontalSizeClass:presentationMode:playTestBeeps:) in OmniKit/OmniKitUI/Views/PlayTestBeepsView.swift
PlayTestBeepsView_Previews.init(),PlayTestBeepsView_Previews.init() in OmniKit/OmniKitUI/Views/PlayTestBeepsView.swift
FrameworkReferenceClass.init(),FrameworkReferenceClass.init() in OmniKit/OmniKitUI/Common/FrameworkLocalText.swift
PodDiagnosticsView.init(title:diagnosticCommands:podOk:noPod:),PodDiagnosticsView.init(title:diagnosticCommands:podOk:noPod:) in OmniKit/OmniKitUI/Views/PodDiagnosticsView.swift
PodDetailsView.init(guidanceColors:podDetails:title:),PodDetailsView.init(guidanceColors:podDetails:title:) in OmniKit/OmniKitUI/Views/PodDetailsView.swift
PodDetailsView_Previews.init(),PodDetailsView_Previews.init() in OmniKit/OmniKitUI/Views/PodDetailsView.swift
NotificationSettingsView.init(dateFormatter:expirationReminderDefault:scheduledReminderDate:allowedScheduledReminderDates:lowReservoirReminderValue:onSaveScheduledExpirationReminder:onSaveLowReservoirReminder:insulinQuantityFormatter:),NotificationSettingsView.init(dateFormatter:expirationReminderDefault:scheduledReminderDate:allowedScheduledReminderDates:lowReservoirReminderValue:onSaveScheduledExpirationReminder:onSaveLowReservoirReminder:insulinQuantityFormatter:) in OmniKit/OmniKitUI/Views/NotificationSettingsView.swift
NotificationSettingsView_Previews.init(),NotificationSettingsView_Previews.init() in OmniKit/OmniKitUI/Views/NotificationSettingsView.swift
InsertCannulaView.init(viewModel:verticalSizeClass:),InsertCannulaView.init(viewModel:verticalSizeClass:) in OmniKit/OmniKitUI/Views/InsertCannulaView.swift
MockCannulaInserter.init(),MockCannulaInserter.init() in OmniKit/OmniKitUI/Views/InsertCannulaView.swift
InsertCannulaView_Previews.init(),InsertCannulaView_Previews.init() in OmniKit/OmniKitUI/Views/InsertCannulaView.swift
LocalBundle.init(),LocalBundle.init() in OmniKit/OmniKitUI/LocalizedString.swift
FrameworkBundle.init(),FrameworkBundle.init() in OmniKit/OmniKitUI/Extensions/Image.swift
ScheduledExpirationReminderEditView.init(scheduledExpirationReminderDate:allowedDates:dateFormatter:onSave:onFinish:),ScheduledExpirationReminderEditView.init(scheduledExpirationReminderDate:allowedDates:dateFormatter:onSave:onFinish:) in OmniKit/OmniKitUI/Views/ScheduledExpirationReminderEditView.swift
ScheduledExpirationReminderEditView_Previews.init(),ScheduledExpirationReminderEditView_Previews.init() in OmniKit/OmniKitUI/Views/ScheduledExpirationReminderEditView.swift
OmnipodHUDProvider.init(pumpManager:bluetoothProvider:colorPalette:allowedInsulinTypes:),OmnipodHUDProvider.init(pumpManager:bluetoothProvider:colorPalette:allowedInsulinTypes:) in OmniKit/OmniKitUI/PumpManager/OmnipodHUDProvider.swift
OmnipodHUDProvider.init(),OmnipodHUDProvider.init() in OmniKit/OmniKitUI/PumpManager/OmnipodHUDProvider.swift
ErrorView.init(_:errorClass:),ErrorView.init(_:errorClass:) in OmniKit/OmniKitUI/Views/DesignElements/ErrorView.swift
ErrorView_Previews.init(),ErrorView_Previews.init() in OmniKit/OmniKitUI/Views/DesignElements/ErrorView.swift
PodSetupView.init(nextAction:allowDebugFeatures:skipOnboarding:),PodSetupView.init(nextAction:allowDebugFeatures:skipOnboarding:) in OmniKit/OmniKitUI/Views/PodSetupView.swift
PodSetupView.AlertIdentifier.init(id:),AlertIdentifier.init(id:) in OmniKit/OmniKitUI/Views/PodSetupView.swift
PodSetupView_Previews.init(),PodSetupView_Previews.init() in OmniKit/OmniKitUI/Views/PodSetupView.swift
SetupCompleteView.init(scheduledReminderDate:dateFormatter:allowedDates:onSaveScheduledExpirationReminder:didFinish:didRequestDeactivation:),SetupCompleteView.init(scheduledReminderDate:dateFormatter:allowedDates:onSaveScheduledExpirationReminder:didFinish:didRequestDeactivation:) in OmniKit/OmniKitUI/Views/SetupCompleteView.swift
SetupCompleteView_Previews.init(),SetupCompleteView_Previews.init() in OmniKit/OmniKitUI/Views/SetupCompleteView.swift
ReadPodInfoView.init(horizontalSizeClass:presentationMode:title:actionString:failedString:action:),ReadPodInfoView.init(horizontalSizeClass:presentationMode:title:actionString:failedString:action:) in OmniKit/OmniKitUI/Views/ReadPodInfoView.swift
ReadPodInfoView_Previews.init(),ReadPodInfoView_Previews.init() in OmniKit/OmniKitUI/Views/ReadPodInfoView.swift
TimeView.init(timeZone:currentDate:),TimeView.init(timeZone:currentDate:) in OmniKit/OmniKitUI/Views/TimeView.swift
TimeView_Previews.init(),TimeView_Previews.init() in OmniKit/OmniKitUI/Views/TimeView.swift
FrameworkBundle.init(),FrameworkBundle.init() in RileyLinkKit/Common/LocalizedString.swift
ResponseBuffer<R>.init(endMarker:),ResponseBuffer.init(endMarker:) in RileyLinkKit/RileyLinkBLEKit/ResponseBuffer.swift
Self.init(data:),Response.init(data:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
Self.init(legacyData:),Response.init(legacyData:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
RileyLinkConnectionState.init(autoConnectIDs:),RileyLinkConnectionState.init(autoConnectIDs:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkConnectionState.swift
RileyLinkConnectionState.init(rawValue:),RileyLinkConnectionState.init(rawValue:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkConnectionState.swift
CodeResponse.init(data:),CodeResponse.init(data:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
CodeResponse.init(legacyData:),CodeResponse.init(legacyData:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
ReadRegisterResponse.init(data:),ReadRegisterResponse.init(data:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
ReadRegisterResponse.init(legacyData:),ReadRegisterResponse.init(legacyData:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
ReadRegisterResponse.init(code:value:),ReadRegisterResponse.init(code:value:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
UpdateRegisterResponse.init(data:),UpdateRegisterResponse.init(data:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
UpdateRegisterResponse.init(legacyData:),UpdateRegisterResponse.init(legacyData:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
GetVersionResponse.init(data:),GetVersionResponse.init(data:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
GetVersionResponse.init(legacyData:),GetVersionResponse.init(legacyData:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
GetVersionResponse.init(code:versionData:),GetVersionResponse.init(code:versionData:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
GetStatisticsResponse.init(data:),GetStatisticsResponse.init(data:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
GetStatisticsResponse.init(legacyData:),GetStatisticsResponse.init(legacyData:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
GetStatisticsResponse.init(code:data:),GetStatisticsResponse.init(code:data:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
RileyLinkStatistics.init(uptime:radioRxOverflowCount:radioRxFifoOverflowCount:packetRxCount:packetTxCount:crcFailureCount:spiSyncFailureCount:),RileyLinkStatistics.init(uptime:radioRxOverflowCount:radioRxFifoOverflowCount:packetRxCount:packetTxCount:crcFailureCount:spiSyncFailureCount:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
PacketResponse.init(data:),PacketResponse.init(data:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
PacketResponse.init(legacyData:),PacketResponse.init(legacyData:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
PacketResponse.init(code:packet:),PacketResponse.init(code:packet:) in RileyLinkKit/RileyLinkBLEKit/Response.swift
RFPacket.init(rfspyResponse:),RFPacket.init(rfspyResponse:) in RileyLinkKit/RileyLinkBLEKit/RFPacket.swift
PeripheralManager.init(),PeripheralManager.init() in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
RileyLinkDeviceStatus.init(lastIdle:name:version:ledOn:vibrationOn:voltage:battery:hasPiezo:),RileyLinkDeviceStatus.init(lastIdle:name:version:ledOn:vibrationOn:voltage:battery:hasPiezo:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkDevice.swift
RadioFirmwareVersion.init(versionString:),RadioFirmwareVersion.init(versionString:) in RileyLinkKit/RileyLinkBLEKit/RadioFirmwareVersion.swift
RadioFirmwareVersion.init(components:versionString:),RadioFirmwareVersion.init(components:versionString:) in RileyLinkKit/RileyLinkBLEKit/RadioFirmwareVersion.swift
GetPacket.init(listenChannel:timeoutMS:),GetPacket.init(listenChannel:timeoutMS:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
GetVersion.init(),GetVersion.init() in RileyLinkKit/RileyLinkBLEKit/Command.swift
SendAndListen.init(outgoing:sendChannel:repeatCount:delayBetweenPacketsMS:listenChannel:timeoutMS:retryCount:preambleExtensionMS:firmwareVersion:),SendAndListen.init(outgoing:sendChannel:repeatCount:delayBetweenPacketsMS:listenChannel:timeoutMS:retryCount:preambleExtensionMS:firmwareVersion:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
SendPacket.init(outgoing:sendChannel:repeatCount:delayBetweenPacketsMS:preambleExtensionMS:firmwareVersion:),SendPacket.init(outgoing:sendChannel:repeatCount:delayBetweenPacketsMS:preambleExtensionMS:firmwareVersion:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
RegisterSetting.init(address:value:),RegisterSetting.init(address:value:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
UpdateRegister.init(_:value:firmwareVersion:),UpdateRegister.init(_:value:firmwareVersion:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
ReadRegister.init(_:firmwareVersion:),ReadRegister.init(_:firmwareVersion:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
SetModeRegisters.init(settings:registerMode:),SetModeRegisters.init(settings:registerMode:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
SetSoftwareEncoding.init(_:),SetSoftwareEncoding.init(_:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
SetPreamble.init(_:),SetPreamble.init(_:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
SetLEDMode.init(_:mode:),SetLEDMode.init(_:mode:) in RileyLinkKit/RileyLinkBLEKit/Command.swift
ResetRadioConfig.init(),ResetRadioConfig.init() in RileyLinkKit/RileyLinkBLEKit/Command.swift
GetStatistics.init(),GetStatistics.init() in RileyLinkKit/RileyLinkBLEKit/Command.swift
RileyLinkBluetoothDeviceProvider.init(autoConnectIDs:),RileyLinkBluetoothDeviceProvider.init(autoConnectIDs:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkBluetoothDeviceProvider.swift
RileyLinkBluetoothDeviceProvider.init(),RileyLinkBluetoothDeviceProvider.init() in RileyLinkKit/RileyLinkBLEKit/RileyLinkBluetoothDeviceProvider.swift
RileyLinkBluetoothDevice.init(peripheralManager:rssi:),RileyLinkBluetoothDevice.init(peripheralManager:rssi:) in RileyLinkKit/RileyLinkBLEKit/RileyLinkBluetoothDevice.swift
BLEFirmwareVersion.init(versionString:),BLEFirmwareVersion.init(versionString:) in RileyLinkKit/RileyLinkBLEKit/BLEFirmwareVersion.swift
BLEFirmwareVersion.init(components:versionString:),BLEFirmwareVersion.init(components:versionString:) in RileyLinkKit/RileyLinkBLEKit/BLEFirmwareVersion.swift
RileyLinkListDataSource.init(rileyLinkPumpManager:),RileyLinkListDataSource.init(rileyLinkPumpManager:) in RileyLinkKit/RileyLinkKit/RileyLinkListDataSource.swift
RileyLinkPumpManager.init(rileyLinkDeviceProvider:),RileyLinkPumpManager.init(rileyLinkDeviceProvider:) in RileyLinkKit/RileyLinkKit/RileyLinkPumpManager.swift
SetupImageTableViewCell.init(style:reuseIdentifier:),SetupImageTableViewCell.init(style:reuseIdentifier:) in RileyLinkKit/RileyLinkKitUI/SetupImageTableViewCell.swift
SetupImageTableViewCell.init(coder:),SetupImageTableViewCell.init(coder:) in RileyLinkKit/RileyLinkKitUI/SetupImageTableViewCell.swift
RileyLinkDevicesTableViewDataSource.init(rileyLinkPumpManager:devicesSectionIndex:),RileyLinkDevicesTableViewDataSource.init(rileyLinkPumpManager:devicesSectionIndex:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesTableViewDataSource.swift
RileyLinkDevicesTableViewDataSource.init(),RileyLinkDevicesTableViewDataSource.init() in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesTableViewDataSource.swift
RileyLinkDeviceTableViewCell.init(style:reuseIdentifier:),RileyLinkDeviceTableViewCell.init(style:reuseIdentifier:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewCell.swift
RileyLinkDeviceTableViewCell.init(coder:),RileyLinkDeviceTableViewCell.init(coder:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewCell.swift
RileyLinkDevicesHeaderView.init(reuseIdentifier:),RileyLinkDevicesHeaderView.init(reuseIdentifier:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesHeaderView.swift
RileyLinkDevicesHeaderView.init(coder:),RileyLinkDevicesHeaderView.init(coder:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDevicesHeaderView.swift
RileyLinkSettingsViewController.init(rileyLinkPumpManager:devicesSectionIndex:style:),RileyLinkSettingsViewController.init(rileyLinkPumpManager:devicesSectionIndex:style:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
RileyLinkSettingsViewController.init(coder:),RileyLinkSettingsViewController.init(coder:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
RileyLinkSettingsViewController.init(style:),RileyLinkSettingsViewController.init(style:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
RileyLinkSettingsViewController.init(nibName:bundle:),RileyLinkSettingsViewController.init(nibName:bundle:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSettingsViewController.swift
RileyLinkSetupTableViewController.init(coder:),RileyLinkSetupTableViewController.init(coder:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
RileyLinkSetupTableViewController.init(style:),RileyLinkSetupTableViewController.init(style:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
RileyLinkSetupTableViewController.init(nibName:bundle:),RileyLinkSetupTableViewController.init(nibName:bundle:) in RileyLinkKit/RileyLinkKitUI/RileyLinkSetupTableViewController.swift
RileyLinkSwitch.init(frame:),RileyLinkSwitch.init(frame:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
RileyLinkSwitch.init(coder:),RileyLinkSwitch.init(coder:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
RileyLinkCell.init(style:reuseIdentifier:),RileyLinkCell.init(style:reuseIdentifier:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
RileyLinkCell.init(coder:),RileyLinkCell.init(coder:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
RileyLinkDeviceTableViewController.init(device:batteryAlertLevel:batteryAlertLevelChanged:),RileyLinkDeviceTableViewController.init(device:batteryAlertLevel:batteryAlertLevelChanged:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
RileyLinkDeviceTableViewController.init(coder:),RileyLinkDeviceTableViewController.init(coder:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
RileyLinkDeviceTableViewController.init(style:),RileyLinkDeviceTableViewController.init(style:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
RileyLinkDeviceTableViewController.init(nibName:bundle:),RileyLinkDeviceTableViewController.init(nibName:bundle:) in RileyLinkKit/RileyLinkKitUI/RileyLinkDeviceTableViewController.swift
RileyLinkManagerSetupViewController.init(navigationBarClass:toolbarClass:),RileyLinkManagerSetupViewController.init(navigationBarClass:toolbarClass:) in RileyLinkKit/RileyLinkKitUI/RileyLinkManagerSetupViewController.swift
RileyLinkManagerSetupViewController.init(rootViewController:),RileyLinkManagerSetupViewController.init(rootViewController:) in RileyLinkKit/RileyLinkKitUI/RileyLinkManagerSetupViewController.swift
RileyLinkManagerSetupViewController.init(nibName:bundle:),RileyLinkManagerSetupViewController.init(nibName:bundle:) in RileyLinkKit/RileyLinkKitUI/RileyLinkManagerSetupViewController.swift
RileyLinkManagerSetupViewController.init(coder:),RileyLinkManagerSetupViewController.init(coder:) in RileyLinkKit/RileyLinkKitUI/RileyLinkManagerSetupViewController.swift
ShareClientManager.init(),ShareClientManager.init() in dexcom-share-client-swift/ShareClient/ShareClientManager.swift
ShareClientManager.init(rawState:),ShareClientManager.init(rawState:) in dexcom-share-client-swift/ShareClient/ShareClientManager.swift
ShareGlucose.init(glucose:trend:timestamp:),ShareGlucose.init(glucose:trend:timestamp:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
ShareService.init(username:password:url:),ShareService.init(username:password:url:) in dexcom-share-client-swift/ShareClient/ShareService.swift
ShareClient.init(username:password:shareServer:),ShareClient.init(username:password:shareServer:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
ShareClient.init(username:password:shareServer:),ShareClient.init(username:password:shareServer:) in dexcom-share-client-swift/ShareClient/ShareClient.swift
FrameworkBundle.init(),FrameworkBundle.init() in dexcom-share-client-swift/Common/LocalizedString.swift
ShareClientSettingsViewController.init(cgmManager:displayGlucosePreference:allowsDeletion:),ShareClientSettingsViewController.init(cgmManager:displayGlucosePreference:allowsDeletion:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
ShareClientSettingsViewController.init(coder:),ShareClientSettingsViewController.init(coder:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
ShareClientSettingsViewController.init(style:),ShareClientSettingsViewController.init(style:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
ShareClientSettingsViewController.init(nibName:bundle:),ShareClientSettingsViewController.init(nibName:bundle:) in dexcom-share-client-swift/ShareClientUI/ShareClientSettingsViewController.swift
ShareClientSetupViewController.init(),ShareClientSetupViewController.init() in dexcom-share-client-swift/ShareClientUI/ShareClientSetupViewController.swift
ShareClientSetupViewController.init(nibName:bundle:),ShareClientSetupViewController.init(nibName:bundle:) in dexcom-share-client-swift/ShareClientUI/ShareClientSetupViewController.swift
ShareClientSetupViewController.init(coder:),ShareClientSetupViewController.init(coder:) in dexcom-share-client-swift/ShareClientUI/ShareClientSetupViewController.swift
ShareClientSetupViewController.init(navigationBarClass:toolbarClass:),ShareClientSetupViewController.init(navigationBarClass:toolbarClass:) in dexcom-share-client-swift/ShareClientUI/ShareClientSetupViewController.swift
ShareClientSetupViewController.init(rootViewController:),ShareClientSetupViewController.init(rootViewController:) in dexcom-share-client-swift/ShareClientUI/ShareClientSetupViewController.swift
BuildDetails.init(),BuildDetails.init() in TidepoolService/TidepoolServiceKit/BuildDetails.swift
FrameworkBundle.init(),FrameworkBundle.init() in TidepoolService/Common/LocalizedString.swift
TidepoolService.init(hostIdentifier:hostVersion:),TidepoolService.init(hostIdentifier:hostVersion:) in TidepoolService/TidepoolServiceKit/TidepoolService.swift
TidepoolService.init(rawState:),TidepoolService.init(rawState:) in TidepoolService/TidepoolServiceKit/TidepoolService.swift
FrameworkBundle.init(),FrameworkBundle.init() in TidepoolService/TidepoolServiceKitUI/Extensions/UIImage.swift
FrameworkBundle.init(),FrameworkBundle.init() in TidepoolService/TidepoolServiceKitUI/Extensions/Image.swift
FrameworkBundle.init(),FrameworkBundle.init() in TidepoolService/TidepoolServiceKitUI/Extensions/UIImage.swift
FrameworkBundle.init(),FrameworkBundle.init() in TidepoolService/TidepoolServiceKitUI/Extensions/Image.swift
SettingsView.init(service:login:dismiss:),SettingsView.init(service:login:dismiss:) in TidepoolService/TidepoolServiceKitUI/SettingsView.swift
SettingsView_Previews.init(),SettingsView_Previews.init() in TidepoolService/TidepoolServiceKitUI/SettingsView.swift
WindowContextProvider.init(window:),WindowContextProvider.init(window:) in TidepoolService/TidepoolServiceKitUI/TidepoolService+UI.swift
WindowContextProvider.init(),WindowContextProvider.init() in TidepoolService/TidepoolServiceKitUI/TidepoolService+UI.swift
SocketAddress.init(storage:port:),SocketAddress.init(storage:port:) in TrueTime.swift/Sources/SocketAddress.swift
ReferenceTime.init(time:uptime:),ReferenceTime.init(time:uptime:) in TrueTime.swift/Sources/TrueTime.swift
ReferenceTime.init(_:),ReferenceTime.init(_:) in TrueTime.swift/Sources/TrueTime.swift
ReferenceTime.init(),ReferenceTime.init() in TrueTime.swift/Sources/TrueTime.swift
GCDLock<Value>.init(value:),GCDLock.init(value:) in TrueTime.swift/Sources/GCDLock.swift
TrueTimeClient.init(timeout:maxRetries:maxConnections:maxServers:numberOfSamples:pollInterval:),TrueTimeClient.init(timeout:maxRetries:maxConnections:maxServers:numberOfSamples:pollInterval:) in TrueTime.swift/Sources/TrueTime.swift
TrueTimeClient.init(),TrueTimeClient.init() in TrueTime.swift/Sources/TrueTime.swift
NTPClient.init(config:),NTPClient.init(config:) in TrueTime.swift/Sources/NTPClient.swift
NTPConnection.init(address:timeout:maxRetries:logger:),NTPConnection.init(address:timeout:maxRetries:logger:) in TrueTime.swift/Sources/NTPConnection.swift
FrozenNetworkTime.init(time:uptime:serverResponse:startTime:sampleSize:host:),FrozenNetworkTime.init(time:uptime:serverResponse:startTime:sampleSize:host:) in TrueTime.swift/Sources/ReferenceTime.swift
FrozenNetworkTime.init(networkTime:sampleSize:host:),FrozenNetworkTime.init(networkTime:sampleSize:host:) in TrueTime.swift/Sources/ReferenceTime.swift
NTPResponse.init(packet:responseTime:receiveTime:),NTPResponse.init(packet:responseTime:receiveTime:) in TrueTime.swift/Sources/NTPResponse.swift
Reachability.init(),Reachability.init() in TrueTime.swift/Sources/Reachability.swift
NTPConfig.init(timeout:maxRetries:maxConnections:maxServers:numberOfSamples:pollInterval:),NTPConfig.init(timeout:maxRetries:maxConnections:maxServers:numberOfSamples:pollInterval:) in TrueTime.swift/Sources/NTPClient.swift
HostResolver.init(host:port:timeout:logger:callbackQueue:onComplete:),HostResolver.init(host:port:timeout:logger:callbackQueue:onComplete:) in TrueTime.swift/Sources/HostResolver.swift
FrozenReferenceTime.init(time:uptime:),FrozenReferenceTime.init(time:uptime:) in TrueTime.swift/Sources/ReferenceTime.swift
Self.init(whole:fraction:),NTPTimeType.init(whole:fraction:) in TrueTime.swift/Sources/NTPExtensions.swift
Self.init(),ByteRepresentable.init() in TrueTime.swift/Sources/NTPExtensions.swift
AmplitudeServiceKitPlugin.init(),AmplitudeServiceKitPlugin.init() in AmplitudeService/AmplitudeServiceKitPlugin/AmplitudeServiceKitPlugin.swift
PeripheralManager.init(peripheral:configuration:centralManager:),PeripheralManager.init(peripheral:configuration:centralManager:) in CGMBLEKit/CGMBLEKit/PeripheralManager.swift
PeripheralManager.Configuration.init(serviceCharacteristics:notifyingCharacteristics:valueUpdateMacros:),Configuration.init(serviceCharacteristics:notifyingCharacteristics:valueUpdateMacros:) in CGMBLEKit/CGMBLEKit/PeripheralManager.swift
PeripheralManager.Configuration.init(),Configuration.init() in CGMBLEKit/CGMBLEKit/PeripheralManager.swift
CGMBLEKitG5Plugin.init(),CGMBLEKitG5Plugin.init() in CGMBLEKit/CGMBLEKitG5Plugin/CGMBLEKitG5Plugin.swift
CGMBLEKitG6Plugin.init(),CGMBLEKitG6Plugin.init() in CGMBLEKit/CGMBLEKitG6Plugin/CGMBLEKitG6Plugin.swift
G7PeripheralManager.Configuration.init(serviceCharacteristics:notifyingCharacteristics:valueUpdateMacros:),Configuration.init(serviceCharacteristics:notifyingCharacteristics:valueUpdateMacros:) in G7SensorKit/G7SensorKit/G7CGMManager/G7PeripheralManager.swift
G7PeripheralManager.init(peripheral:configuration:centralManager:),G7PeripheralManager.init(peripheral:configuration:centralManager:) in G7SensorKit/G7SensorKit/G7CGMManager/G7PeripheralManager.swift
G7PeripheralManager.Configuration.init(),Configuration.init() in G7SensorKit/G7SensorKit/G7CGMManager/G7PeripheralManager.swift
G7SensorPlugin.init(),G7SensorPlugin.init() in G7SensorKit/G7SensorPlugin/G7SensorPlugin.swift
Helper.init(),Helper.init() in LibreTransmitter/Common/Settings/UIApplication+metadata.swift
LibreDemoCGMManager.init(),LibreDemoCGMManager.init() in LibreTransmitter/LibreDemoPlugin/LibreDemoCGMManager.swift
LibreDemoPlugin.init(),LibreDemoPlugin.init() in LibreTransmitter/LibreDemoPlugin/LibreDemoPlugin.swift
DecryptBLEError.init(),DecryptBLEError.init() in LibreTransmitter/LibreSensor/SensorContents/PreLibre2.swift
DecryptFRAMError.init(),DecryptFRAMError.init() in LibreTransmitter/LibreSensor/SensorContents/PreLibre2.swift
LibreTransmitterPlugin.init(),LibreTransmitterPlugin.init() in LibreTransmitter/LibreTransmitterPlugin/LibreTransmitterPlugin.swift
LogglyServiceKitPlugin.init(),LogglyServiceKitPlugin.init() in LogglyService/LogglyServiceKitPlugin/LogglyServiceKitPlugin.swift
StatusExtensionContext.init(rawValue:),StatusExtensionContext.init(rawValue:) in Loop/Common/Models/StatusExtensionContext.swift
IntentExtensionInfo.init(rawValue:),IntentExtensionInfo.init(rawValue:) in Loop/Common/Models/IntentExtensionInfo.swift
FeatureFlagConfiguration.init(),FeatureFlagConfiguration.init() in Loop/Common/FeatureFlags.swift
BuildDetails.init(),BuildDetails.init() in Loop/Common/Models/BuildDetails.swift
CarbBackfillRequestUserInfo.init(startDate:),CarbBackfillRequestUserInfo.init(startDate:) in Loop/Common/Models/CarbBackfillRequestUserInfo.swift
GlucoseBackfillRequestUserInfo.init(startDate:),GlucoseBackfillRequestUserInfo.init(startDate:) in Loop/Common/Models/GlucoseBackfillRequestUserInfo.swift
IntentExtensionInfo.init(),IntentExtensionInfo.init() in Loop/Common/Models/IntentExtensionInfo.swift
IntentExtensionInfo.init(overridePresetNames:),IntentExtensionInfo.init(overridePresetNames:) in Loop/Common/Models/IntentExtensionInfo.swift
LoopSettingsUserInfo.init(settings:),LoopSettingsUserInfo.init(settings:) in Loop/Common/Models/LoopSettingsUserInfo.swift
SetBolusUserInfo.init(value:startDate:contextDate:carbEntry:activationType:),SetBolusUserInfo.init(value:startDate:contextDate:carbEntry:activationType:) in Loop/Common/Models/SetBolusUserInfo.swift
NetBasalContext.init(rate:percentage:start:end:),NetBasalContext.init(rate:percentage:start:end:) in Loop/Common/Models/StatusExtensionContext.swift
GlucoseDisplayableContext.init(isStateValid:stateDescription:trendType:trendRate:isLocal:glucoseRangeCategory:),GlucoseDisplayableContext.init(isStateValid:stateDescription:trendType:trendRate:isLocal:glucoseRangeCategory:) in Loop/Common/Models/StatusExtensionContext.swift
GlucoseContext.init(value:unit:startDate:),GlucoseContext.init(value:unit:startDate:) in Loop/Common/Models/StatusExtensionContext.swift
PredictedGlucoseContext.init(values:unit:startDate:interval:),PredictedGlucoseContext.init(values:unit:startDate:interval:) in Loop/Common/Models/StatusExtensionContext.swift
DeviceStatusHighlightContext.init(localizedMessage:imageName:state:),DeviceStatusHighlightContext.init(localizedMessage:imageName:state:) in Loop/Common/Models/StatusExtensionContext.swift
DeviceStatusHighlightContext.init(from:),DeviceStatusHighlightContext.init(from:) in Loop/Common/Models/StatusExtensionContext.swift
DeviceLifecycleProgressContext.init(percentComplete:progressState:),DeviceLifecycleProgressContext.init(percentComplete:progressState:) in Loop/Common/Models/StatusExtensionContext.swift
DeviceLifecycleProgressContext.init(from:),DeviceLifecycleProgressContext.init(from:) in Loop/Common/Models/StatusExtensionContext.swift
PumpManagerHUDViewContext.init(pumpManagerHUDViewRawValue:),PumpManagerHUDViewContext.init(pumpManagerHUDViewRawValue:) in Loop/Common/Models/StatusExtensionContext.swift
PumpManagerHUDViewContext.init(rawValue:),PumpManagerHUDViewContext.init(rawValue:) in Loop/Common/Models/StatusExtensionContext.swift
StatusExtensionContext.init(),StatusExtensionContext.init() in Loop/Common/Models/StatusExtensionContext.swift
SupportedBolusVolumesUserInfo.init(supportedBolusVolumes:),SupportedBolusVolumesUserInfo.init(supportedBolusVolumes:) in Loop/Common/Models/SupportedBolusVolumesUserInfo.swift
WatchContext.init(),WatchContext.init() in Loop/Common/Models/WatchContext.swift
WatchContext.init(rawValue:),WatchContext.init(rawValue:) in Loop/Common/Models/WatchContext.swift
WatchContextRequestUserInfo.init(),WatchContextRequestUserInfo.init() in Loop/Common/Models/WatchContextRequestUserInfo.swift
WatchHistoricalCarbs.init(objects:),WatchHistoricalCarbs.init(objects:) in Loop/Common/Models/WatchHistoricalCarbs.swift
WatchHistoricalGlucose.init(samples:),WatchHistoricalGlucose.init(samples:) in Loop/Common/Models/WatchHistoricalGlucose.swift
WatchHistoricalGlucose.Flattened.init(samples:),Flattened.init(samples:) in Loop/Common/Models/WatchHistoricalGlucose.swift
WatchPredictedGlucose.init(values:),WatchPredictedGlucose.init(values:) in Loop/Common/Models/WatchPredictedGlucose.swift
AppDelegate.init(),AppDelegate.init() in Loop/Loop/AppDelegate.swift
LoopAppManager.init(),LoopAppManager.init() in Loop/Loop/Managers/LoopAppManager.swift
AlertStore.DatedAlert.init(date:alert:syncIdentifier:),DatedAlert.init(date:alert:syncIdentifier:) in Loop/Loop/Managers/Alerts/AlertStore.swift
NetBasal.init(scheduledRateStartedAt:),NetBasal.init(scheduledRateStartedAt:) in Loop/Loop/Models/NetBasal.swift
NetBasal.init(suspendedAt:maxBasal:scheduledBasal:),NetBasal.init(suspendedAt:maxBasal:scheduledBasal:) in Loop/Loop/Models/NetBasal.swift
NetBasal.init(lastTempBasal:maxBasal:scheduledBasal:),NetBasal.init(lastTempBasal:maxBasal:scheduledBasal:) in Loop/Loop/Models/NetBasal.swift
BluetoothState.Highlight.init(localizedMessage:),Highlight.init(localizedMessage:) in Loop/Loop/Extensions/DeviceDataManager+DeviceStatus.swift
DeviceDataManager.AddDeviceStatusHighlight.init(localizedMessage:imageName:state:),AddDeviceStatusHighlight.init(localizedMessage:imageName:state:) in Loop/Loop/Extensions/DeviceDataManager+DeviceStatus.swift
DeviceDataManager.ResumeOnboardingStatusHighlight.init(),ResumeOnboardingStatusHighlight.init() in Loop/Loop/Extensions/DeviceDataManager+DeviceStatus.swift
DeviceDataManager.ResumeOnboardingStatusHighlight.init(localizedMessage:imageName:state:),ResumeOnboardingStatusHighlight.init(localizedMessage:imageName:state:) in Loop/Loop/Extensions/DeviceDataManager+DeviceStatus.swift
DiagnosticLog.init(subsystem:category:),DiagnosticLog.init(subsystem:category:) in Loop/Loop/Extensions/DiagnosticLog.swift
DirectoryObservation.init(url:updatingWith:),DirectoryObservation.init(url:updatingWith:) in Loop/Loop/Extensions/DirectoryObserver.swift
TextFieldObserver.init(textField:valueChanged:shouldReturn:),TextFieldObserver.init(textField:valueChanged:shouldReturn:) in Loop/Loop/Extensions/UIAlertController.swift
TextFieldObserver.init(),TextFieldObserver.init() in Loop/Loop/Extensions/UIAlertController.swift
AlertMuter.init(configuration:),AlertMuter.init(configuration:) in Loop/Loop/Managers/AlertMuter.swift
AlertMuter.init(startTime:duration:),AlertMuter.init(startTime:duration:) in Loop/Loop/Managers/AlertMuter.swift
AlertMuter.Configuration.init(startTime:duration:),Configuration.init(startTime:duration:) in Loop/Loop/Managers/AlertMuter.swift
AlertMuter.Configuration.init(rawValue:),Configuration.init(rawValue:) in Loop/Loop/Managers/AlertMuter.swift
AlertPermissionsChecker.init(),AlertPermissionsChecker.init() in Loop/Loop/Managers/AlertPermissionsChecker.swift
NotificationCenterSettingsFlags.init(rawValue:),NotificationCenterSettingsFlags.init(rawValue:) in Loop/Loop/Managers/AlertPermissionsChecker.swift
AlertManager.init(alertPresenter:modalAlertScheduler:userNotificationAlertScheduler:fileManager:alertStore:expireAfter:bluetoothProvider:analyticsServicesManager:preventIssuanceBeforePlayback:),AlertManager.init(alertPresenter:modalAlertScheduler:userNotificationAlertScheduler:fileManager:alertStore:expireAfter:bluetoothProvider:analyticsServicesManager:preventIssuanceBeforePlayback:) in Loop/Loop/Managers/Alerts/AlertManager.swift
StoredLoopNotRunningNotification.init(alertAt:title:body:isCritical:),StoredLoopNotRunningNotification.init(alertAt:title:body:isCritical:) in Loop/Loop/Models/StoredLoopNotRunningNotification.swift
InAppModalAlertScheduler.init(alertPresenter:alertManagerResponder:newActionFunc:newTimerFunc:),InAppModalAlertScheduler.init(alertPresenter:alertManagerResponder:newActionFunc:newTimerFunc:) in Loop/Loop/Managers/Alerts/InAppModalAlertScheduler.swift
AlertStore.init(storageDirectoryURL:expireAfter:),AlertStore.init(storageDirectoryURL:expireAfter:) in Loop/Loop/Managers/Alerts/AlertStore.swift
AlertStore.QueryAnchor.init(),QueryAnchor.init() in Loop/Loop/Managers/Alerts/AlertStore.swift
AlertStore.SinceDateFilter.init(predicateExpressionNotYetExpired:date:excludingFutureAlerts:now:),SinceDateFilter.init(predicateExpressionNotYetExpired:date:excludingFutureAlerts:now:) in Loop/Loop/Managers/Alerts/AlertStore.swift
AlertStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in Loop/Loop/Managers/Alerts/AlertStore.swift
StoredAlert.init(entity:insertInto:),StoredAlert.init(entity:insertInto:) in Loop/Loop/Managers/Alerts/StoredAlert+CoreDataClass.swift
UserNotificationAlertScheduler.init(userNotificationCenter:),UserNotificationAlertScheduler.init(userNotificationCenter:) in Loop/Loop/Managers/Alerts/UserNotificationAlertScheduler.swift
AnalyticsServicesManager.init(),AnalyticsServicesManager.init() in Loop/Loop/Managers/AnalyticsServicesManager.swift
AppExpirationAlerter.init(),AppExpirationAlerter.init() in Loop/Loop/Managers/AppExpirationAlerter.swift
BluetoothStateManager.init(),BluetoothStateManager.init() in Loop/Loop/Managers/BluetoothStateManager.swift
CGMStalenessMonitor.init(),CGMStalenessMonitor.init() in Loop/Loop/Managers/CGMStalenessMonitor.swift
CriticalEventLogExportManager.init(logs:directory:historicalDuration:fileManager:),CriticalEventLogExportManager.init(logs:directory:historicalDuration:fileManager:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
CriticalEventLogHistoricalExporter.init(manager:),CriticalEventLogHistoricalExporter.init(manager:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
CriticalEventLogBaseExporter.init(manager:),CriticalEventLogBaseExporter.init(manager:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
ZipArchive.init(url:),ZipArchive.init(url:) in Loop/Loop/Models/ZipArchive.swift
CriticalEventLogFullExporter.init(manager:to:),CriticalEventLogFullExporter.init(manager:to:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
CriticalEventLogFullExporter.init(manager:),CriticalEventLogFullExporter.init(manager:) in Loop/Loop/Managers/CriticalEventLogExportManager.swift
Deeplink.init(url:),Deeplink.init(url:) in Loop/Loop/Managers/DeeplinkManager.swift
DeeplinkManager.init(rootViewController:),DeeplinkManager.init(rootViewController:) in Loop/Loop/Managers/DeeplinkManager.swift
DeliveryUncertaintyAlertManager.init(pumpManager:alertPresenter:),DeliveryUncertaintyAlertManager.init(pumpManager:alertPresenter:) in Loop/Loop/Managers/DeliveryUncertaintyAlertManager.swift
DeviceDataManager.init(pluginManager:alertManager:settingsManager:loggingServicesManager:analyticsServicesManager:bluetoothProvider:alertPresenter:automaticDosingStatus:cacheStore:localCacheDuration:overrideHistory:trustedTimeChecker:),DeviceDataManager.init(pluginManager:alertManager:settingsManager:loggingServicesManager:analyticsServicesManager:bluetoothProvider:alertPresenter:automaticDosingStatus:cacheStore:localCacheDuration:overrideHistory:trustedTimeChecker:) in Loop/Loop/Managers/DeviceDataManager.swift
ManualGlucoseDisplay.init(glucoseRangeCategory:),ManualGlucoseDisplay.init(glucoseRangeCategory:) in Loop/Loop/Models/GlucoseDisplay.swift
GlucoseDisplay.init(_:),GlucoseDisplay.init(_:) in Loop/Loop/Models/GlucoseDisplay.swift
DeviceDataManager.UnknownCGMManagerIdentifierError.init(),UnknownCGMManagerIdentifierError.init() in Loop/Loop/Managers/DeviceDataManager.swift
CancelTempBasalFailedError.init(reason:),CancelTempBasalFailedError.init(reason:) in Loop/Loop/Managers/DeviceDataManager.swift
DeviceDataManager.UnknownPumpManagerIdentifierError.init(),UnknownPumpManagerIdentifierError.init() in Loop/Loop/Managers/DeviceDataManager.swift
StatefulPluginManager.init(pluginManager:servicesManager:),StatefulPluginManager.init(pluginManager:servicesManager:) in Loop/Loop/Managers/StatefulPluginManager.swift
ServicesManager.init(pluginManager:alertManager:analyticsServicesManager:loggingServicesManager:remoteDataServicesManager:settingsManager:servicesManagerDelegate:servicesManagerDosingDelegate:),ServicesManager.init(pluginManager:alertManager:analyticsServicesManager:loggingServicesManager:remoteDataServicesManager:settingsManager:servicesManagerDelegate:servicesManagerDosingDelegate:) in Loop/Loop/Managers/ServicesManager.swift
RemoteDataServicesManager.init(alertStore:carbStore:doseStore:dosingDecisionStore:glucoseStore:cgmEventStore:settingsStore:overrideHistory:insulinDeliveryStore:),RemoteDataServicesManager.init(alertStore:carbStore:doseStore:dosingDecisionStore:glucoseStore:cgmEventStore:settingsStore:overrideHistory:insulinDeliveryStore:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
WatchDataManager.init(deviceManager:healthStore:),WatchDataManager.init(deviceManager:healthStore:) in Loop/Loop/Managers/WatchDataManager.swift
LoopDataManager.init(lastLoopCompleted:basalDeliveryState:settings:overrideHistory:analyticsServicesManager:localCacheDuration:doseStore:glucoseStore:carbStore:dosingDecisionStore:latestStoredSettingsProvider:now:pumpInsulinType:automaticDosingStatus:trustedTimeOffset:),LoopDataManager.init(lastLoopCompleted:basalDeliveryState:settings:overrideHistory:analyticsServicesManager:localCacheDuration:doseStore:glucoseStore:carbStore:dosingDecisionStore:latestStoredSettingsProvider:now:pumpInsulinType:automaticDosingStatus:trustedTimeOffset:) in Loop/Loop/Managers/LoopDataManager.swift
ExtensionDataManager.init(deviceDataManager:automaticDosingStatus:),ExtensionDataManager.init(deviceDataManager:automaticDosingStatus:) in Loop/Loop/Managers/ExtensionDataManager.swift
CrashRecoveryManager.init(alertIssuer:),CrashRecoveryManager.init(alertIssuer:) in Loop/Loop/Models/CrashRecoveryManager.swift
DoseEnactor.init(),DoseEnactor.init() in Loop/Loop/Managers/DoseEnactor.swift
LocalTestingScenariosManager.init(deviceManager:supportManager:),LocalTestingScenariosManager.init(deviceManager:supportManager:) in Loop/Loop/Managers/LocalTestingScenariosManager.swift
LoggingServicesManager.init(),LoggingServicesManager.init() in Loop/Loop/Managers/LoggingServicesManager.swift
OnboardingManager.init(pluginManager:bluetoothProvider:deviceDataManager:statefulPluginManager:servicesManager:loopDataManager:supportManager:windowProvider:userDefaults:),OnboardingManager.init(pluginManager:bluetoothProvider:deviceDataManager:statefulPluginManager:servicesManager:loopDataManager:supportManager:windowProvider:userDefaults:) in Loop/Loop/Managers/OnboardingManager.swift
SupportManager.init(pluginManager:deviceSupportDelegate:servicesManager:staticSupportTypes:alertIssuer:),SupportManager.init(pluginManager:deviceSupportDelegate:servicesManager:staticSupportTypes:alertIssuer:) in Loop/Loop/Managers/SupportManager.swift
SettingsManager.init(cacheStore:expireAfter:alertMuter:),SettingsManager.init(cacheStore:expireAfter:alertMuter:) in Loop/Loop/Managers/SettingsManager.swift
TrustedTimeChecker.init(alertManager:),TrustedTimeChecker.init(alertManager:) in Loop/Loop/Managers/TrustedTimeChecker.swift
ResetLoopManager.init(delegate:),ResetLoopManager.init(delegate:) in Loop/Loop/Managers/ResetLoopManager.swift
AutomaticDosingStatus.init(automaticDosingEnabled:isAutomaticDosingAllowed:),AutomaticDosingStatus.init(automaticDosingEnabled:isAutomaticDosingAllowed:) in Loop/Loop/Models/AutomaticDosingStatus.swift
ConstantApplicationFactorStrategy.init(),ConstantApplicationFactorStrategy.init() in Loop/Loop/Models/ConstantApplicationFactorStrategy.swift
GlucoseBasedApplicationFactorStrategy.init(),GlucoseBasedApplicationFactorStrategy.init() in Loop/Loop/Models/GlucoseBasedApplicationFactorStrategy.swift
MealDetectionManager.init(carbRatioScheduleApplyingOverrideHistory:insulinSensitivityScheduleApplyingOverrideHistory:maximumBolus:test_currentDate:),MealDetectionManager.init(carbRatioScheduleApplyingOverrideHistory:insulinSensitivityScheduleApplyingOverrideHistory:maximumBolus:test_currentDate:) in Loop/Loop/Managers/Missed Meal Detection/MealDetectionManager.swift
BolusDosingDecision.init(for:),BolusDosingDecision.init(for:) in Loop/Loop/Models/BolusDosingDecision.swift
LoopDataManager.LoopStateView.init(loopDataManager:updateError:),LoopStateView.init(loopDataManager:updateError:) in Loop/Loop/Managers/LoopDataManager.swift
MissedMealSettings.init(),MissedMealSettings.init() in Loop/Loop/Managers/Missed Meal Detection/MissedMealSettings.swift
UploadTaskKey.init(serviceIdentifier:remoteDataType:),UploadTaskKey.init(serviceIdentifier:remoteDataType:) in Loop/Loop/Managers/RemoteDataServicesManager.swift
ServicesManager.UnknownServiceIdentifierError.init(),UnknownServiceIdentifierError.init() in Loop/Loop/Managers/ServicesManager.swift
SharedLogging.init(),SharedLogging.init() in Loop/Loop/Managers/SharedLogging.swift
SleepStore.init(healthStore:),SleepStore.init(healthStore:) in Loop/Loop/Managers/SleepStore.swift
StatusChartsManager.init(colors:settings:traitCollection:),StatusChartsManager.init(colors:settings:traitCollection:) in Loop/Loop/Managers/StatusChartsManager.swift
StatusChartsManager.init(colors:settings:axisLabelFont:charts:traitCollection:),StatusChartsManager.init(colors:settings:axisLabelFont:charts:traitCollection:) in Loop/Loop/Managers/StatusChartsManager.swift
WatchDataManager.init(),WatchDataManager.init() in Loop/Loop/Managers/WatchDataManager.swift
GlucoseDisplay.init(isStateValid:trendType:trendRate:isLocal:glucoseRangeCategory:),GlucoseDisplay.init(isStateValid:trendType:trendRate:isLocal:glucoseRangeCategory:) in Loop/Loop/Models/GlucoseDisplay.swift
PredictionInputEffect.init(rawValue:),PredictionInputEffect.init(rawValue:) in Loop/Loop/Models/PredictionInputEffect.swift
SimpleBolusCalculator.init(),SimpleBolusCalculator.init() in Loop/Loop/Models/SimpleBolusCalculator.swift
ZipArchive.Stream.init(archive:path:compressionMethod:),Stream.init(archive:path:compressionMethod:) in Loop/Loop/Models/ZipArchive.swift
ZipArchive.Stream.init(),Stream.init() in Loop/Loop/Models/ZipArchive.swift
PluginManager.init(pluginsURL:),PluginManager.init(pluginsURL:) in Loop/Loop/Plugins/PluginManager.swift
CarbAbsorptionViewController.init(style:),CarbAbsorptionViewController.init(style:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
CarbAbsorptionViewController.init(nibName:bundle:),CarbAbsorptionViewController.init(nibName:bundle:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
CarbAbsorptionViewController.init(coder:),CarbAbsorptionViewController.init(coder:) in Loop/Loop/View Controllers/CarbAbsorptionViewController.swift
LoopChartsTableViewController.init(coder:),LoopChartsTableViewController.init(coder:) in Loop/Loop/View Controllers/LoopChartsTableViewController.swift
LoopChartsTableViewController.init(nibName:bundle:),LoopChartsTableViewController.init(nibName:bundle:) in Loop/Loop/View Controllers/LoopChartsTableViewController.swift
LoopChartsTableViewController.init(style:),LoopChartsTableViewController.init(style:) in Loop/Loop/View Controllers/LoopChartsTableViewController.swift
CarbEntryView.init(viewModel:),CarbEntryView.init(viewModel:) in Loop/Loop/Views/CarbEntryView.swift
CarbEntryViewModel.init(delegate:),CarbEntryViewModel.init(delegate:) in Loop/Loop/View Models/CarbEntryViewModel.swift
SimpleBolusView.init(viewModel:),SimpleBolusView.init(viewModel:) in Loop/Loop/Views/SimpleBolusView.swift
SimpleBolusViewModel.init(delegate:displayMealEntry:),SimpleBolusViewModel.init(delegate:displayMealEntry:) in Loop/Loop/View Models/SimpleBolusViewModel.swift
CarbEntryViewModel.init(delegate:originalCarbEntry:),CarbEntryViewModel.init(delegate:originalCarbEntry:) in Loop/Loop/View Models/CarbEntryViewModel.swift
GlucoseThresholdTableViewController.init(threshold:glucoseUnit:),GlucoseThresholdTableViewController.init(threshold:glucoseUnit:) in Loop/Loop/View Controllers/GlucoseThresholdTableViewController.swift
GlucoseThresholdTableViewController.init(coder:),GlucoseThresholdTableViewController.init(coder:) in Loop/Loop/View Controllers/GlucoseThresholdTableViewController.swift
GlucoseThresholdTableViewController.init(style:),GlucoseThresholdTableViewController.init(style:) in Loop/Loop/View Controllers/GlucoseThresholdTableViewController.swift
GlucoseThresholdTableViewController.init(nibName:bundle:),GlucoseThresholdTableViewController.init(nibName:bundle:) in Loop/Loop/View Controllers/GlucoseThresholdTableViewController.swift
InsulinDeliveryTableViewController.init(style:),InsulinDeliveryTableViewController.init(style:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
InsulinDeliveryTableViewController.init(nibName:bundle:),InsulinDeliveryTableViewController.init(nibName:bundle:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
InsulinDeliveryTableViewController.init(coder:),InsulinDeliveryTableViewController.init(coder:) in Loop/Loop/View Controllers/InsulinDeliveryTableViewController.swift
ManualEntryDoseView.init(viewModel:dismiss:),ManualEntryDoseView.init(viewModel:dismiss:) in Loop/Loop/Views/ManualEntryDoseView.swift
ManualEntryDoseViewModel.init(delegate:now:screenWidth:debounceIntervalMilliseconds:uuidProvider:timeZone:),ManualEntryDoseViewModel.init(delegate:now:screenWidth:debounceIntervalMilliseconds:uuidProvider:timeZone:) in Loop/Loop/View Models/ManualEntryDoseViewModel.swift
PredictionTableViewController.init(style:),PredictionTableViewController.init(style:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
PredictionTableViewController.init(nibName:bundle:),PredictionTableViewController.init(nibName:bundle:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
PredictionTableViewController.init(coder:),PredictionTableViewController.init(coder:) in Loop/Loop/View Controllers/PredictionTableViewController.swift
RootNavigationController.init(navigationBarClass:toolbarClass:),RootNavigationController.init(navigationBarClass:toolbarClass:) in Loop/Loop/View Controllers/RootNavigationController.swift
RootNavigationController.init(rootViewController:),RootNavigationController.init(rootViewController:) in Loop/Loop/View Controllers/RootNavigationController.swift
RootNavigationController.init(nibName:bundle:),RootNavigationController.init(nibName:bundle:) in Loop/Loop/View Controllers/RootNavigationController.swift
RootNavigationController.init(coder:),RootNavigationController.init(coder:) in Loop/Loop/View Controllers/RootNavigationController.swift
StatusTableViewController.init(style:),StatusTableViewController.init(style:) in Loop/Loop/View Controllers/StatusTableViewController.swift
StatusTableViewController.init(nibName:bundle:),StatusTableViewController.init(nibName:bundle:) in Loop/Loop/View Controllers/StatusTableViewController.swift
StatusTableViewController.init(coder:),StatusTableViewController.init(coder:) in Loop/Loop/View Controllers/StatusTableViewController.swift
TestingScenariosTableViewController.init(scenariosManager:),TestingScenariosTableViewController.init(scenariosManager:) in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
SettingsView.init(viewModel:localizedAppNameAndVersion:),SettingsView.init(viewModel:localizedAppNameAndVersion:) in Loop/Loop/Views/SettingsView.swift
CriticalEventLogExportViewModel.init(exporterFactory:),CriticalEventLogExportViewModel.init(exporterFactory:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
SettingsViewModel.init(alertPermissionsChecker:alertMuter:versionUpdateViewModel:pumpManagerSettingsViewModel:cgmManagerSettingsViewModel:servicesViewModel:criticalEventLogExportViewModel:therapySettings:sensitivityOverridesEnabled:initialDosingEnabled:isClosedLoopAllowed:automaticDosingStrategy:availableSupports:isOnboardingComplete:therapySettingsViewModelDelegate:delegate:),SettingsViewModel.init(alertPermissionsChecker:alertMuter:versionUpdateViewModel:pumpManagerSettingsViewModel:cgmManagerSettingsViewModel:servicesViewModel:criticalEventLogExportViewModel:therapySettings:sensitivityOverridesEnabled:initialDosingEnabled:isClosedLoopAllowed:automaticDosingStrategy:availableSupports:isOnboardingComplete:therapySettingsViewModelDelegate:delegate:) in Loop/Loop/View Models/SettingsViewModel.swift
VersionUpdateViewModel.init(supportManager:guidanceColors:),VersionUpdateViewModel.init(supportManager:guidanceColors:) in Loop/Loop/View Models/VersionUpdateViewModel.swift
ServicesViewModel.init(showServices:availableServices:activeServices:delegate:),ServicesViewModel.init(showServices:availableServices:activeServices:delegate:) in Loop/Loop/View Models/ServicesViewModel.swift
DeviceViewModel<T>.init(image:name:isSetUp:availableDevices:deleteTestingDataFunc:onTapped:didTapAddDevice:),DeviceViewModel.init(image:name:isSetUp:availableDevices:deleteTestingDataFunc:onTapped:didTapAddDevice:) in Loop/Loop/View Models/SettingsViewModel.swift
BolusEntryView.init(dismiss:appName:viewModel:),BolusEntryView.init(dismiss:appName:viewModel:) in Loop/Loop/Views/BolusEntryView.swift
BolusEntryViewModel.init(delegate:now:screenWidth:debounceIntervalMilliseconds:uuidProvider:timeZone:originalCarbEntry:potentialCarbEntry:selectedCarbAbsorptionTimeEmoji:isManualGlucoseEntryEnabled:),BolusEntryViewModel.init(delegate:now:screenWidth:debounceIntervalMilliseconds:uuidProvider:timeZone:originalCarbEntry:potentialCarbEntry:selectedCarbAbsorptionTimeEmoji:isManualGlucoseEntryEnabled:) in Loop/Loop/View Models/BolusEntryViewModel.swift
StatusTableViewController.MuteAlertsWarningCell.init(style:reuseIdentifier:),MuteAlertsWarningCell.init(style:reuseIdentifier:) in Loop/Loop/View Controllers/StatusTableViewController.swift
StatusTableViewController.MuteAlertsWarningCell.init(coder:),MuteAlertsWarningCell.init(coder:) in Loop/Loop/View Controllers/StatusTableViewController.swift
StatusTableViewController.MuteAlertsWarningCell.GradientView.init(frame:),GradientView.init(frame:) in Loop/Loop/View Controllers/StatusTableViewController.swift
StatusTableViewController.MuteAlertsWarningCell.GradientView.init(coder:),GradientView.init(coder:) in Loop/Loop/View Controllers/StatusTableViewController.swift
StatusTableViewController.AlertPermissionsDisabledWarningCell.init(style:reuseIdentifier:),AlertPermissionsDisabledWarningCell.init(style:reuseIdentifier:) in Loop/Loop/View Controllers/StatusTableViewController.swift
StatusTableViewController.AlertPermissionsDisabledWarningCell.init(coder:),AlertPermissionsDisabledWarningCell.init(coder:) in Loop/Loop/View Controllers/StatusTableViewController.swift
TestingScenariosTableViewController.init(coder:),TestingScenariosTableViewController.init(coder:) in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
TestingScenariosTableViewController.init(style:),TestingScenariosTableViewController.init(style:) in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
TestingScenariosTableViewController.init(nibName:bundle:),TestingScenariosTableViewController.init(nibName:bundle:) in Loop/Loop/View Controllers/TestingScenariosTableViewController.swift
AddEditFavoriteFoodViewModel.init(originalFavoriteFood:onSave:),AddEditFavoriteFoodViewModel.init(originalFavoriteFood:onSave:) in Loop/Loop/View Models/AddEditFavoriteFoodViewModel.swift
AddEditFavoriteFoodViewModel.init(carbsQuantity:foodType:absorptionTime:onSave:),AddEditFavoriteFoodViewModel.init(carbsQuantity:foodType:absorptionTime:onSave:) in Loop/Loop/View Models/AddEditFavoriteFoodViewModel.swift
CriticalEventLogExportActivityItemSource.init(url:),CriticalEventLogExportActivityItemSource.init(url:) in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
CriticalEventLogExportActivityItemSource.init(),CriticalEventLogExportActivityItemSource.init() in Loop/Loop/View Models/CriticalEventLogExportViewModel.swift
FavoriteFoodsViewModel.init(),FavoriteFoodsViewModel.init() in Loop/Loop/View Models/FavoriteFoodsViewModel.swift
ServicesViewModel.FakeService1.init(),FakeService1.init() in Loop/Loop/View Models/ServicesViewModel.swift
ServicesViewModel.FakeService2.init(),FakeService2.init() in Loop/Loop/View Models/ServicesViewModel.swift
ServicesViewModel.FakeService2.init(rawState:),FakeService2.init(rawState:) in Loop/Loop/View Models/ServicesViewModel.swift
ServicesViewModel.FakeService1.init(rawState:),FakeService1.init(rawState:) in Loop/Loop/View Models/ServicesViewModel.swift
SettingsViewModel.FakeClosedLoopAllowedPublisher.init(),FakeClosedLoopAllowedPublisher.init() in Loop/Loop/View Models/SettingsViewModel.swift
MockCriticalEventLogExporterFactory.init(),MockCriticalEventLogExporterFactory.init() in Loop/Loop/Views/CriticalEventLogExportView.swift
AddEditFavoriteFoodView.init(originalFavoriteFood:onSave:),AddEditFavoriteFoodView.init(originalFavoriteFood:onSave:) in Loop/Loop/Views/AddEditFavoriteFoodView.swift
AddEditFavoriteFoodView.init(carbsQuantity:foodType:absorptionTime:onSave:),AddEditFavoriteFoodView.init(carbsQuantity:foodType:absorptionTime:onSave:) in Loop/Loop/Views/AddEditFavoriteFoodView.swift
HowAbsorptionTimeWorksView.init(),HowAbsorptionTimeWorksView.init() in Loop/Loop/Views/HowAbsorptionTimeWorksView.swift
AlertManagementView.init(checker:alertMuter:),AlertManagementView.init(checker:alertMuter:) in Loop/Loop/Views/AlertManagementView.swift
HowMuteAlertWorkView.init(),HowMuteAlertWorkView.init() in Loop/Loop/Views/HowMuteAlertWorkView.swift
NotificationsCriticalAlertPermissionsView.init(backButtonText:mode:checker:),NotificationsCriticalAlertPermissionsView.init(backButtonText:mode:checker:) in Loop/Loop/Views/NotificationsCriticalAlertPermissionsView.swift
AlertManagementView_Previews.init(),AlertManagementView_Previews.init() in Loop/Loop/Views/AlertManagementView.swift
LabelBackground.init(),LabelBackground.init() in Loop/Loop/Views/BolusEntryView.swift
ManualGlucoseEntryRow.init(quantity:),ManualGlucoseEntryRow.init(quantity:) in Loop/Loop/Views/ManualGlucoseEntryRow.swift
PredictedGlucoseChartView.init(chartManager:glucoseUnit:glucoseValues:predictedGlucoseValues:targetGlucoseSchedule:preMealOverride:scheduleOverride:dateInterval:isInteractingWithChart:),PredictedGlucoseChartView.init(chartManager:glucoseUnit:glucoseValues:predictedGlucoseValues:targetGlucoseSchedule:preMealOverride:scheduleOverride:dateInterval:isInteractingWithChart:) in Loop/Loop/Views/PredictedGlucoseChartView.swift
LabeledQuantity.init(label:quantity:unit:maxFractionDigits:),LabeledQuantity.init(label:quantity:unit:maxFractionDigits:) in Loop/Loop/Views/BolusEntryView.swift
BolusProgressTableViewCell.init(style:reuseIdentifier:),BolusProgressTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/BolusProgressTableViewCell.swift
BolusProgressTableViewCell.init(coder:),BolusProgressTableViewCell.init(coder:) in Loop/Loop/Views/BolusProgressTableViewCell.swift
CarbEntryTableViewCell.init(style:reuseIdentifier:),CarbEntryTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/CarbEntryTableViewCell.swift
CarbEntryTableViewCell.init(coder:),CarbEntryTableViewCell.init(coder:) in Loop/Loop/Views/CarbEntryTableViewCell.swift
CircleMaskView.init(frame:),CircleMaskView.init(frame:) in Loop/Loop/Views/CircleMaskView.swift
CircleMaskView.init(coder:),CircleMaskView.init(coder:) in Loop/Loop/Views/CircleMaskView.swift
CriticalEventLogExportView.init(presentationMode:viewModel:),CriticalEventLogExportView.init(presentationMode:viewModel:) in Loop/Loop/Views/CriticalEventLogExportView.swift
ActivityViewController.init(activityItems:applicationActivities:),ActivityViewController.init(activityItems:applicationActivities:) in Loop/Loop/Views/CriticalEventLogExportView.swift
CriticalEventLogExportView_Previews.init(),CriticalEventLogExportView_Previews.init() in Loop/Loop/Views/CriticalEventLogExportView.swift
MockCriticalEventLogExporter.init(),MockCriticalEventLogExporter.init() in Loop/Loop/Views/CriticalEventLogExportView.swift
DosingStrategySelectionView.init(automaticDosingStrategy:),DosingStrategySelectionView.init(automaticDosingStrategy:) in Loop/Loop/Views/DosingStrategySelectionView.swift
DosingStrategySelectionView_Previews.init(),DosingStrategySelectionView_Previews.init() in Loop/Loop/Views/DosingStrategySelectionView.swift
FavoriteFoodDetailView.init(food:onFoodDelete:isConfirmingDelete:carbFormatter:absorptionTimeFormatter:preferredCarbUnit:),FavoriteFoodDetailView.init(food:onFoodDelete:isConfirmingDelete:carbFormatter:absorptionTimeFormatter:preferredCarbUnit:) in Loop/Loop/Views/FavoriteFoodDetailView.swift
FavoriteFoodsView.init(),FavoriteFoodsView.init() in Loop/Loop/Views/FavoriteFoodsView.swift
GlucoseBasedApplicationFactorSelectionView.init(isGlucoseBasedApplicationFactorEnabled:automaticDosingStrategy:),GlucoseBasedApplicationFactorSelectionView.init(isGlucoseBasedApplicationFactorEnabled:automaticDosingStrategy:) in Loop/Loop/Views/GlucoseBasedApplicationFactorSelectionView.swift
GlucoseBasedApplicationFactorSelectionView_Previews.init(),GlucoseBasedApplicationFactorSelectionView_Previews.init() in Loop/Loop/Views/GlucoseBasedApplicationFactorSelectionView.swift
HUDViewTableViewCell.init(style:reuseIdentifier:),HUDViewTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/HUDViewTableViewCell.swift
HUDViewTableViewCell.init(coder:),HUDViewTableViewCell.init(coder:) in Loop/Loop/Views/HUDViewTableViewCell.swift
HeaderValuesTableViewCell.init(style:reuseIdentifier:),HeaderValuesTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/HeaderValuesTableViewCell.swift
HeaderValuesTableViewCell.init(coder:),HeaderValuesTableViewCell.init(coder:) in Loop/Loop/Views/HeaderValuesTableViewCell.swift
HowMuteAlertWorkView_Previews.init(),HowMuteAlertWorkView_Previews.init() in Loop/Loop/Views/HowMuteAlertWorkView.swift
IconTitleSubtitleTableViewCell.init(style:reuseIdentifier:),IconTitleSubtitleTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/IconTitleSubtitleTableViewCell.swift
IconTitleSubtitleTableViewCell.init(coder:),IconTitleSubtitleTableViewCell.init(coder:) in Loop/Loop/Views/IconTitleSubtitleTableViewCell.swift
IntegralRetrospectiveCorrectionSelectionView.init(isIntegralRetrospectiveCorrectionEnabled:),IntegralRetrospectiveCorrectionSelectionView.init(isIntegralRetrospectiveCorrectionEnabled:) in Loop/Loop/Views/IntegralRetrospectiveCorrectionSelectionView.swift
IntegralRetrospectiveCorrectionSelectionView_Previews.init(),IntegralRetrospectiveCorrectionSelectionView_Previews.init() in Loop/Loop/Views/IntegralRetrospectiveCorrectionSelectionView.swift
NotificationsCriticalAlertPermissionsView_Previews.init(),NotificationsCriticalAlertPermissionsView_Previews.init() in Loop/Loop/Views/NotificationsCriticalAlertPermissionsView.swift
OverrideBadgeView.init(frame:),OverrideBadgeView.init(frame:) in Loop/Loop/Views/OverrideBadgeView.swift
OverrideBadgeView.init(coder:),OverrideBadgeView.init(coder:) in Loop/Loop/Views/OverrideBadgeView.swift
PotentialCarbEntryTableViewCell.init(style:reuseIdentifier:),PotentialCarbEntryTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/PotentialCarbEntryTableViewCell.swift
PotentialCarbEntryTableViewCell.init(coder:),PotentialCarbEntryTableViewCell.init(coder:) in Loop/Loop/Views/PotentialCarbEntryTableViewCell.swift
PredictedGlucoseChartView.Coordinator.init(_:),Coordinator.init(_:) in Loop/Loop/Views/PredictedGlucoseChartView.swift
PredictionInputEffectTableViewCell.init(style:reuseIdentifier:),PredictionInputEffectTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/PredictionInputEffectTableViewCell.swift
PredictionInputEffectTableViewCell.init(coder:),PredictionInputEffectTableViewCell.init(coder:) in Loop/Loop/Views/PredictionInputEffectTableViewCell.swift
PredictionSettingTableViewCell.init(style:reuseIdentifier:),PredictionSettingTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/PredictionSettingTableViewCell.swift
PredictionSettingTableViewCell.init(coder:),PredictionSettingTableViewCell.init(coder:) in Loop/Loop/Views/PredictionSettingTableViewCell.swift
ExperimentsSettingsView.init(automaticDosingStrategy:),ExperimentsSettingsView.init(automaticDosingStrategy:) in Loop/Loop/Views/SettingsView+algorithmExperimentsSection.swift
ExperimentRow.init(name:enabled:),ExperimentRow.init(name:enabled:) in Loop/Loop/Views/SettingsView+algorithmExperimentsSection.swift
PluginMenuItem<Content>.init(section:view:pluginIdentifier:offset:),PluginMenuItem.init(section:view:pluginIdentifier:offset:) in Loop/Loop/Views/SettingsView.swift
LargeButton<Content, SecondaryContent>.init(action:includeArrow:imageView:secondaryImageView:label:descriptiveText:),LargeButton.init(action:includeArrow:imageView:secondaryImageView:label:descriptiveText:) in Loop/Loop/Views/SettingsView.swift
SettingsView_Previews.init(),SettingsView_Previews.init() in Loop/Loop/Views/SettingsView.swift
SimpleBolusCalculatorView_Previews.init(),SimpleBolusCalculatorView_Previews.init() in Loop/Loop/Views/SimpleBolusView.swift
SimpleBolusCalculatorView_Previews.MockSimpleBolusViewDelegate.init(),MockSimpleBolusViewDelegate.init() in Loop/Loop/Views/SimpleBolusView.swift
TitleSubtitleTableViewCell.init(style:reuseIdentifier:),TitleSubtitleTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/TitleSubtitleTableViewCell.swift
TitleSubtitleTableViewCell.init(coder:),TitleSubtitleTableViewCell.init(coder:) in Loop/Loop/Views/TitleSubtitleTableViewCell.swift
TitleSubtitleTextFieldTableViewCell.init(style:reuseIdentifier:),TitleSubtitleTextFieldTableViewCell.init(style:reuseIdentifier:) in Loop/Loop/Views/TitleSubtitleTextFieldTableViewCell.swift
TitleSubtitleTextFieldTableViewCell.init(coder:),TitleSubtitleTextFieldTableViewCell.init(coder:) in Loop/Loop/Views/TitleSubtitleTextFieldTableViewCell.swift
IntentHandler.init(),IntentHandler.init() in Loop/Loop Intent Extension/IntentHandler.swift
OverrideIntentHandler.init(),OverrideIntentHandler.init() in Loop/Loop Intent Extension/OverrideIntentHandler.swift
StatusChartsManager.init(colors:settings:traitCollection:),StatusChartsManager.init(colors:settings:traitCollection:) in Loop/Loop Status Extension/StatusChartsManager.swift
StatusChartsManager.init(colors:settings:axisLabelFont:charts:traitCollection:),StatusChartsManager.init(colors:settings:axisLabelFont:charts:traitCollection:) in Loop/Loop Status Extension/StatusChartsManager.swift
StatusViewController.init(nibName:bundle:),StatusViewController.init(nibName:bundle:) in Loop/Loop Status Extension/StatusViewController.swift
StatusViewController.init(coder:),StatusViewController.init(coder:) in Loop/Loop Status Extension/StatusViewController.swift
BasalView.init(netBasal:isOld:),BasalView.init(netBasal:isOld:) in Loop/Loop Widget Extension/Components/BasalView.swift
BasalRateView.init(percent:),BasalRateView.init(percent:) in Loop/Loop Widget Extension/Components/BasalView.swift
GlucoseView.init(entry:),GlucoseView.init(entry:) in Loop/Loop Widget Extension/Components/GlucoseView.swift
LoopCircleView.init(entry:),LoopCircleView.init(entry:) in Loop/Loop Widget Extension/Components/LoopCircleView.swift
PumpView.init(entry:),PumpView.init(entry:) in Loop/Loop Widget Extension/Components/PumpView.swift
SystemActionLink.init(to:active:),SystemActionLink.init(to:active:) in Loop/Loop Widget Extension/Components/SystemActionLink.swift
LoopWidgets.init(),LoopWidgets.init() in Loop/Loop Widget Extension/LoopWidgets.swift
SystemStatusWidget.init(),SystemStatusWidget.init() in Loop/Loop Widget Extension/Widgets/SystemStatusWidget.swift
StatusWidgetTimelimeEntry.init(date:contextUpdatedAt:lastLoopCompleted:closeLoop:currentGlucose:glucoseFetchedAt:delta:unit:sensor:pumpHighlight:netBasal:eventualGlucose:preMealPresetAllowed:preMealPresetActive:customPresetActive:),StatusWidgetTimelimeEntry.init(date:contextUpdatedAt:lastLoopCompleted:closeLoop:currentGlucose:glucoseFetchedAt:delta:unit:sensor:pumpHighlight:netBasal:eventualGlucose:preMealPresetAllowed:preMealPresetActive:customPresetActive:) in Loop/Loop Widget Extension/Timeline/StatusWidgetTimelimeEntry.swift
StatusWidgetTimelineProvider.init(),StatusWidgetTimelineProvider.init() in Loop/Loop Widget Extension/Timeline/StatusWidgetTimelineProvider.swift
SystemStatusWidgetEntryView.init(entry:),SystemStatusWidgetEntryView.init(entry:) in Loop/Loop Widget Extension/Widgets/SystemStatusWidget.swift
Alert.Identifier.init(managerIdentifier:alertIdentifier:),Identifier.init(managerIdentifier:alertIdentifier:) in LoopKit/LoopKit/Alert.swift
Alert.init(identifier:foregroundContent:backgroundContent:trigger:interruptionLevel:sound:metadata:),Alert.init(identifier:foregroundContent:backgroundContent:trigger:interruptionLevel:sound:metadata:) in LoopKit/LoopKit/Alert.swift
Alert.Content.init(title:body:acknowledgeActionButtonLabel:),Content.init(title:body:acknowledgeActionButtonLabel:) in LoopKit/LoopKit/Alert.swift
PersistedAlert.init(alert:issuedDate:retractedDate:acknowledgedDate:),PersistedAlert.init(alert:issuedDate:retractedDate:acknowledgedDate:) in LoopKit/LoopKit/Alert.swift
Alert.Trigger.Repeating.init(repeatInterval:),Repeating.init(repeatInterval:) in LoopKit/LoopKit/Alert.swift
Alert.Trigger.Repeating.init(repeatInterval:),Repeating.init(repeatInterval:) in LoopKit/LoopKit/Alert.swift
Alert.Trigger.Delayed.init(delayInterval:),Delayed.init(delayInterval:) in LoopKit/LoopKit/Alert.swift
Alert.Trigger.Delayed.init(delayInterval:),Delayed.init(delayInterval:) in LoopKit/LoopKit/Alert.swift
Alert.Sound.SoundName.init(name:),SoundName.init(name:) in LoopKit/LoopKit/Alert.swift
Alert.Sound.SoundName.init(name:),SoundName.init(name:) in LoopKit/LoopKit/Alert.swift
AnyCodableEquatable.init(_:),AnyCodableEquatable.init(_:) in LoopKit/LoopKit/AnyCodableEquatable.swift
AnyCodableEquatable.init(from:),AnyCodableEquatable.init(from:) in LoopKit/LoopKit/AnyCodableEquatable.swift
BasalScheduleValidationResult.init(scheduleError:itemErrors:),BasalScheduleValidationResult.init(scheduleError:itemErrors:) in LoopKit/LoopKit/BasalRateSchedule.swift
AbsorbedCarbValue.init(observed:clamped:total:remaining:observedDate:estimatedTimeRemaining:timeToAbsorbObservedCarbs:),AbsorbedCarbValue.init(observed:clamped:total:remaining:observedDate:estimatedTimeRemaining:timeToAbsorbObservedCarbs:) in LoopKit/LoopKit/CarbKit/AbsorbedCarbValue.swift
CachedCarbObject.init(entity:insertInto:),CachedCarbObject.init(entity:insertInto:) in LoopKit/LoopKit/CarbKit/CachedCarbObject+CoreDataClass.swift
CarbMath.init(),CarbMath.init() in LoopKit/LoopKit/CarbKit/CarbMath.swift
CarbModelSettings.init(absorptionModel:initialAbsorptionTimeOverrun:adaptiveAbsorptionRateEnabled:adaptiveRateStandbyIntervalFraction:),CarbModelSettings.init(absorptionModel:initialAbsorptionTimeOverrun:adaptiveAbsorptionRateEnabled:adaptiveRateStandbyIntervalFraction:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
ParabolicAbsorption.init(),ParabolicAbsorption.init() in LoopKit/LoopKit/CarbKit/CarbMath.swift
LinearAbsorption.init(),LinearAbsorption.init() in LoopKit/LoopKit/CarbKit/CarbMath.swift
PiecewiseLinearAbsorption.init(),PiecewiseLinearAbsorption.init() in LoopKit/LoopKit/CarbKit/CarbMath.swift
CarbValue.init(startDate:endDate:value:),CarbValue.init(startDate:endDate:value:) in LoopKit/LoopKit/CarbKit/CarbValue.swift
GlucoseEffect.init(startDate:quantity:),GlucoseEffect.init(startDate:quantity:) in LoopKit/LoopKit/GlucoseEffect.swift
CarbStatusBuilder<T>.init(entry:carbUnit:carbohydrateSensitivityFactor:initialAbsorptionTime:maxAbsorptionTime:delay:lastEffectDate:absorptionModel:adaptiveAbsorptionRateEnabled:adaptiveRateStandbyIntervalFraction:initialObservedEffect:),CarbStatusBuilder.init(entry:carbUnit:carbohydrateSensitivityFactor:initialAbsorptionTime:maxAbsorptionTime:delay:lastEffectDate:absorptionModel:adaptiveAbsorptionRateEnabled:adaptiveRateStandbyIntervalFraction:initialObservedEffect:) in LoopKit/LoopKit/CarbKit/CarbMath.swift
CarbStatus<T>.init(entry:absorption:observedTimeline:),CarbStatus.init(entry:absorption:observedTimeline:) in LoopKit/LoopKit/CarbKit/CarbStatus.swift
CarbStore.CarbStoreError.init(error:),CarbStoreError.init(error:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
CarbStore.init(healthKitSampleStore:cacheStore:cacheLength:defaultAbsorptionTimes:carbRatioSchedule:insulinSensitivitySchedule:overrideHistory:syncVersion:absorptionTimeOverrun:calculationDelta:effectDelay:carbAbsorptionModel:provenanceIdentifier:test_currentDate:),CarbStore.init(healthKitSampleStore:cacheStore:cacheLength:defaultAbsorptionTimes:carbRatioSchedule:insulinSensitivitySchedule:overrideHistory:syncVersion:absorptionTimeOverrun:calculationDelta:effectDelay:carbAbsorptionModel:provenanceIdentifier:test_currentDate:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
Locked<T>.init(_:),Locked.init(_:) in LoopKit/LoopKit/Locked.swift
CarbStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/CarbKit/CarbStore.swift
CarbStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/CarbKit/CarbStore.swift
CarbStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
CarbStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/CarbKit/CarbStore.swift
JSONStreamEncoder.init(stream:),JSONStreamEncoder.init(stream:) in LoopKit/LoopKit/JSONStreamEncoder.swift
NewCarbEntry.init(date:quantity:startDate:foodType:absorptionTime:),NewCarbEntry.init(date:quantity:startDate:foodType:absorptionTime:) in LoopKit/LoopKit/CarbKit/NewCarbEntry.swift
NewCarbEntry.init(rawValue:),NewCarbEntry.init(rawValue:) in LoopKit/LoopKit/CarbKit/NewCarbEntry.swift
StoredCarbEntry.init(startDate:quantity:uuid:provenanceIdentifier:syncIdentifier:syncVersion:foodType:absorptionTime:createdByCurrentApp:userCreatedDate:userUpdatedDate:),StoredCarbEntry.init(startDate:quantity:uuid:provenanceIdentifier:syncIdentifier:syncVersion:foodType:absorptionTime:createdByCurrentApp:userCreatedDate:userUpdatedDate:) in LoopKit/LoopKit/CarbKit/StoredCarbEntry.swift
SyncCarbObject.init(absorptionTime:createdByCurrentApp:foodType:grams:startDate:uuid:provenanceIdentifier:syncIdentifier:syncVersion:userCreatedDate:userUpdatedDate:userDeletedDate:operation:addedDate:supercededDate:),SyncCarbObject.init(absorptionTime:createdByCurrentApp:foodType:grams:startDate:uuid:provenanceIdentifier:syncIdentifier:syncVersion:userCreatedDate:userUpdatedDate:userDeletedDate:operation:addedDate:supercededDate:) in LoopKit/LoopKit/CarbKit/SyncCarbObject.swift
CorrectionRangeOverrides.init(preMeal:workout:unit:),CorrectionRangeOverrides.init(preMeal:workout:unit:) in LoopKit/LoopKit/CorrectionRangeOverrides.swift
CorrectionRangeOverrides.init(preMeal:workout:),CorrectionRangeOverrides.init(preMeal:workout:) in LoopKit/LoopKit/CorrectionRangeOverrides.swift
CorrectionRangeOverrides.init(preMeal:workout:),CorrectionRangeOverrides.init(preMeal:workout:) in LoopKit/LoopKit/CorrectionRangeOverrides.swift
GlucoseRangeSchedule.init(rangeSchedule:override:),GlucoseRangeSchedule.init(rangeSchedule:override:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
GlucoseRangeSchedule.Override.init(value:start:end:),Override.init(value:start:end:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
DailyValueSchedule<T>.init(dailyItems:timeZone:),DailyValueSchedule.init(dailyItems:timeZone:) in LoopKit/LoopKit/DailyValueSchedule.swift
RepeatingScheduleValue<T>.init(startTime:value:),RepeatingScheduleValue.init(startTime:value:) in LoopKit/LoopKit/DailyValueSchedule.swift
DailyQuantitySchedule<T>.init(unit:valueSchedule:),DailyQuantitySchedule.init(unit:valueSchedule:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
DailyQuantitySchedule<T>.init(unit:dailyItems:timeZone:),DailyQuantitySchedule.init(unit:dailyItems:timeZone:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
DailyQuantitySchedule<T>.init(rawValue:),DailyQuantitySchedule.init(rawValue:) in LoopKit/LoopKit/DailyQuantitySchedule.swift
AbsoluteScheduleValue<T>.init(startDate:endDate:value:),AbsoluteScheduleValue.init(startDate:endDate:value:) in LoopKit/LoopKit/DailyValueSchedule.swift
DeliveryLimits.init(maximumBasalRate:maximumBolus:),DeliveryLimits.init(maximumBasalRate:maximumBolus:) in LoopKit/LoopKit/DeliveryLimits.swift
DeviceAVSoundPlayer.init(baseURL:),DeviceAVSoundPlayer.init(baseURL:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
DeviceAVSoundPlayer.Delegate.init(parent:),Delegate.init(parent:) in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
DeviceAVSoundPlayer.Delegate.init(),Delegate.init() in LoopKit/LoopKit/DeviceManager/AlertSoundPlayer.swift
CGMManagerStatus.init(hasValidSensorSession:lastCommunicationDate:device:),CGMManagerStatus.init(hasValidSensorSession:lastCommunicationDate:device:) in LoopKit/LoopKit/DeviceManager/CGMManager.swift
CodableDevice.init(_:),CodableDevice.init(_:) in LoopKit/LoopKit/DeviceManager/CodableDevice.swift
DeviceLogEntry.init(entity:insertInto:),DeviceLogEntry.init(entity:insertInto:) in LoopKit/LoopKit/DeviceManager/DeviceLog/DeviceLogEntry+CoreDataClass.swift
PersistentContainer.init(name:managedObjectModel:),PersistentContainer.init(name:managedObjectModel:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
PersistentDeviceLog.init(storageFile:maxEntryAge:),PersistentDeviceLog.init(storageFile:maxEntryAge:) in LoopKit/LoopKit/DeviceManager/DeviceLog/PersistentDeviceLog.swift
StoredDeviceLogEntry.init(managedObject:),StoredDeviceLogEntry.init(managedObject:) in LoopKit/LoopKit/DeviceManager/DeviceLog/StoredDeviceLogEntry.swift
StoredDeviceLogEntry.init(type:managerIdentifier:deviceIdentifier:message:timestamp:),StoredDeviceLogEntry.init(type:managerIdentifier:deviceIdentifier:message:timestamp:) in LoopKit/LoopKit/DeviceManager/DeviceLog/StoredDeviceLogEntry.swift
Self.init(rawState:),DeviceManager.init(rawState:) in LoopKit/LoopKit/DeviceManager/DeviceManager.swift
DoseProgress.init(deliveredUnits:percentComplete:),DoseProgress.init(deliveredUnits:percentComplete:) in LoopKit/LoopKit/DeviceManager/DoseProgressReporter.swift
DoseProgressTimerEstimator.init(reportingQueue:),DoseProgressTimerEstimator.init(reportingQueue:) in LoopKit/LoopKit/DeviceManager/DoseProgressTimerEstimator.swift
UnfairLock.init(),UnfairLock.init() in LoopKit/LoopKit/UnfairLock.swift
PumpStatusHighlight.init(localizedMessage:imageName:state:),PumpStatusHighlight.init(localizedMessage:imageName:state:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpLifecycleProgress.init(percentComplete:progressState:),PumpLifecycleProgress.init(percentComplete:progressState:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.init(timeZone:device:pumpBatteryChargeRemaining:basalDeliveryState:bolusState:insulinType:deliveryIsUncertain:),PumpManagerStatus.init(timeZone:device:pumpBatteryChargeRemaining:basalDeliveryState:bolusState:insulinType:deliveryIsUncertain:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.BasalDeliveryState.Suspended.init(at:),Suspended.init(at:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.BasalDeliveryState.Suspended.init(at:),Suspended.init(at:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.BasalDeliveryState.TempBasal.init(dose:),TempBasal.init(dose:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.BasalDeliveryState.TempBasal.init(dose:),TempBasal.init(dose:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.BasalDeliveryState.Active.init(at:),Active.init(at:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.BasalDeliveryState.Active.init(at:),Active.init(at:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.BolusState.InProgress.init(dose:),InProgress.init(dose:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
PumpManagerStatus.BolusState.InProgress.init(dose:),InProgress.init(dose:) in LoopKit/LoopKit/DeviceManager/PumpManagerStatus.swift
DosingDecisionObject.init(entity:insertInto:),DosingDecisionObject.init(entity:insertInto:) in LoopKit/LoopKit/DosingDecisionObject+CoreDataClass.swift
EncodableDosingDecisionObject.init(_:),EncodableDosingDecisionObject.init(_:) in LoopKit/LoopKit/DosingDecisionObject+CoreDataProperties.swift
DosingDecisionStore.init(store:expireAfter:),DosingDecisionStore.init(store:expireAfter:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.init(date:controllerTimeZone:reason:settings:scheduleOverride:controllerStatus:pumpManagerStatus:pumpStatusHighlight:cgmManagerStatus:lastReservoirValue:historicalGlucose:originalCarbEntry:carbEntry:manualGlucoseSample:carbsOnBoard:insulinOnBoard:glucoseTargetRangeSchedule:predictedGlucose:automaticDoseRecommendation:manualBolusRecommendation:manualBolusRequested:warnings:errors:syncIdentifier:),StoredDosingDecision.init(date:controllerTimeZone:reason:settings:scheduleOverride:controllerStatus:pumpManagerStatus:pumpStatusHighlight:cgmManagerStatus:lastReservoirValue:historicalGlucose:originalCarbEntry:carbEntry:manualGlucoseSample:carbsOnBoard:insulinOnBoard:glucoseTargetRangeSchedule:predictedGlucose:automaticDoseRecommendation:manualBolusRecommendation:manualBolusRequested:warnings:errors:syncIdentifier:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.Issue.init(id:details:),Issue.init(id:details:) in LoopKit/LoopKit/DosingDecisionStore.swift
ManualBolusRecommendationWithDate.init(recommendation:date:),ManualBolusRecommendationWithDate.init(recommendation:date:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.LastReservoirValue.init(startDate:unitVolume:),LastReservoirValue.init(startDate:unitVolume:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.StoredDeviceHighlight.init(localizedMessage:imageName:state:),StoredDeviceHighlight.init(localizedMessage:imageName:state:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.ControllerStatus.init(batteryState:batteryLevel:),ControllerStatus.init(batteryState:batteryLevel:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecision.Settings.init(syncIdentifier:),Settings.init(syncIdentifier:) in LoopKit/LoopKit/DosingDecisionStore.swift
StoredDosingDecisionData.init(date:data:),StoredDosingDecisionData.init(date:data:) in LoopKit/LoopKit/DosingDecisionStore.swift
DosingDecisionStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/DosingDecisionStore.swift
DosingDecisionStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/DosingDecisionStore.swift
DosingDecisionStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/DosingDecisionStore.swift
DosingDecisionStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/DosingDecisionStore.swift
Guardrail<Value>.init(absoluteBounds:recommendedBounds:startingSuggestion:),Guardrail.init(absoluteBounds:recommendedBounds:startingSuggestion:) in LoopKit/LoopKit/Guardrail.swift
NewFavoriteFood.init(name:carbsQuantity:foodType:absorptionTime:),NewFavoriteFood.init(name:carbsQuantity:foodType:absorptionTime:) in LoopKit/LoopKit/FavoriteFood/NewFavoriteFood.swift
StoredFavoriteFood.init(id:name:carbsQuantity:foodType:absorptionTime:),StoredFavoriteFood.init(id:name:carbsQuantity:foodType:absorptionTime:) in LoopKit/LoopKit/FavoriteFood/StoredFavoriteFood.swift
GlucoseChange.init(startDate:endDate:quantity:),GlucoseChange.init(startDate:endDate:quantity:) in LoopKit/LoopKit/GlucoseChange.swift
GlucoseEffectVelocity.init(startDate:endDate:quantity:),GlucoseEffectVelocity.init(startDate:endDate:quantity:) in LoopKit/LoopKit/GlucoseEffectVelocity.swift
CachedGlucoseObject.init(entity:insertInto:),CachedGlucoseObject.init(entity:insertInto:) in LoopKit/LoopKit/GlucoseKit/CachedGlucoseObject+CoreDataClass.swift
CgmEvent.init(entity:insertInto:),CgmEvent.init(entity:insertInto:) in LoopKit/LoopKit/GlucoseKit/CgmEvent.swift
CgmEventStore.init(cacheStore:cacheLength:),CgmEventStore.init(cacheStore:cacheLength:) in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
CgmEventStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
CgmEventStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
CgmEventStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
CgmEventStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/GlucoseKit/CgmEventStore.swift
GlucoseMath.init(),GlucoseMath.init() in LoopKit/LoopKit/GlucoseKit/GlucoseMath.swift
GlucoseStore.init(healthKitSampleStore:cacheStore:cacheLength:momentumDataInterval:provenanceIdentifier:),GlucoseStore.init(healthKitSampleStore:cacheStore:cacheLength:momentumDataInterval:provenanceIdentifier:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
GlucoseStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
GlucoseStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
GlucoseStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
GlucoseStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/GlucoseKit/GlucoseStore.swift
NewGlucoseSample.init(date:quantity:condition:trend:trendRate:isDisplayOnly:wasUserEntered:syncIdentifier:syncVersion:device:),NewGlucoseSample.init(date:quantity:condition:trend:trendRate:isDisplayOnly:wasUserEntered:syncIdentifier:syncVersion:device:) in LoopKit/LoopKit/GlucoseKit/NewGlucoseSample.swift
NewGlucoseSample.init(rawValue:),NewGlucoseSample.init(rawValue:) in LoopKit/LoopKit/GlucoseKit/NewGlucoseSample.swift
PersistedCgmEvent.init(date:type:deviceIdentifier:expectedLifetime:warmupPeriod:failureMessage:),PersistedCgmEvent.init(date:type:deviceIdentifier:expectedLifetime:warmupPeriod:failureMessage:) in LoopKit/LoopKit/GlucoseKit/PersistedCgmEvent.swift
StoredGlucoseSample.init(sample:),StoredGlucoseSample.init(sample:) in LoopKit/LoopKit/GlucoseKit/StoredGlucoseSample.swift
StoredGlucoseSample.init(uuid:provenanceIdentifier:syncIdentifier:syncVersion:startDate:quantity:condition:trend:trendRate:isDisplayOnly:wasUserEntered:device:healthKitEligibleDate:),StoredGlucoseSample.init(uuid:provenanceIdentifier:syncIdentifier:syncVersion:startDate:quantity:condition:trend:trendRate:isDisplayOnly:wasUserEntered:device:healthKitEligibleDate:) in LoopKit/LoopKit/GlucoseKit/StoredGlucoseSample.swift
GlucoseRange.init(minValue:maxValue:unit:),GlucoseRange.init(minValue:maxValue:unit:) in LoopKit/LoopKit/GlucoseRange.swift
GlucoseRange.init(range:unit:),GlucoseRange.init(range:unit:) in LoopKit/LoopKit/GlucoseRange.swift
DoubleRange.init(minValue:maxValue:),DoubleRange.init(minValue:maxValue:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
GlucoseRangeSchedule.init(unit:dailyItems:timeZone:),GlucoseRangeSchedule.init(unit:dailyItems:timeZone:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
GlucoseRangeSchedule.init(rawValue:),GlucoseRangeSchedule.init(rawValue:) in LoopKit/LoopKit/GlucoseRangeSchedule.swift
GlucoseThreshold.init(unit:value:),GlucoseThreshold.init(unit:value:) in LoopKit/LoopKit/GlucoseThreshold.swift
GlucoseThreshold.init(rawValue:),GlucoseThreshold.init(rawValue:) in LoopKit/LoopKit/GlucoseThreshold.swift
SimpleGlucoseValue.init(startDate:endDate:quantity:),SimpleGlucoseValue.init(startDate:endDate:quantity:) in LoopKit/LoopKit/GlucoseValue.swift
SimpleGlucoseValue.init(_:),SimpleGlucoseValue.init(_:) in LoopKit/LoopKit/GlucoseValue.swift
PredictedGlucoseValue.init(startDate:quantity:),PredictedGlucoseValue.init(startDate:quantity:) in LoopKit/LoopKit/GlucoseValue.swift
HealthKitSampleStore.init(healthStore:observeHealthKitSamplesFromCurrentApp:observeHealthKitSamplesFromOtherApps:type:observationStart:observationEnabled:),HealthKitSampleStore.init(healthStore:observeHealthKitSamplesFromCurrentApp:observeHealthKitSamplesFromOtherApps:type:observationStart:observationEnabled:) in LoopKit/LoopKit/HealthKitSampleStore.swift
HealthKitSampleStore.QueryState.init(anchorState:authorizationDetermined:),QueryState.init(anchorState:authorizationDetermined:) in LoopKit/LoopKit/HealthKitSampleStore.swift
HealthStoreUnitCache.init(healthStore:),HealthStoreUnitCache.init(healthStore:) in LoopKit/LoopKit/HealthStoreUnitCache.swift
ExponentialInsulinModel.init(actionDuration:peakActivityTime:delay:),ExponentialInsulinModel.init(actionDuration:peakActivityTime:delay:) in LoopKit/LoopKit/InsulinKit/ExponentialInsulinModel.swift
PresetInsulinModelProvider.init(defaultRapidActingModel:),PresetInsulinModelProvider.init(defaultRapidActingModel:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
StaticInsulinModelProvider.init(_:),StaticInsulinModelProvider.init(_:) in LoopKit/LoopKit/Insulin/InsulinModelProvider.swift
AutomaticDoseRecommendation.init(basalAdjustment:bolusUnits:),AutomaticDoseRecommendation.init(basalAdjustment:bolusUnits:) in LoopKit/LoopKit/InsulinKit/AutomaticDoseRecommendation.swift
CachedInsulinDeliveryObject.init(entity:insertInto:),CachedInsulinDeliveryObject.init(entity:insertInto:) in LoopKit/LoopKit/InsulinKit/CachedInsulinDeliveryObject+CoreDataClass.swift
DoseEntry.init(type:startDate:endDate:value:unit:deliveredUnits:description:syncIdentifier:scheduledBasalRate:insulinType:automatic:manuallyEntered:isMutable:wasProgrammedByPumpUI:),DoseEntry.init(type:startDate:endDate:value:unit:deliveredUnits:description:syncIdentifier:scheduledBasalRate:insulinType:automatic:manuallyEntered:isMutable:wasProgrammedByPumpUI:) in LoopKit/LoopKit/InsulinKit/DoseEntry.swift
DoseEntry.init(suspendDate:automatic:isMutable:wasProgrammedByPumpUI:),DoseEntry.init(suspendDate:automatic:isMutable:wasProgrammedByPumpUI:) in LoopKit/LoopKit/InsulinKit/DoseEntry.swift
DoseEntry.init(resumeDate:insulinType:automatic:isMutable:wasProgrammedByPumpUI:),DoseEntry.init(resumeDate:insulinType:automatic:isMutable:wasProgrammedByPumpUI:) in LoopKit/LoopKit/InsulinKit/DoseEntry.swift
DoseStore.init(healthKitSampleStore:cacheStore:cacheLength:insulinModelProvider:longestEffectDuration:basalProfile:insulinSensitivitySchedule:overrideHistory:syncVersion:lastPumpEventsReconciliation:provenanceIdentifier:onReady:test_currentDate:),DoseStore.init(healthKitSampleStore:cacheStore:cacheLength:insulinModelProvider:longestEffectDuration:basalProfile:insulinSensitivitySchedule:overrideHistory:syncVersion:lastPumpEventsReconciliation:provenanceIdentifier:onReady:test_currentDate:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
DoseStore.DoseStoreError.init(error:),DoseStoreError.init(error:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
InsulinDeliveryStore.init(healthKitSampleStore:storeSamplesToHealthKit:cacheStore:observationEnabled:cacheLength:provenanceIdentifier:test_currentDate:),InsulinDeliveryStore.init(healthKitSampleStore:storeSamplesToHealthKit:cacheStore:observationEnabled:cacheLength:provenanceIdentifier:test_currentDate:) in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
InsulinValue.init(startDate:value:),InsulinValue.init(startDate:value:) in LoopKit/LoopKit/InsulinKit/InsulinValue.swift
DoseStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/InsulinKit/DoseStore.swift
DoseStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/InsulinKit/DoseStore.swift
DoseStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
DoseStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/InsulinKit/DoseStore.swift
InsulinDeliveryStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
InsulinDeliveryStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
InsulinDeliveryStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
InsulinDeliveryStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/InsulinKit/InsulinDeliveryStore.swift
InsulinMath.init(),InsulinMath.init() in LoopKit/LoopKit/InsulinKit/InsulinMath.swift
BolusRecommendationNotice.AllGlucoseBelowTarget.init(minGlucose:),AllGlucoseBelowTarget.init(minGlucose:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
BolusRecommendationNotice.AllGlucoseBelowTarget.init(minGlucose:),AllGlucoseBelowTarget.init(minGlucose:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
BolusRecommendationNotice.PredictedGlucoseBelowTarget.init(minGlucose:),PredictedGlucoseBelowTarget.init(minGlucose:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
BolusRecommendationNotice.PredictedGlucoseBelowTarget.init(minGlucose:),PredictedGlucoseBelowTarget.init(minGlucose:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
BolusRecommendationNotice.CurrentGlucoseBelowTarget.init(glucose:),CurrentGlucoseBelowTarget.init(glucose:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
BolusRecommendationNotice.CurrentGlucoseBelowTarget.init(glucose:),CurrentGlucoseBelowTarget.init(glucose:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
BolusRecommendationNotice.GlucoseBelowSuspendThreshold.init(minGlucose:),GlucoseBelowSuspendThreshold.init(minGlucose:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
BolusRecommendationNotice.GlucoseBelowSuspendThreshold.init(minGlucose:),GlucoseBelowSuspendThreshold.init(minGlucose:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
ManualBolusRecommendation.init(amount:pendingInsulin:notice:),ManualBolusRecommendation.init(amount:pendingInsulin:notice:) in LoopKit/LoopKit/InsulinKit/ManualBolusRecommendation.swift
NewPumpEvent.init(date:dose:raw:title:type:alarmType:),NewPumpEvent.init(date:dose:raw:title:type:alarmType:) in LoopKit/LoopKit/InsulinKit/NewPumpEvent.swift
PumpEventType.init(rawValue:),PumpEventType.init(rawValue:) in LoopKit/LoopKit/InsulinKit/PumpEventType.swift
PersistedPumpEvent.init(date:persistedDate:dose:isUploaded:objectIDURL:raw:title:type:automatic:alarmType:),PersistedPumpEvent.init(date:persistedDate:dose:isUploaded:objectIDURL:raw:title:type:automatic:alarmType:) in LoopKit/LoopKit/InsulinKit/PersistedPumpEvent.swift
PumpEvent.init(entity:insertInto:),PumpEvent.init(entity:insertInto:) in LoopKit/LoopKit/InsulinKit/PumpEvent+CoreDataClass.swift
Reservoir.init(entity:insertInto:),Reservoir.init(entity:insertInto:) in LoopKit/LoopKit/InsulinKit/Reservoir.swift
StoredReservoirValue.init(startDate:unitVolume:objectIDURL:),StoredReservoirValue.init(startDate:unitVolume:objectIDURL:) in LoopKit/LoopKit/InsulinKit/ReservoirValue.swift
TempBasalRecommendation.init(unitsPerHour:duration:),TempBasalRecommendation.init(unitsPerHour:duration:) in LoopKit/LoopKit/InsulinKit/TempBasalRecommendation.swift
WalshInsulinModel.init(actionDuration:delay:),WalshInsulinModel.init(actionDuration:delay:) in LoopKit/LoopKit/InsulinKit/WalshInsulinModel.swift
KeychainManager.init(),KeychainManager.init() in LoopKit/LoopKit/KeychainManager.swift
KeychainManager.InternetCredentials.init(username:password:url:),InternetCredentials.init(username:password:url:) in LoopKit/LoopKit/KeychainManager.swift
SecurityProtocol.init(scheme:),SecurityProtocol.init(scheme:) in LoopKit/LoopKit/KeychainManager.swift
SecurityProtocol.init(secAttrProtocol:),SecurityProtocol.init(secAttrProtocol:) in LoopKit/LoopKit/KeychainManager.swift
LocalBundle.init(),LocalBundle.init() in LoopKit/LoopKit/LocalizedString.swift
LoopAlgorithmEffects.init(insulin:carbs:retrospectiveCorrection:momentum:insulinCounteraction:),LoopAlgorithmEffects.init(insulin:carbs:retrospectiveCorrection:momentum:insulinCounteraction:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
AlgorithmEffectsOptions.init(rawValue:),AlgorithmEffectsOptions.init(rawValue:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
LoopPrediction.init(glucose:effects:),LoopPrediction.init(glucose:effects:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
DoseRecommendation.init(basalAdjustment:bolusUnits:),DoseRecommendation.init(basalAdjustment:bolusUnits:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
LoopAlgorithm.init(),LoopAlgorithm.init() in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithm.swift
StandardRetrospectiveCorrection.init(effectDuration:),StandardRetrospectiveCorrection.init(effectDuration:) in LoopKit/LoopKit/RetrospectiveCorrection/StandardRetrospectiveCorrection.swift
IntegralRetrospectiveCorrection.init(effectDuration:),IntegralRetrospectiveCorrection.init(effectDuration:) in LoopKit/LoopKit/RetrospectiveCorrection/IntegralRetrospectiveCorrection.swift
LoopAlgorithmInput.init(predictionInput:predictionDate:doseRecommendationType:),LoopAlgorithmInput.init(predictionInput:predictionDate:doseRecommendationType:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithmInput.swift
LoopAlgorithmSettings.init(basal:sensitivity:carbRatio:target:delta:insulinActivityDuration:algorithmEffectsOptions:maximumBasalRatePerHour:maximumBolus:suspendThreshold:useIntegralRetrospectiveCorrection:),LoopAlgorithmSettings.init(basal:sensitivity:carbRatio:target:delta:insulinActivityDuration:algorithmEffectsOptions:maximumBasalRatePerHour:maximumBolus:suspendThreshold:useIntegralRetrospectiveCorrection:) in LoopKit/LoopKit/LoopAlgorithm/LoopAlgorithmSettings.swift
LoopPredictionInput.init(glucoseHistory:doses:carbEntries:settings:),LoopPredictionInput.init(glucoseHistory:doses:carbEntries:settings:) in LoopKit/LoopKit/LoopAlgorithm/LoopPredictionInput.swift
LoopAlgorithmOutput.init(predictedGlucose:doseRecommendation:),LoopAlgorithmOutput.init(predictedGlucose:doseRecommendation:) in LoopKit/LoopKit/LoopAlgorithm/LoopPredictionOutput.swift
NotificationSettings.init(authorizationStatus:soundSetting:badgeSetting:alertSetting:notificationCenterSetting:lockScreenSetting:carPlaySetting:alertStyle:showPreviewsSetting:criticalAlertSetting:providesAppNotificationSettings:announcementSetting:timeSensitiveSetting:scheduledDeliverySetting:temporaryMuteAlertsSetting:),NotificationSettings.init(authorizationStatus:soundSetting:badgeSetting:alertSetting:notificationCenterSetting:lockScreenSetting:carPlaySetting:alertStyle:showPreviewsSetting:criticalAlertSetting:providesAppNotificationSettings:announcementSetting:timeSensitiveSetting:scheduledDeliverySetting:temporaryMuteAlertsSetting:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.TemporaryMuteAlertSetting.init(enabled:duration:),TemporaryMuteAlertSetting.init(enabled:duration:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.ShowPreviewsSetting.init(_:),ShowPreviewsSetting.init(_:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.AlertStyle.init(_:),AlertStyle.init(_:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.NotificationSetting.init(_:),NotificationSetting.init(_:) in LoopKit/LoopKit/NotificationSettings.swift
NotificationSettings.AuthorizationStatus.init(_:),AuthorizationStatus.init(_:) in LoopKit/LoopKit/NotificationSettings.swift
CachedCarbObjectv3EntityMigrationPolicy.init(),CachedCarbObjectv3EntityMigrationPolicy.init() in LoopKit/LoopKit/Persistence/Modelv3EntityMigrationPolicy.swift
DeletedCarbObjectv3EntityMigrationPolicy.init(),DeletedCarbObjectv3EntityMigrationPolicy.init() in LoopKit/LoopKit/Persistence/Modelv3EntityMigrationPolicy.swift
PersistenceController.init(directoryURL:isReadOnly:),PersistenceController.init(directoryURL:isReadOnly:) in LoopKit/LoopKit/Persistence/PersistenceController.swift
QuantityFormatter.init(for:),QuantityFormatter.init(for:) in LoopKit/LoopKit/QuantityFormatter.swift
Self.init(rawState:),StatefulPluggable.init(rawState:) in LoopKit/LoopKit/Service/StatefulPluggable.swift
SettingsObject.init(entity:insertInto:),SettingsObject.init(entity:insertInto:) in LoopKit/LoopKit/SettingsObject+CoreDataClass.swift
EncodableSettingsObject.init(_:),EncodableSettingsObject.init(_:) in LoopKit/LoopKit/SettingsObject+CoreDataProperties.swift
SettingsStore.init(store:expireAfter:),SettingsStore.init(store:expireAfter:) in LoopKit/LoopKit/SettingsStore.swift
StoredSettings.init(date:controllerTimeZone:dosingEnabled:glucoseTargetRangeSchedule:preMealTargetRange:workoutTargetRange:overridePresets:scheduleOverride:preMealOverride:maximumBasalRatePerHour:maximumBolus:suspendThreshold:deviceToken:insulinType:defaultRapidActingModel:basalRateSchedule:insulinSensitivitySchedule:carbRatioSchedule:notificationSettings:controllerDevice:cgmDevice:pumpDevice:bloodGlucoseUnit:automaticDosingStrategy:syncIdentifier:),StoredSettings.init(date:controllerTimeZone:dosingEnabled:glucoseTargetRangeSchedule:preMealTargetRange:workoutTargetRange:overridePresets:scheduleOverride:preMealOverride:maximumBasalRatePerHour:maximumBolus:suspendThreshold:deviceToken:insulinType:defaultRapidActingModel:basalRateSchedule:insulinSensitivitySchedule:carbRatioSchedule:notificationSettings:controllerDevice:cgmDevice:pumpDevice:bloodGlucoseUnit:automaticDosingStrategy:syncIdentifier:) in LoopKit/LoopKit/SettingsStore.swift
StoredSettings.init(date:controllerTimeZone:dosingEnabled:glucoseTargetRangeSchedule:preMealTargetRange:workoutTargetRange:overridePresets:scheduleOverride:preMealOverride:maximumBasalRatePerHour:maximumBolus:suspendThreshold:deviceToken:insulinType:defaultRapidActingModel:basalRateSchedule:insulinSensitivitySchedule:carbRatioSchedule:notificationSettings:controllerDevice:cgmDevice:pumpDevice:bloodGlucoseUnit:automaticDosingStrategy:syncIdentifier:),StoredSettings.init(date:controllerTimeZone:dosingEnabled:glucoseTargetRangeSchedule:preMealTargetRange:workoutTargetRange:overridePresets:scheduleOverride:preMealOverride:maximumBasalRatePerHour:maximumBolus:suspendThreshold:deviceToken:insulinType:defaultRapidActingModel:basalRateSchedule:insulinSensitivitySchedule:carbRatioSchedule:notificationSettings:controllerDevice:cgmDevice:pumpDevice:bloodGlucoseUnit:automaticDosingStrategy:syncIdentifier:) in LoopKit/LoopKit/SettingsStore.swift
StoredSettings.ControllerDevice.init(name:systemName:systemVersion:model:modelIdentifier:),ControllerDevice.init(name:systemName:systemVersion:model:modelIdentifier:) in LoopKit/LoopKit/SettingsStore.swift
StoredSettings.ControllerDevice.init(name:systemName:systemVersion:model:modelIdentifier:),ControllerDevice.init(name:systemName:systemVersion:model:modelIdentifier:) in LoopKit/LoopKit/SettingsStore.swift
StoredSettingsData.init(date:data:),StoredSettingsData.init(date:data:) in LoopKit/LoopKit/SettingsStore.swift
SettingsStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/SettingsStore.swift
SettingsStore.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/SettingsStore.swift
SettingsStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/SettingsStore.swift
SettingsStore.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/SettingsStore.swift
StoredInsulinModel.init(modelType:delay:actionDuration:peakActivity:),StoredInsulinModel.init(modelType:delay:actionDuration:peakActivity:) in LoopKit/LoopKit/StoredInsulinModel.swift
SyncAlertObject.init(identifier:trigger:interruptionLevel:foregroundContent:backgroundContent:sound:metadata:issuedDate:acknowledgedDate:retractedDate:syncIdentifier:),SyncAlertObject.init(identifier:trigger:interruptionLevel:foregroundContent:backgroundContent:sound:metadata:issuedDate:acknowledgedDate:retractedDate:syncIdentifier:) in LoopKit/LoopKit/SyncAlertObject.swift
TemporaryScheduleOverride.init(context:settings:startDate:duration:enactTrigger:syncIdentifier:actualEnd:),TemporaryScheduleOverride.init(context:settings:startDate:duration:enactTrigger:syncIdentifier:actualEnd:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
TemporaryScheduleOverride.Context.Preset.init(preset:),Preset.init(preset:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
TemporaryScheduleOverride.Context.Preset.init(preset:),Preset.init(preset:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
TemporaryScheduleOverride.Duration.Finite.init(duration:),Finite.init(duration:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
TemporaryScheduleOverride.Duration.Finite.init(duration:),Finite.init(duration:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
TemporaryScheduleOverride.EnactTrigger.Remote.init(address:),Remote.init(address:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
TemporaryScheduleOverride.EnactTrigger.Remote.init(address:),Remote.init(address:) in LoopKit/LoopKit/TemporaryScheduleOverride.swift
End.init(from:),End.init(from:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
OverrideEvent.init(override:modificationCounter:),OverrideEvent.init(override:modificationCounter:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
TemporaryScheduleOverrideHistory.init(),TemporaryScheduleOverrideHistory.init() in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
TemporaryScheduleOverrideHistory.QueryAnchor.init(),QueryAnchor.init() in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
TemporaryScheduleOverrideHistory.QueryAnchor.init(rawValue:),QueryAnchor.init(rawValue:) in LoopKit/LoopKit/TemporaryScheduleOverrideHistory.swift
TemporaryScheduleOverridePreset.init(id:symbol:name:settings:duration:),TemporaryScheduleOverridePreset.init(id:symbol:name:settings:duration:) in LoopKit/LoopKit/TemporaryScheduleOverridePreset.swift
TemporaryScheduleOverrideSettings.init(unit:targetRange:insulinNeedsScaleFactor:),TemporaryScheduleOverrideSettings.init(unit:targetRange:insulinNeedsScaleFactor:) in LoopKit/LoopKit/TemporaryScheduleOverrideSettings.swift
TemporaryScheduleOverrideSettings.init(targetRange:insulinNeedsScaleFactor:),TemporaryScheduleOverrideSettings.init(targetRange:insulinNeedsScaleFactor:) in LoopKit/LoopKit/TemporaryScheduleOverrideSettings.swift
TherapySettings.init(glucoseTargetRangeSchedule:correctionRangeOverrides:overridePresets:maximumBasalRatePerHour:maximumBolus:suspendThreshold:insulinSensitivitySchedule:carbRatioSchedule:basalRateSchedule:defaultRapidActingModel:),TherapySettings.init(glucoseTargetRangeSchedule:correctionRangeOverrides:overridePresets:maximumBasalRatePerHour:maximumBolus:suspendThreshold:insulinSensitivitySchedule:carbRatioSchedule:basalRateSchedule:defaultRapidActingModel:) in LoopKit/LoopKit/TherapySettings.swift
Weak<Value>.init(_:),Weak.init(_:) in LoopKit/LoopKit/WeakSet.swift
WeakSet<Element>.init(_:),WeakSet.init(_:) in LoopKit/LoopKit/WeakSet.swift
WeakSet<Element>.Iterator.init(_:),Iterator.init(_:) in LoopKit/LoopKit/WeakSet.swift
WeakSet<Element>.Iterator.init(_:),Iterator.init(_:) in LoopKit/LoopKit/WeakSet.swift
WeakSynchronizedDelegate<Delegate>.init(queue:),WeakSynchronizedDelegate.init(queue:) in LoopKit/LoopKit/WeakSynchronizedDelegate.swift
WeakSynchronizedSet<Element>.init(),WeakSynchronizedSet.init() in LoopKit/LoopKit/WeakSynchronizedSet.swift
WeakSynchronizedSet<Element>.ElementDispatchContainer.init(element:queue:),ElementDispatchContainer.init(element:queue:) in LoopKit/LoopKit/WeakSynchronizedSet.swift
PredictedGlucoseChart.init(predictedGlucoseBounds:yAxisStepSizeMGDLOverride:),PredictedGlucoseChart.init(predictedGlucoseBounds:yAxisStepSizeMGDLOverride:) in LoopKit/LoopKitUI/Charts/PredictedGlucoseChart.swift
PredictedGlucoseChart.PredictedGlucoseBounds.init(minimum:maximum:),PredictedGlucoseBounds.init(minimum:maximum:) in LoopKit/LoopKitUI/Charts/PredictedGlucoseChart.swift
LoopOnboardingPlugin.init(),LoopOnboardingPlugin.init() in LoopOnboarding/LoopOnboardingPlugin/LoopOnboardingPlugin.swift
LoopSupportPlugin.init(),LoopSupportPlugin.init() in LoopSupport/LoopSupportPlugin/LoopSupportPlugin.swift
MinimedKitPlugin.init(),MinimedKitPlugin.init() in MinimedKit/MinimedKitPlugin/MinimedKitPlugin.swift
MixpanelServiceKitPlugin.init(),MixpanelServiceKitPlugin.init() in MixpanelService/MixpanelServiceKitPlugin/MixpanelServiceKitPlugin.swift
NightscoutRemoteCGMPlugin.init(),NightscoutRemoteCGMPlugin.init() in NightscoutRemoteCGM/NightscoutRemoteCGMPlugin/NightscoutRemoteCGMPlugin.swift
NightscoutServiceKitPlugin.init(),NightscoutServiceKitPlugin.init() in NightscoutService/NightscoutServiceKitPlugin/NightscoutServiceKitPlugin.swift
PeripheralManager.init(peripheral:configuration:centralManager:),PeripheralManager.init(peripheral:configuration:centralManager:) in OmniBLE/OmniBLE/Bluetooth/PeripheralManager.swift
PeripheralManager.Configuration.init(serviceCharacteristics:notifyingCharacteristics:valueUpdateMacros:),Configuration.init(serviceCharacteristics:notifyingCharacteristics:valueUpdateMacros:) in OmniBLE/OmniBLE/Bluetooth/PeripheralManager.swift
PeripheralManager.Configuration.init(),Configuration.init() in OmniBLE/OmniBLE/Bluetooth/PeripheralManager.swift
TempSegment.init(pulses:),TempSegment.init(pulses:) in OmniBLE/OmniBLE/OmnipodCommon/BasalDeliveryTable.swift
OmniBLEPlugin.init(),OmniBLEPlugin.init() in OmniBLE/OmniBLEPlugin/OmniBLEPlugin.swift
TempSegment.init(pulses:),TempSegment.init(pulses:) in OmniKit/OmniKit/OmnipodCommon/BasalDeliveryTable.swift
OmniKitPlugin.init(),OmniKitPlugin.init() in OmniKit/OmniKitPlugin/OmniKitPlugin.swift
CommandSession.init(manager:responseType:firmwareVersion:),CommandSession.init(manager:responseType:firmwareVersion:) in RileyLinkKit/RileyLinkBLEKit/CommandSession.swift
PeripheralManager.Configuration.init(serviceCharacteristics:notifyingCharacteristics:valueUpdateMacros:),Configuration.init(serviceCharacteristics:notifyingCharacteristics:valueUpdateMacros:) in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
PeripheralManager.init(peripheral:configuration:centralManager:queue:),PeripheralManager.init(peripheral:configuration:centralManager:queue:) in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
PeripheralManager.Configuration.init(),Configuration.init() in RileyLinkKit/RileyLinkBLEKit/PeripheralManager.swift
TidepoolServiceKitPlugin.init(),TidepoolServiceKitPlugin.init() in TidepoolService/TidepoolServiceKitPlugin/TidepoolServiceKitPlugin.swift
ShareClientPlugin.init(),ShareClientPlugin.init() in dexcom-share-client-swift/ShareClientPlugin/ShareClientPlugin.swift
